
Project_2nd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004930  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004a3c  08004a3c  00014a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ac8  08004ac8  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  08004ac8  08004ac8  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ac8  08004ac8  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ac8  08004ac8  00014ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004acc  08004acc  00014acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08004ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200000c0  08004b90  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08004b90  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e510  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000272b  00000000  00000000  0002e5f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00030d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  00031aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181b3  00000000  00000000  000326e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010034  00000000  00000000  0004a89b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088c5c  00000000  00000000  0005a8cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e352b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a68  00000000  00000000  000e3580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c0 	.word	0x200000c0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a24 	.word	0x08004a24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c4 	.word	0x200000c4
 8000148:	08004a24 	.word	0x08004a24

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <Pedestrian_run>:

TIM_HandleTypeDef htim3;

int duty_cycle = 0;

void Pedestrian_run(){
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	switch(status)
 8000744:	4b55      	ldr	r3, [pc, #340]	; (800089c <Pedestrian_run+0x15c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3b01      	subs	r3, #1
 800074a:	2b03      	cmp	r3, #3
 800074c:	f200 80a3 	bhi.w	8000896 <Pedestrian_run+0x156>
 8000750:	a201      	add	r2, pc, #4	; (adr r2, 8000758 <Pedestrian_run+0x18>)
 8000752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000756:	bf00      	nop
 8000758:	08000769 	.word	0x08000769
 800075c:	080007b1 	.word	0x080007b1
 8000760:	08000841 	.word	0x08000841
 8000764:	080007f9 	.word	0x080007f9
	{
	case Auto_red:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800076e:	484c      	ldr	r0, [pc, #304]	; (80008a0 <Pedestrian_run+0x160>)
 8000770:	f002 f847 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077a:	484a      	ldr	r0, [pc, #296]	; (80008a4 <Pedestrian_run+0x164>)
 800077c:	f002 f841 	bl	8002802 <HAL_GPIO_WritePin>

		if(timer2_flag == 1){
 8000780:	4b49      	ldr	r3, [pc, #292]	; (80008a8 <Pedestrian_run+0x168>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d17f      	bne.n	8000888 <Pedestrian_run+0x148>
			ped_flag = 0;
 8000788:	4b48      	ldr	r3, [pc, #288]	; (80008ac <Pedestrian_run+0x16c>)
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000794:	4842      	ldr	r0, [pc, #264]	; (80008a0 <Pedestrian_run+0x160>)
 8000796:	f002 f834 	bl	8002802 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	4840      	ldr	r0, [pc, #256]	; (80008a4 <Pedestrian_run+0x164>)
 80007a2:	f002 f82e 	bl	8002802 <HAL_GPIO_WritePin>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 80007a6:	4b42      	ldr	r3, [pc, #264]	; (80008b0 <Pedestrian_run+0x170>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2200      	movs	r2, #0
 80007ac:	635a      	str	r2, [r3, #52]	; 0x34
		}

		break;
 80007ae:	e06b      	b.n	8000888 <Pedestrian_run+0x148>
	case Auto_change:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b6:	483a      	ldr	r0, [pc, #232]	; (80008a0 <Pedestrian_run+0x160>)
 80007b8:	f002 f823 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c2:	4838      	ldr	r0, [pc, #224]	; (80008a4 <Pedestrian_run+0x164>)
 80007c4:	f002 f81d 	bl	8002802 <HAL_GPIO_WritePin>
		if(timer2_flag == 1){
 80007c8:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <Pedestrian_run+0x168>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d15d      	bne.n	800088c <Pedestrian_run+0x14c>
			ped_flag = 0;
 80007d0:	4b36      	ldr	r3, [pc, #216]	; (80008ac <Pedestrian_run+0x16c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007dc:	4830      	ldr	r0, [pc, #192]	; (80008a0 <Pedestrian_run+0x160>)
 80007de:	f002 f810 	bl	8002802 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e8:	482e      	ldr	r0, [pc, #184]	; (80008a4 <Pedestrian_run+0x164>)
 80007ea:	f002 f80a 	bl	8002802 <HAL_GPIO_WritePin>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 80007ee:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <Pedestrian_run+0x170>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2200      	movs	r2, #0
 80007f4:	635a      	str	r2, [r3, #52]	; 0x34
		}
		break;
 80007f6:	e049      	b.n	800088c <Pedestrian_run+0x14c>
	case Auto_green:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fe:	4828      	ldr	r0, [pc, #160]	; (80008a0 <Pedestrian_run+0x160>)
 8000800:	f001 ffff 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 	SET);
 8000804:	2201      	movs	r2, #1
 8000806:	f44f 7180 	mov.w	r1, #256	; 0x100
 800080a:	4826      	ldr	r0, [pc, #152]	; (80008a4 <Pedestrian_run+0x164>)
 800080c:	f001 fff9 	bl	8002802 <HAL_GPIO_WritePin>
		if(timer2_flag == 1){
 8000810:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <Pedestrian_run+0x168>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d13b      	bne.n	8000890 <Pedestrian_run+0x150>
			ped_flag = 0;
 8000818:	4b24      	ldr	r3, [pc, #144]	; (80008ac <Pedestrian_run+0x16c>)
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000824:	481e      	ldr	r0, [pc, #120]	; (80008a0 <Pedestrian_run+0x160>)
 8000826:	f001 ffec 	bl	8002802 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000830:	481c      	ldr	r0, [pc, #112]	; (80008a4 <Pedestrian_run+0x164>)
 8000832:	f001 ffe6 	bl	8002802 <HAL_GPIO_WritePin>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <Pedestrian_run+0x170>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2200      	movs	r2, #0
 800083c:	635a      	str	r2, [r3, #52]	; 0x34
		}
		break;
 800083e:	e027      	b.n	8000890 <Pedestrian_run+0x150>
	case Auto_yellow:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000846:	4816      	ldr	r0, [pc, #88]	; (80008a0 <Pedestrian_run+0x160>)
 8000848:	f001 ffdb 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  SET);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000852:	4814      	ldr	r0, [pc, #80]	; (80008a4 <Pedestrian_run+0x164>)
 8000854:	f001 ffd5 	bl	8002802 <HAL_GPIO_WritePin>
		if(timer2_flag == 1){
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <Pedestrian_run+0x168>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d119      	bne.n	8000894 <Pedestrian_run+0x154>
			ped_flag = 0;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <Pedestrian_run+0x16c>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <Pedestrian_run+0x160>)
 800086e:	f001 ffc8 	bl	8002802 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000878:	480a      	ldr	r0, [pc, #40]	; (80008a4 <Pedestrian_run+0x164>)
 800087a:	f001 ffc2 	bl	8002802 <HAL_GPIO_WritePin>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <Pedestrian_run+0x170>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2200      	movs	r2, #0
 8000884:	635a      	str	r2, [r3, #52]	; 0x34
		}
		break;
 8000886:	e005      	b.n	8000894 <Pedestrian_run+0x154>
		break;
 8000888:	bf00      	nop
 800088a:	e004      	b.n	8000896 <Pedestrian_run+0x156>
		break;
 800088c:	bf00      	nop
 800088e:	e002      	b.n	8000896 <Pedestrian_run+0x156>
		break;
 8000890:	bf00      	nop
 8000892:	e000      	b.n	8000896 <Pedestrian_run+0x156>
		break;
 8000894:	bf00      	nop
	}
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000110 	.word	0x20000110
 80008a0:	40010c00 	.word	0x40010c00
 80008a4:	40010800 	.word	0x40010800
 80008a8:	20000120 	.word	0x20000120
 80008ac:	20000114 	.word	0x20000114
 80008b0:	20000144 	.word	0x20000144

080008b4 <buzzer_run>:
void buzzer_run(){
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, duty_cycle);
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <buzzer_run+0x28>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <buzzer_run+0x2c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	635a      	str	r2, [r3, #52]	; 0x34
	if(duty_cycle > 999) duty_cycle = 0 ;
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <buzzer_run+0x28>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008ca:	db02      	blt.n	80008d2 <buzzer_run+0x1e>
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <buzzer_run+0x28>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	200000dc 	.word	0x200000dc
 80008e0:	20000144 	.word	0x20000144

080008e4 <mapFloat>:

float mapFloat(float x, float x_min, float x_max, float y_min, float y_max){
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b087      	sub	sp, #28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
 80008f0:	603b      	str	r3, [r7, #0]
  float y;
  y = y_min + (x - x_min)/(x_max - x_min)*(y_max - y_min);
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	f7ff fc2d 	bl	8000154 <__aeabi_fsub>
 80008fa:	4603      	mov	r3, r0
 80008fc:	461c      	mov	r4, r3
 80008fe:	68b9      	ldr	r1, [r7, #8]
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff fc27 	bl	8000154 <__aeabi_fsub>
 8000906:	4603      	mov	r3, r0
 8000908:	4619      	mov	r1, r3
 800090a:	4620      	mov	r0, r4
 800090c:	f7ff fde0 	bl	80004d0 <__aeabi_fdiv>
 8000910:	4603      	mov	r3, r0
 8000912:	461c      	mov	r4, r3
 8000914:	6839      	ldr	r1, [r7, #0]
 8000916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000918:	f7ff fc1c 	bl	8000154 <__aeabi_fsub>
 800091c:	4603      	mov	r3, r0
 800091e:	4619      	mov	r1, r3
 8000920:	4620      	mov	r0, r4
 8000922:	f7ff fd21 	bl	8000368 <__aeabi_fmul>
 8000926:	4603      	mov	r3, r0
 8000928:	4619      	mov	r1, r3
 800092a:	6838      	ldr	r0, [r7, #0]
 800092c:	f7ff fc14 	bl	8000158 <__addsf3>
 8000930:	4603      	mov	r3, r0
 8000932:	617b      	str	r3, [r7, #20]
  y = (y>y_max)?y_max:((y<y_min)?y_min:y);
 8000934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000936:	6978      	ldr	r0, [r7, #20]
 8000938:	f7ff fed2 	bl	80006e0 <__aeabi_fcmpgt>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <mapFloat+0x62>
 8000942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000944:	e009      	b.n	800095a <mapFloat+0x76>
 8000946:	6839      	ldr	r1, [r7, #0]
 8000948:	6978      	ldr	r0, [r7, #20]
 800094a:	f7ff feab 	bl	80006a4 <__aeabi_fcmplt>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <mapFloat+0x74>
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	e000      	b.n	800095a <mapFloat+0x76>
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	617b      	str	r3, [r7, #20]
  return y;
 800095c:	697b      	ldr	r3, [r7, #20]
}
 800095e:	4618      	mov	r0, r3
 8000960:	371c      	adds	r7, #28
 8000962:	46bd      	mov	sp, r7
 8000964:	bd90      	pop	{r4, r7, pc}
	...

08000968 <Is_button1_pressed>:
int button2_long_pressed_flag = 0;
int button3_long_pressed_flag = 0;
int buttonPED_long_pressed_flag = 0;


int Is_button1_pressed(){
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <Is_button1_pressed+0x20>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d104      	bne.n	800097e <Is_button1_pressed+0x16>
		button1_flag = 0;
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <Is_button1_pressed+0x20>)
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
		return 1;
 800097a:	2301      	movs	r3, #1
 800097c:	e000      	b.n	8000980 <Is_button1_pressed+0x18>
	}
	else{
		return 0;
 800097e:	2300      	movs	r3, #0
	}
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	200000e0 	.word	0x200000e0

0800098c <Is_button2_pressed>:
int Is_button2_pressed(){
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <Is_button2_pressed+0x20>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d104      	bne.n	80009a2 <Is_button2_pressed+0x16>
		button2_flag = 0;
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <Is_button2_pressed+0x20>)
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
		return 1;
 800099e:	2301      	movs	r3, #1
 80009a0:	e000      	b.n	80009a4 <Is_button2_pressed+0x18>
	}
	else{
		return 0;
 80009a2:	2300      	movs	r3, #0
	}
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	200000e4 	.word	0x200000e4

080009b0 <Is_button3_pressed>:
int Is_button3_pressed(){
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <Is_button3_pressed+0x20>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d104      	bne.n	80009c6 <Is_button3_pressed+0x16>
		button3_flag = 0;
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <Is_button3_pressed+0x20>)
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
		return 1;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e000      	b.n	80009c8 <Is_button3_pressed+0x18>
	}
	else{
		return 0;
 80009c6:	2300      	movs	r3, #0
	}
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	200000e8 	.word	0x200000e8

080009d4 <Is_buttonPED_pressed>:
int Is_buttonPED_pressed(){
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
	if(buttonPED_flag == 1){
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <Is_buttonPED_pressed+0x20>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d104      	bne.n	80009ea <Is_buttonPED_pressed+0x16>
		buttonPED_flag = 0;
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <Is_buttonPED_pressed+0x20>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
		return 1;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e000      	b.n	80009ec <Is_buttonPED_pressed+0x18>
	}
	else{
		return 0;
 80009ea:	2300      	movs	r3, #0
	}
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	200000ec 	.word	0x200000ec

080009f8 <Sub_key_pressed>:
		return 0;
	}
}


void Sub_key_pressed(int index){
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	if(index == 0)	button1_flag = 1;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d102      	bne.n	8000a0c <Sub_key_pressed+0x14>
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <Sub_key_pressed+0x44>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	601a      	str	r2, [r3, #0]
	if(index == 1)	button2_flag = 1;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d102      	bne.n	8000a18 <Sub_key_pressed+0x20>
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <Sub_key_pressed+0x48>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	601a      	str	r2, [r3, #0]
	if(index == 2)	button3_flag = 1;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d102      	bne.n	8000a24 <Sub_key_pressed+0x2c>
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <Sub_key_pressed+0x4c>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	601a      	str	r2, [r3, #0]
	if(index == 3)	buttonPED_flag = 1;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b03      	cmp	r3, #3
 8000a28:	d102      	bne.n	8000a30 <Sub_key_pressed+0x38>
 8000a2a:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <Sub_key_pressed+0x50>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	601a      	str	r2, [r3, #0]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	200000e0 	.word	0x200000e0
 8000a40:	200000e4 	.word	0x200000e4
 8000a44:	200000e8 	.word	0x200000e8
 8000a48:	200000ec 	.word	0x200000ec

08000a4c <Button_undebounce>:
	if(index == 0)	button1_long_pressed_flag = 1;
	if(index == 1)	button2_long_pressed_flag = 1;
	if(index == 2)	button3_long_pressed_flag = 1;
	if(index == 3)	buttonPED_long_pressed_flag = 1;
}
void Button_undebounce(){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
	for(int i= 0; i<= 3;i++){
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	e07d      	b.n	8000b54 <Button_undebounce+0x108>
	State0[i] = State1[i];
 8000a58:	4a43      	ldr	r2, [pc, #268]	; (8000b68 <Button_undebounce+0x11c>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a60:	4942      	ldr	r1, [pc, #264]	; (8000b6c <Button_undebounce+0x120>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	State1[i] = State2[i];
 8000a68:	4a41      	ldr	r2, [pc, #260]	; (8000b70 <Button_undebounce+0x124>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a70:	493d      	ldr	r1, [pc, #244]	; (8000b68 <Button_undebounce+0x11c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	State2[0]  = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8000a78:	2102      	movs	r1, #2
 8000a7a:	483e      	ldr	r0, [pc, #248]	; (8000b74 <Button_undebounce+0x128>)
 8000a7c:	f001 feaa 	bl	80027d4 <HAL_GPIO_ReadPin>
 8000a80:	4603      	mov	r3, r0
 8000a82:	461a      	mov	r2, r3
 8000a84:	4b3a      	ldr	r3, [pc, #232]	; (8000b70 <Button_undebounce+0x124>)
 8000a86:	601a      	str	r2, [r3, #0]
	State2[1]  = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000a88:	2110      	movs	r1, #16
 8000a8a:	483a      	ldr	r0, [pc, #232]	; (8000b74 <Button_undebounce+0x128>)
 8000a8c:	f001 fea2 	bl	80027d4 <HAL_GPIO_ReadPin>
 8000a90:	4603      	mov	r3, r0
 8000a92:	461a      	mov	r2, r3
 8000a94:	4b36      	ldr	r3, [pc, #216]	; (8000b70 <Button_undebounce+0x124>)
 8000a96:	605a      	str	r2, [r3, #4]
	State2[2]  = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8000a98:	2101      	movs	r1, #1
 8000a9a:	4837      	ldr	r0, [pc, #220]	; (8000b78 <Button_undebounce+0x12c>)
 8000a9c:	f001 fe9a 	bl	80027d4 <HAL_GPIO_ReadPin>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4b32      	ldr	r3, [pc, #200]	; (8000b70 <Button_undebounce+0x124>)
 8000aa6:	609a      	str	r2, [r3, #8]
	State2[3]  = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	4832      	ldr	r0, [pc, #200]	; (8000b74 <Button_undebounce+0x128>)
 8000aac:	f001 fe92 	bl	80027d4 <HAL_GPIO_ReadPin>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <Button_undebounce+0x124>)
 8000ab6:	60da      	str	r2, [r3, #12]

	if((State0[i] == State1[i]) && (State1[i] == State2[i])){
 8000ab8:	4a2c      	ldr	r2, [pc, #176]	; (8000b6c <Button_undebounce+0x120>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ac0:	4929      	ldr	r1, [pc, #164]	; (8000b68 <Button_undebounce+0x11c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d140      	bne.n	8000b4e <Button_undebounce+0x102>
 8000acc:	4a26      	ldr	r2, [pc, #152]	; (8000b68 <Button_undebounce+0x11c>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ad4:	4926      	ldr	r1, [pc, #152]	; (8000b70 <Button_undebounce+0x124>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d136      	bne.n	8000b4e <Button_undebounce+0x102>
		if(State2[i] != State3[i]){
 8000ae0:	4a23      	ldr	r2, [pc, #140]	; (8000b70 <Button_undebounce+0x124>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ae8:	4924      	ldr	r1, [pc, #144]	; (8000b7c <Button_undebounce+0x130>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d015      	beq.n	8000b20 <Button_undebounce+0xd4>
			State3[i] = State2[i];
 8000af4:	4a1e      	ldr	r2, [pc, #120]	; (8000b70 <Button_undebounce+0x124>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000afc:	491f      	ldr	r1, [pc, #124]	; (8000b7c <Button_undebounce+0x130>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(State3[i] == Press_state){
 8000b04:	4a1d      	ldr	r2, [pc, #116]	; (8000b7c <Button_undebounce+0x130>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d11e      	bne.n	8000b4e <Button_undebounce+0x102>
				//TODO
				Waiting_time = 300;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <Button_undebounce+0x134>)
 8000b12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000b16:	601a      	str	r2, [r3, #0]
				Sub_key_pressed(i);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ff6d 	bl	80009f8 <Sub_key_pressed>
 8000b1e:	e016      	b.n	8000b4e <Button_undebounce+0x102>
			}
		}
		else{
			if(State3[i] == Press_state){
 8000b20:	4a16      	ldr	r2, [pc, #88]	; (8000b7c <Button_undebounce+0x130>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d110      	bne.n	8000b4e <Button_undebounce+0x102>
			Waiting_time --;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <Button_undebounce+0x134>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	3b01      	subs	r3, #1
 8000b32:	4a13      	ldr	r2, [pc, #76]	; (8000b80 <Button_undebounce+0x134>)
 8000b34:	6013      	str	r3, [r2, #0]
			if(Waiting_time == 0){
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <Button_undebounce+0x134>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d107      	bne.n	8000b4e <Button_undebounce+0x102>
				//TODO
				Waiting_time = 100;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <Button_undebounce+0x134>)
 8000b40:	2264      	movs	r2, #100	; 0x64
 8000b42:	601a      	str	r2, [r3, #0]
				//Sub_long_pressed(i);
				State3[i] = Normal_state;
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <Button_undebounce+0x130>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2101      	movs	r1, #1
 8000b4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i= 0; i<= 3;i++){
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3301      	adds	r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	f77f af7e 	ble.w	8000a58 <Button_undebounce+0xc>
			}
		}

	}
}
}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000010 	.word	0x20000010
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	20000020 	.word	0x20000020
 8000b74:	40010800 	.word	0x40010800
 8000b78:	40010c00 	.word	0x40010c00
 8000b7c:	20000030 	.word	0x20000030
 8000b80:	20000040 	.word	0x20000040

08000b84 <red_seg_update>:
		buffer_led[0] = 1;
		buffer_led[1] = 0;
		break;
}
}
void red_seg_update(){
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
	buffer_led[0] = duration/10;
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <red_seg_update+0x70>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a1a      	ldr	r2, [pc, #104]	; (8000bf8 <red_seg_update+0x74>)
 8000b8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b92:	1092      	asrs	r2, r2, #2
 8000b94:	17db      	asrs	r3, r3, #31
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	4a18      	ldr	r2, [pc, #96]	; (8000bfc <red_seg_update+0x78>)
 8000b9a:	6013      	str	r3, [r2, #0]
	buffer_led[1] = duration%10;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <red_seg_update+0x70>)
 8000b9e:	6819      	ldr	r1, [r3, #0]
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <red_seg_update+0x74>)
 8000ba2:	fb83 2301 	smull	r2, r3, r3, r1
 8000ba6:	109a      	asrs	r2, r3, #2
 8000ba8:	17cb      	asrs	r3, r1, #31
 8000baa:	1ad2      	subs	r2, r2, r3
 8000bac:	4613      	mov	r3, r2
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4413      	add	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	1aca      	subs	r2, r1, r3
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <red_seg_update+0x78>)
 8000bb8:	605a      	str	r2, [r3, #4]
	buffer_led[2] = duration2/10;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <red_seg_update+0x7c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <red_seg_update+0x74>)
 8000bc0:	fb82 1203 	smull	r1, r2, r2, r3
 8000bc4:	1092      	asrs	r2, r2, #2
 8000bc6:	17db      	asrs	r3, r3, #31
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	4a0c      	ldr	r2, [pc, #48]	; (8000bfc <red_seg_update+0x78>)
 8000bcc:	6093      	str	r3, [r2, #8]
	buffer_led[3] = duration2%10;
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <red_seg_update+0x7c>)
 8000bd0:	6819      	ldr	r1, [r3, #0]
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <red_seg_update+0x74>)
 8000bd4:	fb83 2301 	smull	r2, r3, r3, r1
 8000bd8:	109a      	asrs	r2, r3, #2
 8000bda:	17cb      	asrs	r3, r1, #31
 8000bdc:	1ad2      	subs	r2, r2, r3
 8000bde:	4613      	mov	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	4413      	add	r3, r2
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	1aca      	subs	r2, r1, r3
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <red_seg_update+0x78>)
 8000bea:	60da      	str	r2, [r3, #12]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	200000f8 	.word	0x200000f8
 8000bf8:	66666667 	.word	0x66666667
 8000bfc:	20000100 	.word	0x20000100
 8000c00:	200000fc 	.word	0x200000fc

08000c04 <red_modify_update>:
void red_modify_update(){
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
	buffer_led[0] = duration_value/10;
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <red_modify_update+0x4c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a11      	ldr	r2, [pc, #68]	; (8000c54 <red_modify_update+0x50>)
 8000c0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c12:	1092      	asrs	r2, r2, #2
 8000c14:	17db      	asrs	r3, r3, #31
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <red_modify_update+0x54>)
 8000c1a:	6013      	str	r3, [r2, #0]
	buffer_led[1] = duration_value%10;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <red_modify_update+0x4c>)
 8000c1e:	6819      	ldr	r1, [r3, #0]
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <red_modify_update+0x50>)
 8000c22:	fb83 2301 	smull	r2, r3, r3, r1
 8000c26:	109a      	asrs	r2, r3, #2
 8000c28:	17cb      	asrs	r3, r1, #31
 8000c2a:	1ad2      	subs	r2, r2, r3
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4413      	add	r3, r2
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	1aca      	subs	r2, r1, r3
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <red_modify_update+0x54>)
 8000c38:	605a      	str	r2, [r3, #4]
	buffer_led[2] = 0;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <red_modify_update+0x54>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
	buffer_led[3] = 1;
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <red_modify_update+0x54>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	60da      	str	r2, [r3, #12]
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	200000f4 	.word	0x200000f4
 8000c54:	66666667 	.word	0x66666667
 8000c58:	20000100 	.word	0x20000100

08000c5c <yellow_seg_update>:
void yellow_seg_update(){
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
	buffer_led[0] = duration/10;
 8000c60:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <yellow_seg_update+0x70>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a1a      	ldr	r2, [pc, #104]	; (8000cd0 <yellow_seg_update+0x74>)
 8000c66:	fb82 1203 	smull	r1, r2, r2, r3
 8000c6a:	1092      	asrs	r2, r2, #2
 8000c6c:	17db      	asrs	r3, r3, #31
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	4a18      	ldr	r2, [pc, #96]	; (8000cd4 <yellow_seg_update+0x78>)
 8000c72:	6013      	str	r3, [r2, #0]
	buffer_led[1] = duration%10;
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <yellow_seg_update+0x70>)
 8000c76:	6819      	ldr	r1, [r3, #0]
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <yellow_seg_update+0x74>)
 8000c7a:	fb83 2301 	smull	r2, r3, r3, r1
 8000c7e:	109a      	asrs	r2, r3, #2
 8000c80:	17cb      	asrs	r3, r1, #31
 8000c82:	1ad2      	subs	r2, r2, r3
 8000c84:	4613      	mov	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4413      	add	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	1aca      	subs	r2, r1, r3
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <yellow_seg_update+0x78>)
 8000c90:	605a      	str	r2, [r3, #4]
	buffer_led[2] = duration/10;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <yellow_seg_update+0x70>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <yellow_seg_update+0x74>)
 8000c98:	fb82 1203 	smull	r1, r2, r2, r3
 8000c9c:	1092      	asrs	r2, r2, #2
 8000c9e:	17db      	asrs	r3, r3, #31
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	4a0c      	ldr	r2, [pc, #48]	; (8000cd4 <yellow_seg_update+0x78>)
 8000ca4:	6093      	str	r3, [r2, #8]
	buffer_led[3] = duration%10;
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <yellow_seg_update+0x70>)
 8000ca8:	6819      	ldr	r1, [r3, #0]
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <yellow_seg_update+0x74>)
 8000cac:	fb83 2301 	smull	r2, r3, r3, r1
 8000cb0:	109a      	asrs	r2, r3, #2
 8000cb2:	17cb      	asrs	r3, r1, #31
 8000cb4:	1ad2      	subs	r2, r2, r3
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	1aca      	subs	r2, r1, r3
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <yellow_seg_update+0x78>)
 8000cc2:	60da      	str	r2, [r3, #12]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	200000f8 	.word	0x200000f8
 8000cd0:	66666667 	.word	0x66666667
 8000cd4:	20000100 	.word	0x20000100

08000cd8 <yellow_modify_update>:
void yellow_modify_update(){
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
	buffer_led[0] = duration_value/10;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <yellow_modify_update+0x4c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <yellow_modify_update+0x50>)
 8000ce2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce6:	1092      	asrs	r2, r2, #2
 8000ce8:	17db      	asrs	r3, r3, #31
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <yellow_modify_update+0x54>)
 8000cee:	6013      	str	r3, [r2, #0]
	buffer_led[1] = duration_value%10;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <yellow_modify_update+0x4c>)
 8000cf2:	6819      	ldr	r1, [r3, #0]
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <yellow_modify_update+0x50>)
 8000cf6:	fb83 2301 	smull	r2, r3, r3, r1
 8000cfa:	109a      	asrs	r2, r3, #2
 8000cfc:	17cb      	asrs	r3, r1, #31
 8000cfe:	1ad2      	subs	r2, r2, r3
 8000d00:	4613      	mov	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	1aca      	subs	r2, r1, r3
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <yellow_modify_update+0x54>)
 8000d0c:	605a      	str	r2, [r3, #4]
	buffer_led[2] = 0;
 8000d0e:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <yellow_modify_update+0x54>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
	buffer_led[3] = 2;
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <yellow_modify_update+0x54>)
 8000d16:	2202      	movs	r2, #2
 8000d18:	60da      	str	r2, [r3, #12]
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200000f4 	.word	0x200000f4
 8000d28:	66666667 	.word	0x66666667
 8000d2c:	20000100 	.word	0x20000100

08000d30 <green_seg_update>:
void green_seg_update(){
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
	buffer_led[0] = duration/10;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <green_seg_update+0x70>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a1a      	ldr	r2, [pc, #104]	; (8000da4 <green_seg_update+0x74>)
 8000d3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d3e:	1092      	asrs	r2, r2, #2
 8000d40:	17db      	asrs	r3, r3, #31
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <green_seg_update+0x78>)
 8000d46:	6013      	str	r3, [r2, #0]
	buffer_led[1] = duration%10;
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <green_seg_update+0x70>)
 8000d4a:	6819      	ldr	r1, [r3, #0]
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <green_seg_update+0x74>)
 8000d4e:	fb83 2301 	smull	r2, r3, r3, r1
 8000d52:	109a      	asrs	r2, r3, #2
 8000d54:	17cb      	asrs	r3, r1, #31
 8000d56:	1ad2      	subs	r2, r2, r3
 8000d58:	4613      	mov	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	1aca      	subs	r2, r1, r3
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <green_seg_update+0x78>)
 8000d64:	605a      	str	r2, [r3, #4]
	buffer_led[2] = duration2/10;
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <green_seg_update+0x7c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <green_seg_update+0x74>)
 8000d6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d70:	1092      	asrs	r2, r2, #2
 8000d72:	17db      	asrs	r3, r3, #31
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	4a0c      	ldr	r2, [pc, #48]	; (8000da8 <green_seg_update+0x78>)
 8000d78:	6093      	str	r3, [r2, #8]
	buffer_led[3] = duration2%10;
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <green_seg_update+0x7c>)
 8000d7c:	6819      	ldr	r1, [r3, #0]
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <green_seg_update+0x74>)
 8000d80:	fb83 2301 	smull	r2, r3, r3, r1
 8000d84:	109a      	asrs	r2, r3, #2
 8000d86:	17cb      	asrs	r3, r1, #31
 8000d88:	1ad2      	subs	r2, r2, r3
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	1aca      	subs	r2, r1, r3
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <green_seg_update+0x78>)
 8000d96:	60da      	str	r2, [r3, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	200000f8 	.word	0x200000f8
 8000da4:	66666667 	.word	0x66666667
 8000da8:	20000100 	.word	0x20000100
 8000dac:	200000fc 	.word	0x200000fc

08000db0 <green_modify_update>:
void green_modify_update(){
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
	buffer_led[0] = duration_value/10;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <green_modify_update+0x4c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a11      	ldr	r2, [pc, #68]	; (8000e00 <green_modify_update+0x50>)
 8000dba:	fb82 1203 	smull	r1, r2, r2, r3
 8000dbe:	1092      	asrs	r2, r2, #2
 8000dc0:	17db      	asrs	r3, r3, #31
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <green_modify_update+0x54>)
 8000dc6:	6013      	str	r3, [r2, #0]
	buffer_led[1] = duration_value%10;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <green_modify_update+0x4c>)
 8000dca:	6819      	ldr	r1, [r3, #0]
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <green_modify_update+0x50>)
 8000dce:	fb83 2301 	smull	r2, r3, r3, r1
 8000dd2:	109a      	asrs	r2, r3, #2
 8000dd4:	17cb      	asrs	r3, r1, #31
 8000dd6:	1ad2      	subs	r2, r2, r3
 8000dd8:	4613      	mov	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	1aca      	subs	r2, r1, r3
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <green_modify_update+0x54>)
 8000de4:	605a      	str	r2, [r3, #4]
	buffer_led[2] = 0;
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <green_modify_update+0x54>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
	buffer_led[3] = 3;
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <green_modify_update+0x54>)
 8000dee:	2203      	movs	r2, #3
 8000df0:	60da      	str	r2, [r3, #12]
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	200000f4 	.word	0x200000f4
 8000e00:	66666667 	.word	0x66666667
 8000e04:	20000100 	.word	0x20000100

08000e08 <traffic_light>:
void traffic_light(int colour){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b06      	subs	r3, #6
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	f200 8087 	bhi.w	8000f28 <traffic_light+0x120>
 8000e1a:	a201      	add	r2, pc, #4	; (adr r2, 8000e20 <traffic_light+0x18>)
 8000e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e20:	08000e31 	.word	0x08000e31
 8000e24:	08000e6f 	.word	0x08000e6f
 8000e28:	08000ead 	.word	0x08000ead
 8000e2c:	08000eeb 	.word	0x08000eeb
	switch(colour){
	case Reset:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2101      	movs	r1, #1
 8000e34:	483e      	ldr	r0, [pc, #248]	; (8000f30 <traffic_light+0x128>)
 8000e36:	f001 fce4 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	483c      	ldr	r0, [pc, #240]	; (8000f30 <traffic_light+0x128>)
 8000e40:	f001 fcdf 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2104      	movs	r1, #4
 8000e48:	4839      	ldr	r0, [pc, #228]	; (8000f30 <traffic_light+0x128>)
 8000e4a:	f001 fcda 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2108      	movs	r1, #8
 8000e52:	4837      	ldr	r0, [pc, #220]	; (8000f30 <traffic_light+0x128>)
 8000e54:	f001 fcd5 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4834      	ldr	r0, [pc, #208]	; (8000f30 <traffic_light+0x128>)
 8000e5e:	f001 fcd0 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2120      	movs	r1, #32
 8000e66:	4832      	ldr	r0, [pc, #200]	; (8000f30 <traffic_light+0x128>)
 8000e68:	f001 fccb 	bl	8002802 <HAL_GPIO_WritePin>
		break;
 8000e6c:	e05c      	b.n	8000f28 <traffic_light+0x120>
	case Red:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2101      	movs	r1, #1
 8000e72:	482f      	ldr	r0, [pc, #188]	; (8000f30 <traffic_light+0x128>)
 8000e74:	f001 fcc5 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	482c      	ldr	r0, [pc, #176]	; (8000f30 <traffic_light+0x128>)
 8000e7e:	f001 fcc0 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2104      	movs	r1, #4
 8000e86:	482a      	ldr	r0, [pc, #168]	; (8000f30 <traffic_light+0x128>)
 8000e88:	f001 fcbb 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2108      	movs	r1, #8
 8000e90:	4827      	ldr	r0, [pc, #156]	; (8000f30 <traffic_light+0x128>)
 8000e92:	f001 fcb6 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2110      	movs	r1, #16
 8000e9a:	4825      	ldr	r0, [pc, #148]	; (8000f30 <traffic_light+0x128>)
 8000e9c:	f001 fcb1 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2120      	movs	r1, #32
 8000ea4:	4822      	ldr	r0, [pc, #136]	; (8000f30 <traffic_light+0x128>)
 8000ea6:	f001 fcac 	bl	8002802 <HAL_GPIO_WritePin>
		break;
 8000eaa:	e03d      	b.n	8000f28 <traffic_light+0x120>
	case Yellow:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2101      	movs	r1, #1
 8000eb0:	481f      	ldr	r0, [pc, #124]	; (8000f30 <traffic_light+0x128>)
 8000eb2:	f001 fca6 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2102      	movs	r1, #2
 8000eba:	481d      	ldr	r0, [pc, #116]	; (8000f30 <traffic_light+0x128>)
 8000ebc:	f001 fca1 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	481a      	ldr	r0, [pc, #104]	; (8000f30 <traffic_light+0x128>)
 8000ec6:	f001 fc9c 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	2108      	movs	r1, #8
 8000ece:	4818      	ldr	r0, [pc, #96]	; (8000f30 <traffic_light+0x128>)
 8000ed0:	f001 fc97 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	4815      	ldr	r0, [pc, #84]	; (8000f30 <traffic_light+0x128>)
 8000eda:	f001 fc92 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2120      	movs	r1, #32
 8000ee2:	4813      	ldr	r0, [pc, #76]	; (8000f30 <traffic_light+0x128>)
 8000ee4:	f001 fc8d 	bl	8002802 <HAL_GPIO_WritePin>
		break;
 8000ee8:	e01e      	b.n	8000f28 <traffic_light+0x120>
	case Green:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2101      	movs	r1, #1
 8000eee:	4810      	ldr	r0, [pc, #64]	; (8000f30 <traffic_light+0x128>)
 8000ef0:	f001 fc87 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	480d      	ldr	r0, [pc, #52]	; (8000f30 <traffic_light+0x128>)
 8000efa:	f001 fc82 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2104      	movs	r1, #4
 8000f02:	480b      	ldr	r0, [pc, #44]	; (8000f30 <traffic_light+0x128>)
 8000f04:	f001 fc7d 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2108      	movs	r1, #8
 8000f0c:	4808      	ldr	r0, [pc, #32]	; (8000f30 <traffic_light+0x128>)
 8000f0e:	f001 fc78 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2110      	movs	r1, #16
 8000f16:	4806      	ldr	r0, [pc, #24]	; (8000f30 <traffic_light+0x128>)
 8000f18:	f001 fc73 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2120      	movs	r1, #32
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <traffic_light+0x128>)
 8000f22:	f001 fc6e 	bl	8002802 <HAL_GPIO_WritePin>
		break;
 8000f26:	bf00      	nop
	}
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40010c00 	.word	0x40010c00

08000f34 <fsm_modify_run>:
 */
#include "fsm_modify.h"
char str[50];

UART_HandleTypeDef huart2;
void fsm_modify_run(){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	switch(status){
 8000f38:	4b49      	ldr	r3, [pc, #292]	; (8001060 <fsm_modify_run+0x12c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b14      	cmp	r3, #20
 8000f3e:	d002      	beq.n	8000f46 <fsm_modify_run+0x12>
 8000f40:	2b15      	cmp	r3, #21
 8000f42:	d010      	beq.n	8000f66 <fsm_modify_run+0x32>
		}
		red_modify_update();

		break;
	}
}
 8000f44:	e08a      	b.n	800105c <fsm_modify_run+0x128>
		status = Auto_init;
 8000f46:	4b46      	ldr	r3, [pc, #280]	; (8001060 <fsm_modify_run+0x12c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
		if(Is_button2_pressed() == 1){
 8000f4c:	f7ff fd1e 	bl	800098c <Is_button2_pressed>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	f040 8081 	bne.w	800105a <fsm_modify_run+0x126>
			status = Red_Modify;
 8000f58:	4b41      	ldr	r3, [pc, #260]	; (8001060 <fsm_modify_run+0x12c>)
 8000f5a:	2215      	movs	r2, #21
 8000f5c:	601a      	str	r2, [r3, #0]
			Set_timer4(2);
 8000f5e:	2002      	movs	r0, #2
 8000f60:	f000 ff4e 	bl	8001e00 <Set_timer4>
		break;
 8000f64:	e079      	b.n	800105a <fsm_modify_run+0x126>
		if(timer4_flag == 1){
 8000f66:	4b3f      	ldr	r3, [pc, #252]	; (8001064 <fsm_modify_run+0x130>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d117      	bne.n	8000f9e <fsm_modify_run+0x6a>
			Set_timer4(2);
 8000f6e:	2002      	movs	r0, #2
 8000f70:	f000 ff46 	bl	8001e00 <Set_timer4>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7a:	483b      	ldr	r0, [pc, #236]	; (8001068 <fsm_modify_run+0x134>)
 8000f7c:	f001 fc41 	bl	8002802 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2108      	movs	r1, #8
 8000f84:	4839      	ldr	r0, [pc, #228]	; (800106c <fsm_modify_run+0x138>)
 8000f86:	f001 fc3c 	bl	8002802 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2120      	movs	r1, #32
 8000f8e:	4837      	ldr	r0, [pc, #220]	; (800106c <fsm_modify_run+0x138>)
 8000f90:	f001 fc37 	bl	8002802 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2110      	movs	r1, #16
 8000f98:	4834      	ldr	r0, [pc, #208]	; (800106c <fsm_modify_run+0x138>)
 8000f9a:	f001 fc32 	bl	8002802 <HAL_GPIO_WritePin>
		if(Is_button2_pressed() == 1){
 8000f9e:	f7ff fcf5 	bl	800098c <Is_button2_pressed>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d108      	bne.n	8000fba <fsm_modify_run+0x86>
			status = Yellow_Modify;
 8000fa8:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <fsm_modify_run+0x12c>)
 8000faa:	2216      	movs	r2, #22
 8000fac:	601a      	str	r2, [r3, #0]
			traffic_light(Reset);
 8000fae:	2006      	movs	r0, #6
 8000fb0:	f7ff ff2a 	bl	8000e08 <traffic_light>
			Set_timer4(2);
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f000 ff23 	bl	8001e00 <Set_timer4>
		if(Is_button1_pressed() == 1){
 8000fba:	f7ff fcd5 	bl	8000968 <Is_button1_pressed>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d112      	bne.n	8000fea <fsm_modify_run+0xb6>
			Red_duration --;
 8000fc4:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <fsm_modify_run+0x13c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	4a29      	ldr	r2, [pc, #164]	; (8001070 <fsm_modify_run+0x13c>)
 8000fcc:	6013      	str	r3, [r2, #0]
			if(Red_duration > 99) Red_duration = 0;
 8000fce:	4b28      	ldr	r3, [pc, #160]	; (8001070 <fsm_modify_run+0x13c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b63      	cmp	r3, #99	; 0x63
 8000fd4:	dd02      	ble.n	8000fdc <fsm_modify_run+0xa8>
 8000fd6:	4b26      	ldr	r3, [pc, #152]	; (8001070 <fsm_modify_run+0x13c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
			if(Red_duration < 0) Red_duration = 0;
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <fsm_modify_run+0x13c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	da02      	bge.n	8000fea <fsm_modify_run+0xb6>
 8000fe4:	4b22      	ldr	r3, [pc, #136]	; (8001070 <fsm_modify_run+0x13c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
		if(Is_button3_pressed() == 1){
 8000fea:	f7ff fce1 	bl	80009b0 <Is_button3_pressed>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d112      	bne.n	800101a <fsm_modify_run+0xe6>
			Red_duration ++;
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <fsm_modify_run+0x13c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a1d      	ldr	r2, [pc, #116]	; (8001070 <fsm_modify_run+0x13c>)
 8000ffc:	6013      	str	r3, [r2, #0]
			if(Red_duration > 99) Red_duration = 0;
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <fsm_modify_run+0x13c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b63      	cmp	r3, #99	; 0x63
 8001004:	dd02      	ble.n	800100c <fsm_modify_run+0xd8>
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <fsm_modify_run+0x13c>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
			if(Red_duration < 0) Red_duration = 0;
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <fsm_modify_run+0x13c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	da02      	bge.n	800101a <fsm_modify_run+0xe6>
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <fsm_modify_run+0x13c>)
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
		duration_value = Red_duration + Yellow_duration;
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <fsm_modify_run+0x13c>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <fsm_modify_run+0x140>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4413      	add	r3, r2
 8001024:	4a14      	ldr	r2, [pc, #80]	; (8001078 <fsm_modify_run+0x144>)
 8001026:	6013      	str	r3, [r2, #0]
		if(timer3_flag == 1){
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <fsm_modify_run+0x148>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d111      	bne.n	8001054 <fsm_modify_run+0x120>
			Set_timer3(5);
 8001030:	2005      	movs	r0, #5
 8001032:	f000 fecd 	bl	8001dd0 <Set_timer3>
		HAL_UART_Transmit (& huart2 , ( void *) str , sprintf (str , "!7SEG=%d#\n", duration_value ), 1000) ;
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <fsm_modify_run+0x144>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	4910      	ldr	r1, [pc, #64]	; (8001080 <fsm_modify_run+0x14c>)
 800103e:	4811      	ldr	r0, [pc, #68]	; (8001084 <fsm_modify_run+0x150>)
 8001040:	f003 f8b6 	bl	80041b0 <siprintf>
 8001044:	4603      	mov	r3, r0
 8001046:	b29a      	uxth	r2, r3
 8001048:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104c:	490d      	ldr	r1, [pc, #52]	; (8001084 <fsm_modify_run+0x150>)
 800104e:	480e      	ldr	r0, [pc, #56]	; (8001088 <fsm_modify_run+0x154>)
 8001050:	f002 ff11 	bl	8003e76 <HAL_UART_Transmit>
		red_modify_update();
 8001054:	f7ff fdd6 	bl	8000c04 <red_modify_update>
		break;
 8001058:	e000      	b.n	800105c <fsm_modify_run+0x128>
		break;
 800105a:	bf00      	nop
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000110 	.word	0x20000110
 8001064:	20000130 	.word	0x20000130
 8001068:	40010800 	.word	0x40010800
 800106c:	40010c00 	.word	0x40010c00
 8001070:	20000044 	.word	0x20000044
 8001074:	20000048 	.word	0x20000048
 8001078:	200000f4 	.word	0x200000f4
 800107c:	20000128 	.word	0x20000128
 8001080:	08004a3c 	.word	0x08004a3c
 8001084:	200001d0 	.word	0x200001d0
 8001088:	2000018c 	.word	0x2000018c

0800108c <fsm_modify_green_run>:
 */
#include "fsm_modify_green.h"
char str[50];

UART_HandleTypeDef huart2;
void fsm_modify_green_run(){
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	switch(status){
 8001090:	4b39      	ldr	r3, [pc, #228]	; (8001178 <fsm_modify_green_run+0xec>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b17      	cmp	r3, #23
 8001096:	d16c      	bne.n	8001172 <fsm_modify_green_run+0xe6>
	case Green_Modify:
		if(timer4_flag == 1){
 8001098:	4b38      	ldr	r3, [pc, #224]	; (800117c <fsm_modify_green_run+0xf0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d117      	bne.n	80010d0 <fsm_modify_green_run+0x44>
			Set_timer4(2);
 80010a0:	2002      	movs	r0, #2
 80010a2:	f000 fead 	bl	8001e00 <Set_timer4>
			//TL1
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ac:	4834      	ldr	r0, [pc, #208]	; (8001180 <fsm_modify_green_run+0xf4>)
 80010ae:	f001 fba8 	bl	8002802 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2108      	movs	r1, #8
 80010b6:	4833      	ldr	r0, [pc, #204]	; (8001184 <fsm_modify_green_run+0xf8>)
 80010b8:	f001 fba3 	bl	8002802 <HAL_GPIO_WritePin>
			//TL2
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2120      	movs	r1, #32
 80010c0:	4830      	ldr	r0, [pc, #192]	; (8001184 <fsm_modify_green_run+0xf8>)
 80010c2:	f001 fb9e 	bl	8002802 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2110      	movs	r1, #16
 80010ca:	482e      	ldr	r0, [pc, #184]	; (8001184 <fsm_modify_green_run+0xf8>)
 80010cc:	f001 fb99 	bl	8002802 <HAL_GPIO_WritePin>
		}
		if(Is_button2_pressed() == 1){
 80010d0:	f7ff fc5c 	bl	800098c <Is_button2_pressed>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d102      	bne.n	80010e0 <fsm_modify_green_run+0x54>
			status = Normal;
 80010da:	4b27      	ldr	r3, [pc, #156]	; (8001178 <fsm_modify_green_run+0xec>)
 80010dc:	2214      	movs	r2, #20
 80010de:	601a      	str	r2, [r3, #0]
		}
		if(Is_button1_pressed() == 1){
 80010e0:	f7ff fc42 	bl	8000968 <Is_button1_pressed>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d112      	bne.n	8001110 <fsm_modify_green_run+0x84>
			Green_duration -= 1;
 80010ea:	4b27      	ldr	r3, [pc, #156]	; (8001188 <fsm_modify_green_run+0xfc>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	4a25      	ldr	r2, [pc, #148]	; (8001188 <fsm_modify_green_run+0xfc>)
 80010f2:	6013      	str	r3, [r2, #0]
			if(duration_value > 99) duration_value = 0;
 80010f4:	4b25      	ldr	r3, [pc, #148]	; (800118c <fsm_modify_green_run+0x100>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b63      	cmp	r3, #99	; 0x63
 80010fa:	dd02      	ble.n	8001102 <fsm_modify_green_run+0x76>
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <fsm_modify_green_run+0x100>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
			if(duration_value < 0 ) duration_value = 99;
 8001102:	4b22      	ldr	r3, [pc, #136]	; (800118c <fsm_modify_green_run+0x100>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	da02      	bge.n	8001110 <fsm_modify_green_run+0x84>
 800110a:	4b20      	ldr	r3, [pc, #128]	; (800118c <fsm_modify_green_run+0x100>)
 800110c:	2263      	movs	r2, #99	; 0x63
 800110e:	601a      	str	r2, [r3, #0]
		}
		if(Is_button3_pressed() == 1){
 8001110:	f7ff fc4e 	bl	80009b0 <Is_button3_pressed>
 8001114:	4603      	mov	r3, r0
 8001116:	2b01      	cmp	r3, #1
 8001118:	d112      	bne.n	8001140 <fsm_modify_green_run+0xb4>
			Green_duration += 1;
 800111a:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <fsm_modify_green_run+0xfc>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	3301      	adds	r3, #1
 8001120:	4a19      	ldr	r2, [pc, #100]	; (8001188 <fsm_modify_green_run+0xfc>)
 8001122:	6013      	str	r3, [r2, #0]
			if(duration_value > 99) duration_value = 0;
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <fsm_modify_green_run+0x100>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b63      	cmp	r3, #99	; 0x63
 800112a:	dd02      	ble.n	8001132 <fsm_modify_green_run+0xa6>
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <fsm_modify_green_run+0x100>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
			if(duration_value < 0 ) duration_value = 99;
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <fsm_modify_green_run+0x100>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	da02      	bge.n	8001140 <fsm_modify_green_run+0xb4>
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <fsm_modify_green_run+0x100>)
 800113c:	2263      	movs	r2, #99	; 0x63
 800113e:	601a      	str	r2, [r3, #0]
		}
		if(timer3_flag == 1){
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <fsm_modify_green_run+0x104>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d111      	bne.n	800116c <fsm_modify_green_run+0xe0>
			Set_timer3(5);
 8001148:	2005      	movs	r0, #5
 800114a:	f000 fe41 	bl	8001dd0 <Set_timer3>
		HAL_UART_Transmit (& huart2 , ( void *) str , sprintf (str , "!7SEG=%d#\n", Green_duration ), 1000) ;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <fsm_modify_green_run+0xfc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	490f      	ldr	r1, [pc, #60]	; (8001194 <fsm_modify_green_run+0x108>)
 8001156:	4810      	ldr	r0, [pc, #64]	; (8001198 <fsm_modify_green_run+0x10c>)
 8001158:	f003 f82a 	bl	80041b0 <siprintf>
 800115c:	4603      	mov	r3, r0
 800115e:	b29a      	uxth	r2, r3
 8001160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001164:	490c      	ldr	r1, [pc, #48]	; (8001198 <fsm_modify_green_run+0x10c>)
 8001166:	480d      	ldr	r0, [pc, #52]	; (800119c <fsm_modify_green_run+0x110>)
 8001168:	f002 fe85 	bl	8003e76 <HAL_UART_Transmit>
		}
		green_modify_update();
 800116c:	f7ff fe20 	bl	8000db0 <green_modify_update>

		break;
 8001170:	bf00      	nop
	}
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000110 	.word	0x20000110
 800117c:	20000130 	.word	0x20000130
 8001180:	40010800 	.word	0x40010800
 8001184:	40010c00 	.word	0x40010c00
 8001188:	2000004c 	.word	0x2000004c
 800118c:	200000f4 	.word	0x200000f4
 8001190:	20000128 	.word	0x20000128
 8001194:	08004a48 	.word	0x08004a48
 8001198:	200001d0 	.word	0x200001d0
 800119c:	2000018c 	.word	0x2000018c

080011a0 <fsm_modify_yellow_run>:
 */
#include "fsm_modify_yellow.h"
char str[50];

UART_HandleTypeDef huart2;
void fsm_modify_yellow_run(){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	switch(status){
 80011a4:	4b3e      	ldr	r3, [pc, #248]	; (80012a0 <fsm_modify_yellow_run+0x100>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b16      	cmp	r3, #22
 80011aa:	d176      	bne.n	800129a <fsm_modify_yellow_run+0xfa>
	case Yellow_Modify:
		if(timer4_flag == 1){
 80011ac:	4b3d      	ldr	r3, [pc, #244]	; (80012a4 <fsm_modify_yellow_run+0x104>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d117      	bne.n	80011e4 <fsm_modify_yellow_run+0x44>
			Set_timer4(2);
 80011b4:	2002      	movs	r0, #2
 80011b6:	f000 fe23 	bl	8001e00 <Set_timer4>
			//TL1
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c0:	4839      	ldr	r0, [pc, #228]	; (80012a8 <fsm_modify_yellow_run+0x108>)
 80011c2:	f001 fb1e 	bl	8002802 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	2108      	movs	r1, #8
 80011ca:	4838      	ldr	r0, [pc, #224]	; (80012ac <fsm_modify_yellow_run+0x10c>)
 80011cc:	f001 fb19 	bl	8002802 <HAL_GPIO_WritePin>
			//TL2
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	2120      	movs	r1, #32
 80011d4:	4835      	ldr	r0, [pc, #212]	; (80012ac <fsm_modify_yellow_run+0x10c>)
 80011d6:	f001 fb14 	bl	8002802 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	2110      	movs	r1, #16
 80011de:	4833      	ldr	r0, [pc, #204]	; (80012ac <fsm_modify_yellow_run+0x10c>)
 80011e0:	f001 fb0f 	bl	8002802 <HAL_GPIO_WritePin>
			}

		if(Is_button2_pressed() == 1){
 80011e4:	f7ff fbd2 	bl	800098c <Is_button2_pressed>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d10c      	bne.n	8001208 <fsm_modify_yellow_run+0x68>
			status = Green_Modify;
 80011ee:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <fsm_modify_yellow_run+0x100>)
 80011f0:	2217      	movs	r2, #23
 80011f2:	601a      	str	r2, [r3, #0]
			duration_value = Green_duration;
 80011f4:	4b2e      	ldr	r3, [pc, #184]	; (80012b0 <fsm_modify_yellow_run+0x110>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a2e      	ldr	r2, [pc, #184]	; (80012b4 <fsm_modify_yellow_run+0x114>)
 80011fa:	6013      	str	r3, [r2, #0]
			traffic_light(Reset);
 80011fc:	2006      	movs	r0, #6
 80011fe:	f7ff fe03 	bl	8000e08 <traffic_light>
			Set_timer4(2);
 8001202:	2002      	movs	r0, #2
 8001204:	f000 fdfc 	bl	8001e00 <Set_timer4>
			}

		if(Is_button1_pressed() == 1){
 8001208:	f7ff fbae 	bl	8000968 <Is_button1_pressed>
 800120c:	4603      	mov	r3, r0
 800120e:	2b01      	cmp	r3, #1
 8001210:	d112      	bne.n	8001238 <fsm_modify_yellow_run+0x98>
			Yellow_duration -= 1;
 8001212:	4b29      	ldr	r3, [pc, #164]	; (80012b8 <fsm_modify_yellow_run+0x118>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	3b01      	subs	r3, #1
 8001218:	4a27      	ldr	r2, [pc, #156]	; (80012b8 <fsm_modify_yellow_run+0x118>)
 800121a:	6013      	str	r3, [r2, #0]
			if(Yellow_duration > 99) Yellow_duration = 0;
 800121c:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <fsm_modify_yellow_run+0x118>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b63      	cmp	r3, #99	; 0x63
 8001222:	dd02      	ble.n	800122a <fsm_modify_yellow_run+0x8a>
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <fsm_modify_yellow_run+0x118>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
			if(Yellow_duration < 0) Yellow_duration = 99;
 800122a:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <fsm_modify_yellow_run+0x118>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	da02      	bge.n	8001238 <fsm_modify_yellow_run+0x98>
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <fsm_modify_yellow_run+0x118>)
 8001234:	2263      	movs	r2, #99	; 0x63
 8001236:	601a      	str	r2, [r3, #0]
			}

		if(Is_button3_pressed() == 1){
 8001238:	f7ff fbba 	bl	80009b0 <Is_button3_pressed>
 800123c:	4603      	mov	r3, r0
 800123e:	2b01      	cmp	r3, #1
 8001240:	d112      	bne.n	8001268 <fsm_modify_yellow_run+0xc8>
			Yellow_duration += 1;
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <fsm_modify_yellow_run+0x118>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <fsm_modify_yellow_run+0x118>)
 800124a:	6013      	str	r3, [r2, #0]
			if(Yellow_duration > 99) Yellow_duration = 0;
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <fsm_modify_yellow_run+0x118>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b63      	cmp	r3, #99	; 0x63
 8001252:	dd02      	ble.n	800125a <fsm_modify_yellow_run+0xba>
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <fsm_modify_yellow_run+0x118>)
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
			if(Yellow_duration < 0)  Yellow_duration = 99;
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <fsm_modify_yellow_run+0x118>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	da02      	bge.n	8001268 <fsm_modify_yellow_run+0xc8>
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <fsm_modify_yellow_run+0x118>)
 8001264:	2263      	movs	r2, #99	; 0x63
 8001266:	601a      	str	r2, [r3, #0]
			}
		if(timer3_flag == 1){
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <fsm_modify_yellow_run+0x11c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d111      	bne.n	8001294 <fsm_modify_yellow_run+0xf4>
			Set_timer3(5);
 8001270:	2005      	movs	r0, #5
 8001272:	f000 fdad 	bl	8001dd0 <Set_timer3>
		HAL_UART_Transmit (& huart2 , ( void *) str , sprintf (str , "!7SEG=%d#\n", Yellow_duration ), 1000) ;
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <fsm_modify_yellow_run+0x118>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	4910      	ldr	r1, [pc, #64]	; (80012c0 <fsm_modify_yellow_run+0x120>)
 800127e:	4811      	ldr	r0, [pc, #68]	; (80012c4 <fsm_modify_yellow_run+0x124>)
 8001280:	f002 ff96 	bl	80041b0 <siprintf>
 8001284:	4603      	mov	r3, r0
 8001286:	b29a      	uxth	r2, r3
 8001288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128c:	490d      	ldr	r1, [pc, #52]	; (80012c4 <fsm_modify_yellow_run+0x124>)
 800128e:	480e      	ldr	r0, [pc, #56]	; (80012c8 <fsm_modify_yellow_run+0x128>)
 8001290:	f002 fdf1 	bl	8003e76 <HAL_UART_Transmit>
		}
			yellow_modify_update();
 8001294:	f7ff fd20 	bl	8000cd8 <yellow_modify_update>

			break;
 8001298:	bf00      	nop
	}
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000110 	.word	0x20000110
 80012a4:	20000130 	.word	0x20000130
 80012a8:	40010800 	.word	0x40010800
 80012ac:	40010c00 	.word	0x40010c00
 80012b0:	2000004c 	.word	0x2000004c
 80012b4:	200000f4 	.word	0x200000f4
 80012b8:	20000048 	.word	0x20000048
 80012bc:	20000128 	.word	0x20000128
 80012c0:	08004a54 	.word	0x08004a54
 80012c4:	200001d0 	.word	0x200001d0
 80012c8:	2000018c 	.word	0x2000018c

080012cc <auto_tracffic_run>:
int TCNT1 = 0;
char str[50];

UART_HandleTypeDef huart2;

void auto_tracffic_run(){
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af02      	add	r7, sp, #8
	switch(status){
 80012d2:	4bb2      	ldr	r3, [pc, #712]	; (800159c <auto_tracffic_run+0x2d0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	f200 8293 	bhi.w	8001802 <auto_tracffic_run+0x536>
 80012dc:	a201      	add	r2, pc, #4	; (adr r2, 80012e4 <auto_tracffic_run+0x18>)
 80012de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e2:	bf00      	nop
 80012e4:	080012f9 	.word	0x080012f9
 80012e8:	08001355 	.word	0x08001355
 80012ec:	080014a3 	.word	0x080014a3
 80012f0:	080016ff 	.word	0x080016ff
 80012f4:	080015ed 	.word	0x080015ed
	case Auto_init:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012fe:	48a8      	ldr	r0, [pc, #672]	; (80015a0 <auto_tracffic_run+0x2d4>)
 8001300:	f001 fa7f 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	2108      	movs	r1, #8
 8001308:	48a6      	ldr	r0, [pc, #664]	; (80015a4 <auto_tracffic_run+0x2d8>)
 800130a:	f001 fa7a 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	2120      	movs	r1, #32
 8001312:	48a4      	ldr	r0, [pc, #656]	; (80015a4 <auto_tracffic_run+0x2d8>)
 8001314:	f001 fa75 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	2110      	movs	r1, #16
 800131c:	48a1      	ldr	r0, [pc, #644]	; (80015a4 <auto_tracffic_run+0x2d8>)
 800131e:	f001 fa70 	bl	8002802 <HAL_GPIO_WritePin>

		status = Auto_red;
 8001322:	4b9e      	ldr	r3, [pc, #632]	; (800159c <auto_tracffic_run+0x2d0>)
 8001324:	2201      	movs	r2, #1
 8001326:	601a      	str	r2, [r3, #0]

		Set_timer1(Red_duration);
 8001328:	4b9f      	ldr	r3, [pc, #636]	; (80015a8 <auto_tracffic_run+0x2dc>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f000 fd21 	bl	8001d74 <Set_timer1>
		TCNT1 = (timer1_counter/100)*100;
 8001332:	4b9e      	ldr	r3, [pc, #632]	; (80015ac <auto_tracffic_run+0x2e0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a9e      	ldr	r2, [pc, #632]	; (80015b0 <auto_tracffic_run+0x2e4>)
 8001338:	fb82 1203 	smull	r1, r2, r2, r3
 800133c:	1152      	asrs	r2, r2, #5
 800133e:	17db      	asrs	r3, r3, #31
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2264      	movs	r2, #100	; 0x64
 8001344:	fb02 f303 	mul.w	r3, r2, r3
 8001348:	4a9a      	ldr	r2, [pc, #616]	; (80015b4 <auto_tracffic_run+0x2e8>)
 800134a:	6013      	str	r3, [r2, #0]
		Set_timer3(5);
 800134c:	2005      	movs	r0, #5
 800134e:	f000 fd3f 	bl	8001dd0 <Set_timer3>

		break;
 8001352:	e256      	b.n	8001802 <auto_tracffic_run+0x536>
	case Auto_red:
		//TL1
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8001354:	2201      	movs	r2, #1
 8001356:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800135a:	4891      	ldr	r0, [pc, #580]	; (80015a0 <auto_tracffic_run+0x2d4>)
 800135c:	f001 fa51 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	2108      	movs	r1, #8
 8001364:	488f      	ldr	r0, [pc, #572]	; (80015a4 <auto_tracffic_run+0x2d8>)
 8001366:	f001 fa4c 	bl	8002802 <HAL_GPIO_WritePin>
		//TL2
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2120      	movs	r1, #32
 800136e:	488d      	ldr	r0, [pc, #564]	; (80015a4 <auto_tracffic_run+0x2d8>)
 8001370:	f001 fa47 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001374:	2201      	movs	r2, #1
 8001376:	2110      	movs	r1, #16
 8001378:	488a      	ldr	r0, [pc, #552]	; (80015a4 <auto_tracffic_run+0x2d8>)
 800137a:	f001 fa42 	bl	8002802 <HAL_GPIO_WritePin>

		if(timer1_flag == 1){
 800137e:	4b8e      	ldr	r3, [pc, #568]	; (80015b8 <auto_tracffic_run+0x2ec>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d10a      	bne.n	800139c <auto_tracffic_run+0xd0>
			status = Auto_change;
 8001386:	4b85      	ldr	r3, [pc, #532]	; (800159c <auto_tracffic_run+0x2d0>)
 8001388:	2202      	movs	r2, #2
 800138a:	601a      	str	r2, [r3, #0]
			Set_timer1(Yellow_duration);
 800138c:	4b8b      	ldr	r3, [pc, #556]	; (80015bc <auto_tracffic_run+0x2f0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f000 fcef 	bl	8001d74 <Set_timer1>
			Set_timer3(5);
 8001396:	2005      	movs	r0, #5
 8001398:	f000 fd1a 	bl	8001dd0 <Set_timer3>
		}

		if(Is_button1_pressed() == 1){
 800139c:	f7ff fae4 	bl	8000968 <Is_button1_pressed>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d105      	bne.n	80013b2 <auto_tracffic_run+0xe6>
			status = Man_red;
 80013a6:	4b7d      	ldr	r3, [pc, #500]	; (800159c <auto_tracffic_run+0x2d0>)
 80013a8:	220a      	movs	r2, #10
 80013aa:	601a      	str	r2, [r3, #0]
			Set_timer2(20);
 80013ac:	2014      	movs	r0, #20
 80013ae:	f000 fcf7 	bl	8001da0 <Set_timer2>
		}

		if(Is_button2_pressed() == 1){
 80013b2:	f7ff faeb 	bl	800098c <Is_button2_pressed>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d112      	bne.n	80013e2 <auto_tracffic_run+0x116>
			status = Red_Modify;
 80013bc:	4b77      	ldr	r3, [pc, #476]	; (800159c <auto_tracffic_run+0x2d0>)
 80013be:	2215      	movs	r2, #21
 80013c0:	601a      	str	r2, [r3, #0]
			traffic_light(Reset);
 80013c2:	2006      	movs	r0, #6
 80013c4:	f7ff fd20 	bl	8000e08 <traffic_light>
			duration_value = Red_duration + Yellow_duration;
 80013c8:	4b77      	ldr	r3, [pc, #476]	; (80015a8 <auto_tracffic_run+0x2dc>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b7b      	ldr	r3, [pc, #492]	; (80015bc <auto_tracffic_run+0x2f0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a7b      	ldr	r2, [pc, #492]	; (80015c0 <auto_tracffic_run+0x2f4>)
 80013d4:	6013      	str	r3, [r2, #0]
			Set_timer4(2);
 80013d6:	2002      	movs	r0, #2
 80013d8:	f000 fd12 	bl	8001e00 <Set_timer4>
			Set_timer3(5);
 80013dc:	2005      	movs	r0, #5
 80013de:	f000 fcf7 	bl	8001dd0 <Set_timer3>
		}

		if(Is_buttonPED_pressed() == 1){
 80013e2:	f7ff faf7 	bl	80009d4 <Is_buttonPED_pressed>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d105      	bne.n	80013f8 <auto_tracffic_run+0x12c>
			ped_flag = 1;
 80013ec:	4b75      	ldr	r3, [pc, #468]	; (80015c4 <auto_tracffic_run+0x2f8>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
			Set_timer2(200);
 80013f2:	20c8      	movs	r0, #200	; 0xc8
 80013f4:	f000 fcd4 	bl	8001da0 <Set_timer2>

		}
		if(ped_flag == 1){
 80013f8:	4b72      	ldr	r3, [pc, #456]	; (80015c4 <auto_tracffic_run+0x2f8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d103      	bne.n	8001408 <auto_tracffic_run+0x13c>
			Pedestrian_run();
 8001400:	f7ff f99e 	bl	8000740 <Pedestrian_run>
			buzzer_run();
 8001404:	f7ff fa56 	bl	80008b4 <buzzer_run>
		}


		duty_cycle = mapFloat(timer1_counter, 0, TCNT1, 0, 999);
 8001408:	4b68      	ldr	r3, [pc, #416]	; (80015ac <auto_tracffic_run+0x2e0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f7fe ff57 	bl	80002c0 <__aeabi_i2f>
 8001412:	4604      	mov	r4, r0
 8001414:	4b67      	ldr	r3, [pc, #412]	; (80015b4 <auto_tracffic_run+0x2e8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7fe ff51 	bl	80002c0 <__aeabi_i2f>
 800141e:	4602      	mov	r2, r0
 8001420:	4b69      	ldr	r3, [pc, #420]	; (80015c8 <auto_tracffic_run+0x2fc>)
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	f04f 0100 	mov.w	r1, #0
 800142c:	4620      	mov	r0, r4
 800142e:	f7ff fa59 	bl	80008e4 <mapFloat>
 8001432:	4603      	mov	r3, r0
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f95d 	bl	80006f4 <__aeabi_f2iz>
 800143a:	4603      	mov	r3, r0
 800143c:	4a63      	ldr	r2, [pc, #396]	; (80015cc <auto_tracffic_run+0x300>)
 800143e:	6013      	str	r3, [r2, #0]

		duration = timer1_counter/100 + Yellow_duration;
 8001440:	4b5a      	ldr	r3, [pc, #360]	; (80015ac <auto_tracffic_run+0x2e0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a5a      	ldr	r2, [pc, #360]	; (80015b0 <auto_tracffic_run+0x2e4>)
 8001446:	fb82 1203 	smull	r1, r2, r2, r3
 800144a:	1152      	asrs	r2, r2, #5
 800144c:	17db      	asrs	r3, r3, #31
 800144e:	1ad2      	subs	r2, r2, r3
 8001450:	4b5a      	ldr	r3, [pc, #360]	; (80015bc <auto_tracffic_run+0x2f0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4413      	add	r3, r2
 8001456:	4a5e      	ldr	r2, [pc, #376]	; (80015d0 <auto_tracffic_run+0x304>)
 8001458:	6013      	str	r3, [r2, #0]
		duration2 = timer1_counter/100;
 800145a:	4b54      	ldr	r3, [pc, #336]	; (80015ac <auto_tracffic_run+0x2e0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a54      	ldr	r2, [pc, #336]	; (80015b0 <auto_tracffic_run+0x2e4>)
 8001460:	fb82 1203 	smull	r1, r2, r2, r3
 8001464:	1152      	asrs	r2, r2, #5
 8001466:	17db      	asrs	r3, r3, #31
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	4a5a      	ldr	r2, [pc, #360]	; (80015d4 <auto_tracffic_run+0x308>)
 800146c:	6013      	str	r3, [r2, #0]

		red_seg_update();
 800146e:	f7ff fb89 	bl	8000b84 <red_seg_update>

		if(timer3_flag == 1){
 8001472:	4b59      	ldr	r3, [pc, #356]	; (80015d8 <auto_tracffic_run+0x30c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b01      	cmp	r3, #1
 8001478:	f040 81bc 	bne.w	80017f4 <auto_tracffic_run+0x528>
			Set_timer3(5);
 800147c:	2005      	movs	r0, #5
 800147e:	f000 fca7 	bl	8001dd0 <Set_timer3>
		HAL_UART_Transmit (&huart2 , ( void *) str , sprintf (str , "!7SEG=%d#\n", duration ), 1000) ;
 8001482:	4b53      	ldr	r3, [pc, #332]	; (80015d0 <auto_tracffic_run+0x304>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	4954      	ldr	r1, [pc, #336]	; (80015dc <auto_tracffic_run+0x310>)
 800148a:	4855      	ldr	r0, [pc, #340]	; (80015e0 <auto_tracffic_run+0x314>)
 800148c:	f002 fe90 	bl	80041b0 <siprintf>
 8001490:	4603      	mov	r3, r0
 8001492:	b29a      	uxth	r2, r3
 8001494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001498:	4951      	ldr	r1, [pc, #324]	; (80015e0 <auto_tracffic_run+0x314>)
 800149a:	4852      	ldr	r0, [pc, #328]	; (80015e4 <auto_tracffic_run+0x318>)
 800149c:	f002 fceb 	bl	8003e76 <HAL_UART_Transmit>
		}
		break;
 80014a0:	e1a8      	b.n	80017f4 <auto_tracffic_run+0x528>
	case Auto_change:
		//TL1
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014a8:	483d      	ldr	r0, [pc, #244]	; (80015a0 <auto_tracffic_run+0x2d4>)
 80014aa:	f001 f9aa 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2108      	movs	r1, #8
 80014b2:	483c      	ldr	r0, [pc, #240]	; (80015a4 <auto_tracffic_run+0x2d8>)
 80014b4:	f001 f9a5 	bl	8002802 <HAL_GPIO_WritePin>
		//TL2
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80014b8:	2201      	movs	r2, #1
 80014ba:	2120      	movs	r1, #32
 80014bc:	4839      	ldr	r0, [pc, #228]	; (80015a4 <auto_tracffic_run+0x2d8>)
 80014be:	f001 f9a0 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80014c2:	2201      	movs	r2, #1
 80014c4:	2110      	movs	r1, #16
 80014c6:	4837      	ldr	r0, [pc, #220]	; (80015a4 <auto_tracffic_run+0x2d8>)
 80014c8:	f001 f99b 	bl	8002802 <HAL_GPIO_WritePin>

		if(timer1_flag == 1){
 80014cc:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <auto_tracffic_run+0x2ec>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d10a      	bne.n	80014ea <auto_tracffic_run+0x21e>
			status = Auto_green;
 80014d4:	4b31      	ldr	r3, [pc, #196]	; (800159c <auto_tracffic_run+0x2d0>)
 80014d6:	2204      	movs	r2, #4
 80014d8:	601a      	str	r2, [r3, #0]
			Set_timer1(Green_duration);
 80014da:	4b43      	ldr	r3, [pc, #268]	; (80015e8 <auto_tracffic_run+0x31c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 fc48 	bl	8001d74 <Set_timer1>
			Set_timer3(5);
 80014e4:	2005      	movs	r0, #5
 80014e6:	f000 fc73 	bl	8001dd0 <Set_timer3>
		}

		if(Is_button1_pressed() == 1){
 80014ea:	f7ff fa3d 	bl	8000968 <Is_button1_pressed>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d105      	bne.n	8001500 <auto_tracffic_run+0x234>
			status = Man_yellow;
 80014f4:	4b29      	ldr	r3, [pc, #164]	; (800159c <auto_tracffic_run+0x2d0>)
 80014f6:	220b      	movs	r2, #11
 80014f8:	601a      	str	r2, [r3, #0]
			Set_timer2(20);
 80014fa:	2014      	movs	r0, #20
 80014fc:	f000 fc50 	bl	8001da0 <Set_timer2>
		}

		if(Is_button2_pressed() == 1){
 8001500:	f7ff fa44 	bl	800098c <Is_button2_pressed>
 8001504:	4603      	mov	r3, r0
 8001506:	2b01      	cmp	r3, #1
 8001508:	d112      	bne.n	8001530 <auto_tracffic_run+0x264>
			status = Red_Modify;
 800150a:	4b24      	ldr	r3, [pc, #144]	; (800159c <auto_tracffic_run+0x2d0>)
 800150c:	2215      	movs	r2, #21
 800150e:	601a      	str	r2, [r3, #0]
			traffic_light(Reset);
 8001510:	2006      	movs	r0, #6
 8001512:	f7ff fc79 	bl	8000e08 <traffic_light>
			duration_value = Red_duration + Yellow_duration;
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <auto_tracffic_run+0x2dc>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b28      	ldr	r3, [pc, #160]	; (80015bc <auto_tracffic_run+0x2f0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4413      	add	r3, r2
 8001520:	4a27      	ldr	r2, [pc, #156]	; (80015c0 <auto_tracffic_run+0x2f4>)
 8001522:	6013      	str	r3, [r2, #0]
			Set_timer4(2);
 8001524:	2002      	movs	r0, #2
 8001526:	f000 fc6b 	bl	8001e00 <Set_timer4>
			Set_timer3(5);
 800152a:	2005      	movs	r0, #5
 800152c:	f000 fc50 	bl	8001dd0 <Set_timer3>
		}

		if(Is_buttonPED_pressed() == 1){
 8001530:	f7ff fa50 	bl	80009d4 <Is_buttonPED_pressed>
 8001534:	4603      	mov	r3, r0
 8001536:	2b01      	cmp	r3, #1
 8001538:	d105      	bne.n	8001546 <auto_tracffic_run+0x27a>
			ped_flag = 1;
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <auto_tracffic_run+0x2f8>)
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]
			Set_timer2(200);
 8001540:	20c8      	movs	r0, #200	; 0xc8
 8001542:	f000 fc2d 	bl	8001da0 <Set_timer2>

		}
		if(ped_flag == 1){
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <auto_tracffic_run+0x2f8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <auto_tracffic_run+0x286>
			Pedestrian_run();
 800154e:	f7ff f8f7 	bl	8000740 <Pedestrian_run>

		}

		duration = timer1_counter/100;
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <auto_tracffic_run+0x2e0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a16      	ldr	r2, [pc, #88]	; (80015b0 <auto_tracffic_run+0x2e4>)
 8001558:	fb82 1203 	smull	r1, r2, r2, r3
 800155c:	1152      	asrs	r2, r2, #5
 800155e:	17db      	asrs	r3, r3, #31
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <auto_tracffic_run+0x304>)
 8001564:	6013      	str	r3, [r2, #0]

		yellow_seg_update();
 8001566:	f7ff fb79 	bl	8000c5c <yellow_seg_update>
		if(timer3_flag == 1){
 800156a:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <auto_tracffic_run+0x30c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b01      	cmp	r3, #1
 8001570:	f040 8142 	bne.w	80017f8 <auto_tracffic_run+0x52c>
			Set_timer3(5);
 8001574:	2005      	movs	r0, #5
 8001576:	f000 fc2b 	bl	8001dd0 <Set_timer3>
		HAL_UART_Transmit (& huart2 , ( void *) str , sprintf (str , "!7SEG=%d#\n", duration ), 1000) ;
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <auto_tracffic_run+0x304>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	4916      	ldr	r1, [pc, #88]	; (80015dc <auto_tracffic_run+0x310>)
 8001582:	4817      	ldr	r0, [pc, #92]	; (80015e0 <auto_tracffic_run+0x314>)
 8001584:	f002 fe14 	bl	80041b0 <siprintf>
 8001588:	4603      	mov	r3, r0
 800158a:	b29a      	uxth	r2, r3
 800158c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001590:	4913      	ldr	r1, [pc, #76]	; (80015e0 <auto_tracffic_run+0x314>)
 8001592:	4814      	ldr	r0, [pc, #80]	; (80015e4 <auto_tracffic_run+0x318>)
 8001594:	f002 fc6f 	bl	8003e76 <HAL_UART_Transmit>
		}
		break;
 8001598:	e12e      	b.n	80017f8 <auto_tracffic_run+0x52c>
 800159a:	bf00      	nop
 800159c:	20000110 	.word	0x20000110
 80015a0:	40010800 	.word	0x40010800
 80015a4:	40010c00 	.word	0x40010c00
 80015a8:	20000044 	.word	0x20000044
 80015ac:	2000011c 	.word	0x2000011c
 80015b0:	51eb851f 	.word	0x51eb851f
 80015b4:	200000f0 	.word	0x200000f0
 80015b8:	20000118 	.word	0x20000118
 80015bc:	20000048 	.word	0x20000048
 80015c0:	200000f4 	.word	0x200000f4
 80015c4:	20000114 	.word	0x20000114
 80015c8:	4479c000 	.word	0x4479c000
 80015cc:	200000dc 	.word	0x200000dc
 80015d0:	200000f8 	.word	0x200000f8
 80015d4:	200000fc 	.word	0x200000fc
 80015d8:	20000128 	.word	0x20000128
 80015dc:	08004a60 	.word	0x08004a60
 80015e0:	200001d0 	.word	0x200001d0
 80015e4:	2000018c 	.word	0x2000018c
 80015e8:	2000004c 	.word	0x2000004c
	case Auto_green:
		//TL1
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 80015ec:	2200      	movs	r2, #0
 80015ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f2:	4886      	ldr	r0, [pc, #536]	; (800180c <auto_tracffic_run+0x540>)
 80015f4:	f001 f905 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80015f8:	2201      	movs	r2, #1
 80015fa:	2108      	movs	r1, #8
 80015fc:	4884      	ldr	r0, [pc, #528]	; (8001810 <auto_tracffic_run+0x544>)
 80015fe:	f001 f900 	bl	8002802 <HAL_GPIO_WritePin>
		//TL2
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001602:	2201      	movs	r2, #1
 8001604:	2120      	movs	r1, #32
 8001606:	4882      	ldr	r0, [pc, #520]	; (8001810 <auto_tracffic_run+0x544>)
 8001608:	f001 f8fb 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	2110      	movs	r1, #16
 8001610:	487f      	ldr	r0, [pc, #508]	; (8001810 <auto_tracffic_run+0x544>)
 8001612:	f001 f8f6 	bl	8002802 <HAL_GPIO_WritePin>

		if(timer1_flag == 1){
 8001616:	4b7f      	ldr	r3, [pc, #508]	; (8001814 <auto_tracffic_run+0x548>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d10a      	bne.n	8001634 <auto_tracffic_run+0x368>
			status = Auto_yellow;
 800161e:	4b7e      	ldr	r3, [pc, #504]	; (8001818 <auto_tracffic_run+0x54c>)
 8001620:	2203      	movs	r2, #3
 8001622:	601a      	str	r2, [r3, #0]
			Set_timer1(Yellow_duration);
 8001624:	4b7d      	ldr	r3, [pc, #500]	; (800181c <auto_tracffic_run+0x550>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f000 fba3 	bl	8001d74 <Set_timer1>
			Set_timer3(5);
 800162e:	2005      	movs	r0, #5
 8001630:	f000 fbce 	bl	8001dd0 <Set_timer3>
		}

		if(Is_button1_pressed() == 1){
 8001634:	f7ff f998 	bl	8000968 <Is_button1_pressed>
 8001638:	4603      	mov	r3, r0
 800163a:	2b01      	cmp	r3, #1
 800163c:	d105      	bne.n	800164a <auto_tracffic_run+0x37e>
			status = Man_green;
 800163e:	4b76      	ldr	r3, [pc, #472]	; (8001818 <auto_tracffic_run+0x54c>)
 8001640:	220c      	movs	r2, #12
 8001642:	601a      	str	r2, [r3, #0]
			Set_timer2(20);
 8001644:	2014      	movs	r0, #20
 8001646:	f000 fbab 	bl	8001da0 <Set_timer2>
		}

		if(Is_button2_pressed() == 1){
 800164a:	f7ff f99f 	bl	800098c <Is_button2_pressed>
 800164e:	4603      	mov	r3, r0
 8001650:	2b01      	cmp	r3, #1
 8001652:	d112      	bne.n	800167a <auto_tracffic_run+0x3ae>
			status = Red_Modify;
 8001654:	4b70      	ldr	r3, [pc, #448]	; (8001818 <auto_tracffic_run+0x54c>)
 8001656:	2215      	movs	r2, #21
 8001658:	601a      	str	r2, [r3, #0]
			traffic_light(Reset);
 800165a:	2006      	movs	r0, #6
 800165c:	f7ff fbd4 	bl	8000e08 <traffic_light>
			duration_value = Red_duration + Yellow_duration;
 8001660:	4b6f      	ldr	r3, [pc, #444]	; (8001820 <auto_tracffic_run+0x554>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b6d      	ldr	r3, [pc, #436]	; (800181c <auto_tracffic_run+0x550>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4413      	add	r3, r2
 800166a:	4a6e      	ldr	r2, [pc, #440]	; (8001824 <auto_tracffic_run+0x558>)
 800166c:	6013      	str	r3, [r2, #0]
			Set_timer4(2);
 800166e:	2002      	movs	r0, #2
 8001670:	f000 fbc6 	bl	8001e00 <Set_timer4>
			Set_timer3(5);
 8001674:	2005      	movs	r0, #5
 8001676:	f000 fbab 	bl	8001dd0 <Set_timer3>
		}

		if(Is_buttonPED_pressed() == 1){
 800167a:	f7ff f9ab 	bl	80009d4 <Is_buttonPED_pressed>
 800167e:	4603      	mov	r3, r0
 8001680:	2b01      	cmp	r3, #1
 8001682:	d105      	bne.n	8001690 <auto_tracffic_run+0x3c4>
			ped_flag = 1;
 8001684:	4b68      	ldr	r3, [pc, #416]	; (8001828 <auto_tracffic_run+0x55c>)
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]
			Set_timer2(200);
 800168a:	20c8      	movs	r0, #200	; 0xc8
 800168c:	f000 fb88 	bl	8001da0 <Set_timer2>

		}
		if(ped_flag == 1){
 8001690:	4b65      	ldr	r3, [pc, #404]	; (8001828 <auto_tracffic_run+0x55c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d101      	bne.n	800169c <auto_tracffic_run+0x3d0>
			Pedestrian_run();
 8001698:	f7ff f852 	bl	8000740 <Pedestrian_run>

		}

		duration  = timer1_counter/100 ;
 800169c:	4b63      	ldr	r3, [pc, #396]	; (800182c <auto_tracffic_run+0x560>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a63      	ldr	r2, [pc, #396]	; (8001830 <auto_tracffic_run+0x564>)
 80016a2:	fb82 1203 	smull	r1, r2, r2, r3
 80016a6:	1152      	asrs	r2, r2, #5
 80016a8:	17db      	asrs	r3, r3, #31
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	4a61      	ldr	r2, [pc, #388]	; (8001834 <auto_tracffic_run+0x568>)
 80016ae:	6013      	str	r3, [r2, #0]
		duration2 = timer1_counter/100 + Yellow_duration;
 80016b0:	4b5e      	ldr	r3, [pc, #376]	; (800182c <auto_tracffic_run+0x560>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a5e      	ldr	r2, [pc, #376]	; (8001830 <auto_tracffic_run+0x564>)
 80016b6:	fb82 1203 	smull	r1, r2, r2, r3
 80016ba:	1152      	asrs	r2, r2, #5
 80016bc:	17db      	asrs	r3, r3, #31
 80016be:	1ad2      	subs	r2, r2, r3
 80016c0:	4b56      	ldr	r3, [pc, #344]	; (800181c <auto_tracffic_run+0x550>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4413      	add	r3, r2
 80016c6:	4a5c      	ldr	r2, [pc, #368]	; (8001838 <auto_tracffic_run+0x56c>)
 80016c8:	6013      	str	r3, [r2, #0]

		green_seg_update();
 80016ca:	f7ff fb31 	bl	8000d30 <green_seg_update>
		if(timer3_flag == 1){
 80016ce:	4b5b      	ldr	r3, [pc, #364]	; (800183c <auto_tracffic_run+0x570>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	f040 8092 	bne.w	80017fc <auto_tracffic_run+0x530>
			Set_timer3(5);
 80016d8:	2005      	movs	r0, #5
 80016da:	f000 fb79 	bl	8001dd0 <Set_timer3>
		HAL_UART_Transmit (& huart2 , ( void *) str , sprintf (str , "!7SEG=%d#\n", duration ), 1000) ;
 80016de:	4b55      	ldr	r3, [pc, #340]	; (8001834 <auto_tracffic_run+0x568>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	4956      	ldr	r1, [pc, #344]	; (8001840 <auto_tracffic_run+0x574>)
 80016e6:	4857      	ldr	r0, [pc, #348]	; (8001844 <auto_tracffic_run+0x578>)
 80016e8:	f002 fd62 	bl	80041b0 <siprintf>
 80016ec:	4603      	mov	r3, r0
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f4:	4953      	ldr	r1, [pc, #332]	; (8001844 <auto_tracffic_run+0x578>)
 80016f6:	4854      	ldr	r0, [pc, #336]	; (8001848 <auto_tracffic_run+0x57c>)
 80016f8:	f002 fbbd 	bl	8003e76 <HAL_UART_Transmit>
		}
		break;
 80016fc:	e07e      	b.n	80017fc <auto_tracffic_run+0x530>

	case Auto_yellow:
		//TL1
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,SET);
 80016fe:	2201      	movs	r2, #1
 8001700:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001704:	4841      	ldr	r0, [pc, #260]	; (800180c <auto_tracffic_run+0x540>)
 8001706:	f001 f87c 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 800170a:	2201      	movs	r2, #1
 800170c:	2108      	movs	r1, #8
 800170e:	4840      	ldr	r0, [pc, #256]	; (8001810 <auto_tracffic_run+0x544>)
 8001710:	f001 f877 	bl	8002802 <HAL_GPIO_WritePin>
		//TL2
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001714:	2201      	movs	r2, #1
 8001716:	2120      	movs	r1, #32
 8001718:	483d      	ldr	r0, [pc, #244]	; (8001810 <auto_tracffic_run+0x544>)
 800171a:	f001 f872 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	2110      	movs	r1, #16
 8001722:	483b      	ldr	r0, [pc, #236]	; (8001810 <auto_tracffic_run+0x544>)
 8001724:	f001 f86d 	bl	8002802 <HAL_GPIO_WritePin>

		if(timer1_flag == 1){
 8001728:	4b3a      	ldr	r3, [pc, #232]	; (8001814 <auto_tracffic_run+0x548>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d10a      	bne.n	8001746 <auto_tracffic_run+0x47a>
			status = Auto_red;
 8001730:	4b39      	ldr	r3, [pc, #228]	; (8001818 <auto_tracffic_run+0x54c>)
 8001732:	2201      	movs	r2, #1
 8001734:	601a      	str	r2, [r3, #0]
			Set_timer1(Red_duration);
 8001736:	4b3a      	ldr	r3, [pc, #232]	; (8001820 <auto_tracffic_run+0x554>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f000 fb1a 	bl	8001d74 <Set_timer1>
			Set_timer3(5);
 8001740:	2005      	movs	r0, #5
 8001742:	f000 fb45 	bl	8001dd0 <Set_timer3>
		}

		if(Is_button1_pressed() == 1){
 8001746:	f7ff f90f 	bl	8000968 <Is_button1_pressed>
 800174a:	4603      	mov	r3, r0
 800174c:	2b01      	cmp	r3, #1
 800174e:	d105      	bne.n	800175c <auto_tracffic_run+0x490>
			status = Man_yellow;
 8001750:	4b31      	ldr	r3, [pc, #196]	; (8001818 <auto_tracffic_run+0x54c>)
 8001752:	220b      	movs	r2, #11
 8001754:	601a      	str	r2, [r3, #0]
			Set_timer2(20);
 8001756:	2014      	movs	r0, #20
 8001758:	f000 fb22 	bl	8001da0 <Set_timer2>
		}

		if(Is_button2_pressed() == 1){
 800175c:	f7ff f916 	bl	800098c <Is_button2_pressed>
 8001760:	4603      	mov	r3, r0
 8001762:	2b01      	cmp	r3, #1
 8001764:	d112      	bne.n	800178c <auto_tracffic_run+0x4c0>
			status = Red_Modify;
 8001766:	4b2c      	ldr	r3, [pc, #176]	; (8001818 <auto_tracffic_run+0x54c>)
 8001768:	2215      	movs	r2, #21
 800176a:	601a      	str	r2, [r3, #0]
			traffic_light(Reset);
 800176c:	2006      	movs	r0, #6
 800176e:	f7ff fb4b 	bl	8000e08 <traffic_light>
			duration_value = Red_duration + Yellow_duration;
 8001772:	4b2b      	ldr	r3, [pc, #172]	; (8001820 <auto_tracffic_run+0x554>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4b29      	ldr	r3, [pc, #164]	; (800181c <auto_tracffic_run+0x550>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4413      	add	r3, r2
 800177c:	4a29      	ldr	r2, [pc, #164]	; (8001824 <auto_tracffic_run+0x558>)
 800177e:	6013      	str	r3, [r2, #0]
			Set_timer4(2);
 8001780:	2002      	movs	r0, #2
 8001782:	f000 fb3d 	bl	8001e00 <Set_timer4>
			Set_timer3(5);
 8001786:	2005      	movs	r0, #5
 8001788:	f000 fb22 	bl	8001dd0 <Set_timer3>
		}

		if(Is_buttonPED_pressed() == 1){
 800178c:	f7ff f922 	bl	80009d4 <Is_buttonPED_pressed>
 8001790:	4603      	mov	r3, r0
 8001792:	2b01      	cmp	r3, #1
 8001794:	d105      	bne.n	80017a2 <auto_tracffic_run+0x4d6>
			ped_flag = 1;
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <auto_tracffic_run+0x55c>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]
			Set_timer2(200);
 800179c:	20c8      	movs	r0, #200	; 0xc8
 800179e:	f000 faff 	bl	8001da0 <Set_timer2>
		}
		if(ped_flag == 1){
 80017a2:	4b21      	ldr	r3, [pc, #132]	; (8001828 <auto_tracffic_run+0x55c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d101      	bne.n	80017ae <auto_tracffic_run+0x4e2>
			Pedestrian_run();
 80017aa:	f7fe ffc9 	bl	8000740 <Pedestrian_run>
		}

		duration = timer1_counter/100;
 80017ae:	4b1f      	ldr	r3, [pc, #124]	; (800182c <auto_tracffic_run+0x560>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a1f      	ldr	r2, [pc, #124]	; (8001830 <auto_tracffic_run+0x564>)
 80017b4:	fb82 1203 	smull	r1, r2, r2, r3
 80017b8:	1152      	asrs	r2, r2, #5
 80017ba:	17db      	asrs	r3, r3, #31
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	4a1d      	ldr	r2, [pc, #116]	; (8001834 <auto_tracffic_run+0x568>)
 80017c0:	6013      	str	r3, [r2, #0]

		yellow_seg_update();
 80017c2:	f7ff fa4b 	bl	8000c5c <yellow_seg_update>
		if(timer3_flag == 1){
 80017c6:	4b1d      	ldr	r3, [pc, #116]	; (800183c <auto_tracffic_run+0x570>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d118      	bne.n	8001800 <auto_tracffic_run+0x534>
			Set_timer3(5);
 80017ce:	2005      	movs	r0, #5
 80017d0:	f000 fafe 	bl	8001dd0 <Set_timer3>
		HAL_UART_Transmit (& huart2 , ( void *) str , sprintf (str , "!7SEG=%d#\n", duration ), 1000) ;
 80017d4:	4b17      	ldr	r3, [pc, #92]	; (8001834 <auto_tracffic_run+0x568>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4919      	ldr	r1, [pc, #100]	; (8001840 <auto_tracffic_run+0x574>)
 80017dc:	4819      	ldr	r0, [pc, #100]	; (8001844 <auto_tracffic_run+0x578>)
 80017de:	f002 fce7 	bl	80041b0 <siprintf>
 80017e2:	4603      	mov	r3, r0
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ea:	4916      	ldr	r1, [pc, #88]	; (8001844 <auto_tracffic_run+0x578>)
 80017ec:	4816      	ldr	r0, [pc, #88]	; (8001848 <auto_tracffic_run+0x57c>)
 80017ee:	f002 fb42 	bl	8003e76 <HAL_UART_Transmit>
		}
		break;
 80017f2:	e005      	b.n	8001800 <auto_tracffic_run+0x534>
		break;
 80017f4:	bf00      	nop
 80017f6:	e004      	b.n	8001802 <auto_tracffic_run+0x536>
		break;
 80017f8:	bf00      	nop
 80017fa:	e002      	b.n	8001802 <auto_tracffic_run+0x536>
		break;
 80017fc:	bf00      	nop
 80017fe:	e000      	b.n	8001802 <auto_tracffic_run+0x536>
		break;
 8001800:	bf00      	nop

	}
 }
 8001802:	bf00      	nop
 8001804:	3704      	adds	r7, #4
 8001806:	46bd      	mov	sp, r7
 8001808:	bd90      	pop	{r4, r7, pc}
 800180a:	bf00      	nop
 800180c:	40010800 	.word	0x40010800
 8001810:	40010c00 	.word	0x40010c00
 8001814:	20000118 	.word	0x20000118
 8001818:	20000110 	.word	0x20000110
 800181c:	20000048 	.word	0x20000048
 8001820:	20000044 	.word	0x20000044
 8001824:	200000f4 	.word	0x200000f4
 8001828:	20000114 	.word	0x20000114
 800182c:	2000011c 	.word	0x2000011c
 8001830:	51eb851f 	.word	0x51eb851f
 8001834:	200000f8 	.word	0x200000f8
 8001838:	200000fc 	.word	0x200000fc
 800183c:	20000128 	.word	0x20000128
 8001840:	08004a60 	.word	0x08004a60
 8001844:	200001d0 	.word	0x200001d0
 8001848:	2000018c 	.word	0x2000018c

0800184c <fsm_trafficlight_manual_run>:
 *  Created on: Dec 1, 2022
 *      Author: HAU
 */
#include "fsm_trafficlight_manual.h"

void fsm_trafficlight_manual_run(){
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	switch(status){
 8001850:	4b45      	ldr	r3, [pc, #276]	; (8001968 <fsm_trafficlight_manual_run+0x11c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b0c      	cmp	r3, #12
 8001856:	d02f      	beq.n	80018b8 <fsm_trafficlight_manual_run+0x6c>
 8001858:	2b0c      	cmp	r3, #12
 800185a:	f300 8082 	bgt.w	8001962 <fsm_trafficlight_manual_run+0x116>
 800185e:	2b0a      	cmp	r3, #10
 8001860:	d002      	beq.n	8001868 <fsm_trafficlight_manual_run+0x1c>
 8001862:	2b0b      	cmp	r3, #11
 8001864:	d050      	beq.n	8001908 <fsm_trafficlight_manual_run+0xbc>
			status = Auto_init;
		}

		break;
	}
}
 8001866:	e07c      	b.n	8001962 <fsm_trafficlight_manual_run+0x116>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8001868:	2201      	movs	r2, #1
 800186a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800186e:	483f      	ldr	r0, [pc, #252]	; (800196c <fsm_trafficlight_manual_run+0x120>)
 8001870:	f000 ffc7 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8001874:	2200      	movs	r2, #0
 8001876:	2108      	movs	r1, #8
 8001878:	483d      	ldr	r0, [pc, #244]	; (8001970 <fsm_trafficlight_manual_run+0x124>)
 800187a:	f000 ffc2 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800187e:	2200      	movs	r2, #0
 8001880:	2120      	movs	r1, #32
 8001882:	483b      	ldr	r0, [pc, #236]	; (8001970 <fsm_trafficlight_manual_run+0x124>)
 8001884:	f000 ffbd 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001888:	2201      	movs	r2, #1
 800188a:	2110      	movs	r1, #16
 800188c:	4838      	ldr	r0, [pc, #224]	; (8001970 <fsm_trafficlight_manual_run+0x124>)
 800188e:	f000 ffb8 	bl	8002802 <HAL_GPIO_WritePin>
		if(Is_button1_pressed() == 1){
 8001892:	f7ff f869 	bl	8000968 <Is_button1_pressed>
 8001896:	4603      	mov	r3, r0
 8001898:	2b01      	cmp	r3, #1
 800189a:	d105      	bne.n	80018a8 <fsm_trafficlight_manual_run+0x5c>
			status = Man_green;
 800189c:	4b32      	ldr	r3, [pc, #200]	; (8001968 <fsm_trafficlight_manual_run+0x11c>)
 800189e:	220c      	movs	r2, #12
 80018a0:	601a      	str	r2, [r3, #0]
			Set_timer2(20);
 80018a2:	2014      	movs	r0, #20
 80018a4:	f000 fa7c 	bl	8001da0 <Set_timer2>
		if(timer2_flag == 1){
 80018a8:	4b32      	ldr	r3, [pc, #200]	; (8001974 <fsm_trafficlight_manual_run+0x128>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d153      	bne.n	8001958 <fsm_trafficlight_manual_run+0x10c>
			status = Auto_init;
 80018b0:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <fsm_trafficlight_manual_run+0x11c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
		break;
 80018b6:	e04f      	b.n	8001958 <fsm_trafficlight_manual_run+0x10c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018be:	482b      	ldr	r0, [pc, #172]	; (800196c <fsm_trafficlight_manual_run+0x120>)
 80018c0:	f000 ff9f 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80018c4:	2201      	movs	r2, #1
 80018c6:	2108      	movs	r1, #8
 80018c8:	4829      	ldr	r0, [pc, #164]	; (8001970 <fsm_trafficlight_manual_run+0x124>)
 80018ca:	f000 ff9a 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2120      	movs	r1, #32
 80018d2:	4827      	ldr	r0, [pc, #156]	; (8001970 <fsm_trafficlight_manual_run+0x124>)
 80018d4:	f000 ff95 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	2110      	movs	r1, #16
 80018dc:	4824      	ldr	r0, [pc, #144]	; (8001970 <fsm_trafficlight_manual_run+0x124>)
 80018de:	f000 ff90 	bl	8002802 <HAL_GPIO_WritePin>
		if(Is_button1_pressed() == 1){
 80018e2:	f7ff f841 	bl	8000968 <Is_button1_pressed>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d105      	bne.n	80018f8 <fsm_trafficlight_manual_run+0xac>
			status = Man_yellow;
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <fsm_trafficlight_manual_run+0x11c>)
 80018ee:	220b      	movs	r2, #11
 80018f0:	601a      	str	r2, [r3, #0]
			Set_timer2(20);
 80018f2:	2014      	movs	r0, #20
 80018f4:	f000 fa54 	bl	8001da0 <Set_timer2>
		if(timer2_flag == 1){
 80018f8:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <fsm_trafficlight_manual_run+0x128>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d12d      	bne.n	800195c <fsm_trafficlight_manual_run+0x110>
			status = Auto_init;
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <fsm_trafficlight_manual_run+0x11c>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
		break;
 8001906:	e029      	b.n	800195c <fsm_trafficlight_manual_run+0x110>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,SET);
 8001908:	2201      	movs	r2, #1
 800190a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800190e:	4817      	ldr	r0, [pc, #92]	; (800196c <fsm_trafficlight_manual_run+0x120>)
 8001910:	f000 ff77 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8001914:	2201      	movs	r2, #1
 8001916:	2108      	movs	r1, #8
 8001918:	4815      	ldr	r0, [pc, #84]	; (8001970 <fsm_trafficlight_manual_run+0x124>)
 800191a:	f000 ff72 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 800191e:	2201      	movs	r2, #1
 8001920:	2120      	movs	r1, #32
 8001922:	4813      	ldr	r0, [pc, #76]	; (8001970 <fsm_trafficlight_manual_run+0x124>)
 8001924:	f000 ff6d 	bl	8002802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001928:	2201      	movs	r2, #1
 800192a:	2110      	movs	r1, #16
 800192c:	4810      	ldr	r0, [pc, #64]	; (8001970 <fsm_trafficlight_manual_run+0x124>)
 800192e:	f000 ff68 	bl	8002802 <HAL_GPIO_WritePin>
		if(Is_button1_pressed() == 1){
 8001932:	f7ff f819 	bl	8000968 <Is_button1_pressed>
 8001936:	4603      	mov	r3, r0
 8001938:	2b01      	cmp	r3, #1
 800193a:	d105      	bne.n	8001948 <fsm_trafficlight_manual_run+0xfc>
			status = Man_red;
 800193c:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <fsm_trafficlight_manual_run+0x11c>)
 800193e:	220a      	movs	r2, #10
 8001940:	601a      	str	r2, [r3, #0]
			Set_timer2(20);
 8001942:	2014      	movs	r0, #20
 8001944:	f000 fa2c 	bl	8001da0 <Set_timer2>
		if(timer2_flag == 1){
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <fsm_trafficlight_manual_run+0x128>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d107      	bne.n	8001960 <fsm_trafficlight_manual_run+0x114>
			status = Auto_init;
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <fsm_trafficlight_manual_run+0x11c>)
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
		break;
 8001956:	e003      	b.n	8001960 <fsm_trafficlight_manual_run+0x114>
		break;
 8001958:	bf00      	nop
 800195a:	e002      	b.n	8001962 <fsm_trafficlight_manual_run+0x116>
		break;
 800195c:	bf00      	nop
 800195e:	e000      	b.n	8001962 <fsm_trafficlight_manual_run+0x116>
		break;
 8001960:	bf00      	nop
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000110 	.word	0x20000110
 800196c:	40010800 	.word	0x40010800
 8001970:	40010c00 	.word	0x40010c00
 8001974:	20000120 	.word	0x20000120

08001978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800197c:	f000 fc36 	bl	80021ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001980:	f000 f818 	bl	80019b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001984:	f000 f944 	bl	8001c10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001988:	f000 f918 	bl	8001bbc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800198c:	f000 f854 	bl	8001a38 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001990:	f000 f89e 	bl	8001ad0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8001994:	4806      	ldr	r0, [pc, #24]	; (80019b0 <main+0x38>)
 8001996:	f001 fbd9 	bl	800314c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //Set_timer1(10);
  while (1)
  {
	  auto_tracffic_run();
 800199a:	f7ff fc97 	bl	80012cc <auto_tracffic_run>
	  fsm_trafficlight_manual_run();
 800199e:	f7ff ff55 	bl	800184c <fsm_trafficlight_manual_run>
	  fsm_modify_run();
 80019a2:	f7ff fac7 	bl	8000f34 <fsm_modify_run>
	  fsm_modify_yellow_run();
 80019a6:	f7ff fbfb 	bl	80011a0 <fsm_modify_yellow_run>
	  fsm_modify_green_run();
 80019aa:	f7ff fb6f 	bl	800108c <fsm_modify_green_run>
	  auto_tracffic_run();
 80019ae:	e7f4      	b.n	800199a <main+0x22>
 80019b0:	20000204 	.word	0x20000204

080019b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b090      	sub	sp, #64	; 0x40
 80019b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ba:	f107 0318 	add.w	r3, r7, #24
 80019be:	2228      	movs	r2, #40	; 0x28
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 fbec 	bl	80041a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019d6:	2302      	movs	r3, #2
 80019d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019da:	2301      	movs	r3, #1
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019de:	2310      	movs	r3, #16
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e2:	2302      	movs	r3, #2
 80019e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80019e6:	2300      	movs	r3, #0
 80019e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80019ea:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80019ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f0:	f107 0318 	add.w	r3, r7, #24
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 ff3f 	bl	8002878 <HAL_RCC_OscConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001a00:	f000 f9b2 	bl	8001d68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a04:	230f      	movs	r3, #15
 8001a06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f001 f9aa 	bl	8002d78 <HAL_RCC_ClockConfig>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001a2a:	f000 f99d 	bl	8001d68 <Error_Handler>
  }
}
 8001a2e:	bf00      	nop
 8001a30:	3740      	adds	r7, #64	; 0x40
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a3e:	f107 0308 	add.w	r3, r7, #8
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4c:	463b      	mov	r3, r7
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a54:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <MX_TIM2_Init+0x94>)
 8001a56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <MX_TIM2_Init+0x94>)
 8001a5e:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001a62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a64:	4b19      	ldr	r3, [pc, #100]	; (8001acc <MX_TIM2_Init+0x94>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <MX_TIM2_Init+0x94>)
 8001a6c:	2213      	movs	r2, #19
 8001a6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a70:	4b16      	ldr	r3, [pc, #88]	; (8001acc <MX_TIM2_Init+0x94>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <MX_TIM2_Init+0x94>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a7c:	4813      	ldr	r0, [pc, #76]	; (8001acc <MX_TIM2_Init+0x94>)
 8001a7e:	f001 fb15 	bl	80030ac <HAL_TIM_Base_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a88:	f000 f96e 	bl	8001d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a92:	f107 0308 	add.w	r3, r7, #8
 8001a96:	4619      	mov	r1, r3
 8001a98:	480c      	ldr	r0, [pc, #48]	; (8001acc <MX_TIM2_Init+0x94>)
 8001a9a:	f001 fdc7 	bl	800362c <HAL_TIM_ConfigClockSource>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001aa4:	f000 f960 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_TIM2_Init+0x94>)
 8001ab6:	f002 f921 	bl	8003cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ac0:	f000 f952 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000204 	.word	0x20000204

08001ad0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08e      	sub	sp, #56	; 0x38
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae4:	f107 0320 	add.w	r3, r7, #32
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
 8001afc:	615a      	str	r2, [r3, #20]
 8001afe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b00:	4b2c      	ldr	r3, [pc, #176]	; (8001bb4 <MX_TIM3_Init+0xe4>)
 8001b02:	4a2d      	ldr	r2, [pc, #180]	; (8001bb8 <MX_TIM3_Init+0xe8>)
 8001b04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001b06:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <MX_TIM3_Init+0xe4>)
 8001b08:	223f      	movs	r2, #63	; 0x3f
 8001b0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0c:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <MX_TIM3_Init+0xe4>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001b12:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <MX_TIM3_Init+0xe4>)
 8001b14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1a:	4b26      	ldr	r3, [pc, #152]	; (8001bb4 <MX_TIM3_Init+0xe4>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b20:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <MX_TIM3_Init+0xe4>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b26:	4823      	ldr	r0, [pc, #140]	; (8001bb4 <MX_TIM3_Init+0xe4>)
 8001b28:	f001 fac0 	bl	80030ac <HAL_TIM_Base_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001b32:	f000 f919 	bl	8001d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b40:	4619      	mov	r1, r3
 8001b42:	481c      	ldr	r0, [pc, #112]	; (8001bb4 <MX_TIM3_Init+0xe4>)
 8001b44:	f001 fd72 	bl	800362c <HAL_TIM_ConfigClockSource>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001b4e:	f000 f90b 	bl	8001d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b52:	4818      	ldr	r0, [pc, #96]	; (8001bb4 <MX_TIM3_Init+0xe4>)
 8001b54:	f001 fb4c 	bl	80031f0 <HAL_TIM_PWM_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b5e:	f000 f903 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b6a:	f107 0320 	add.w	r3, r7, #32
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4810      	ldr	r0, [pc, #64]	; (8001bb4 <MX_TIM3_Init+0xe4>)
 8001b72:	f002 f8c3 	bl	8003cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b7c:	f000 f8f4 	bl	8001d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b80:	2360      	movs	r3, #96	; 0x60
 8001b82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2200      	movs	r2, #0
 8001b94:	4619      	mov	r1, r3
 8001b96:	4807      	ldr	r0, [pc, #28]	; (8001bb4 <MX_TIM3_Init+0xe4>)
 8001b98:	f001 fc8a 	bl	80034b0 <HAL_TIM_PWM_ConfigChannel>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001ba2:	f000 f8e1 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ba6:	4803      	ldr	r0, [pc, #12]	; (8001bb4 <MX_TIM3_Init+0xe4>)
 8001ba8:	f000 fa0a 	bl	8001fc0 <HAL_TIM_MspPostInit>

}
 8001bac:	bf00      	nop
 8001bae:	3738      	adds	r7, #56	; 0x38
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000144 	.word	0x20000144
 8001bb8:	40000400 	.word	0x40000400

08001bbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bc2:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <MX_USART2_UART_Init+0x50>)
 8001bc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001be2:	220c      	movs	r2, #12
 8001be4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bf2:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bf4:	f002 f8f2 	bl	8003ddc <HAL_UART_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bfe:	f000 f8b3 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	2000018c 	.word	0x2000018c
 8001c0c:	40004400 	.word	0x40004400

08001c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c16:	f107 0310 	add.w	r3, r7, #16
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c24:	4b45      	ldr	r3, [pc, #276]	; (8001d3c <MX_GPIO_Init+0x12c>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a44      	ldr	r2, [pc, #272]	; (8001d3c <MX_GPIO_Init+0x12c>)
 8001c2a:	f043 0310 	orr.w	r3, r3, #16
 8001c2e:	6193      	str	r3, [r2, #24]
 8001c30:	4b42      	ldr	r3, [pc, #264]	; (8001d3c <MX_GPIO_Init+0x12c>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3c:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <MX_GPIO_Init+0x12c>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a3e      	ldr	r2, [pc, #248]	; (8001d3c <MX_GPIO_Init+0x12c>)
 8001c42:	f043 0320 	orr.w	r3, r3, #32
 8001c46:	6193      	str	r3, [r2, #24]
 8001c48:	4b3c      	ldr	r3, [pc, #240]	; (8001d3c <MX_GPIO_Init+0x12c>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0320 	and.w	r3, r3, #32
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	4b39      	ldr	r3, [pc, #228]	; (8001d3c <MX_GPIO_Init+0x12c>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a38      	ldr	r2, [pc, #224]	; (8001d3c <MX_GPIO_Init+0x12c>)
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b36      	ldr	r3, [pc, #216]	; (8001d3c <MX_GPIO_Init+0x12c>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6c:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <MX_GPIO_Init+0x12c>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a32      	ldr	r2, [pc, #200]	; (8001d3c <MX_GPIO_Init+0x12c>)
 8001c72:	f043 0308 	orr.w	r3, r3, #8
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b30      	ldr	r3, [pc, #192]	; (8001d3c <MX_GPIO_Init+0x12c>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8001c8a:	482d      	ldr	r0, [pc, #180]	; (8001d40 <MX_GPIO_Init+0x130>)
 8001c8c:	f000 fdb9 	bl	8002802 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001c90:	2200      	movs	r2, #0
 8001c92:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001c96:	482b      	ldr	r0, [pc, #172]	; (8001d44 <MX_GPIO_Init+0x134>)
 8001c98:	f000 fdb3 	bl	8002802 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ca2:	4b29      	ldr	r3, [pc, #164]	; (8001d48 <MX_GPIO_Init+0x138>)
 8001ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001caa:	f107 0310 	add.w	r3, r7, #16
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4826      	ldr	r0, [pc, #152]	; (8001d4c <MX_GPIO_Init+0x13c>)
 8001cb2:	f000 fc0b 	bl	80024cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001cb6:	2313      	movs	r3, #19
 8001cb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	f107 0310 	add.w	r3, r7, #16
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	481d      	ldr	r0, [pc, #116]	; (8001d40 <MX_GPIO_Init+0x130>)
 8001cca:	f000 fbff 	bl	80024cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_10;
 8001cce:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8001cd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4816      	ldr	r0, [pc, #88]	; (8001d40 <MX_GPIO_Init+0x130>)
 8001ce8:	f000 fbf0 	bl	80024cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cec:	2301      	movs	r3, #1
 8001cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4811      	ldr	r0, [pc, #68]	; (8001d44 <MX_GPIO_Init+0x134>)
 8001d00:	f000 fbe4 	bl	80024cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001d04:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001d08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d12:	2302      	movs	r3, #2
 8001d14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d16:	f107 0310 	add.w	r3, r7, #16
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4809      	ldr	r0, [pc, #36]	; (8001d44 <MX_GPIO_Init+0x134>)
 8001d1e:	f000 fbd5 	bl	80024cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	2028      	movs	r0, #40	; 0x28
 8001d28:	f000 fb99 	bl	800245e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d2c:	2028      	movs	r0, #40	; 0x28
 8001d2e:	f000 fbb2 	bl	8002496 <HAL_NVIC_EnableIRQ>

}
 8001d32:	bf00      	nop
 8001d34:	3720      	adds	r7, #32
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40010800 	.word	0x40010800
 8001d44:	40010c00 	.word	0x40010c00
 8001d48:	10110000 	.word	0x10110000
 8001d4c:	40011000 	.word	0x40011000

08001d50 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	Timer_run();
 8001d58:	f000 f86a 	bl	8001e30 <Timer_run>
	Button_undebounce();
 8001d5c:	f7fe fe76 	bl	8000a4c <Button_undebounce>
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d6c:	b672      	cpsid	i
}
 8001d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <Error_Handler+0x8>
	...

08001d74 <Set_timer1>:
int timer3_flag = 0;
int timer3_counter = 0;
int timer4_flag = 0;
int timer4_counter = 0;

void Set_timer1(int Time_set){
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	timer1_counter = Time_set*100;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2264      	movs	r2, #100	; 0x64
 8001d80:	fb02 f303 	mul.w	r3, r2, r3
 8001d84:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <Set_timer1+0x24>)
 8001d86:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <Set_timer1+0x28>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	2000011c 	.word	0x2000011c
 8001d9c:	20000118 	.word	0x20000118

08001da0 <Set_timer2>:
void Set_timer2(int Time_set){
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	timer2_counter = Time_set*10;
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <Set_timer2+0x28>)
 8001db6:	601a      	str	r2, [r3, #0]
	timer2_flag = 0;
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <Set_timer2+0x2c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	20000124 	.word	0x20000124
 8001dcc:	20000120 	.word	0x20000120

08001dd0 <Set_timer3>:
void Set_timer3(int Time_set){
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	timer3_counter = Time_set*10;
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <Set_timer3+0x28>)
 8001de6:	601a      	str	r2, [r3, #0]
	timer3_flag = 0;
 8001de8:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <Set_timer3+0x2c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	2000012c 	.word	0x2000012c
 8001dfc:	20000128 	.word	0x20000128

08001e00 <Set_timer4>:
void Set_timer4(int Time_set){
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	timer4_counter = Time_set*10;
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <Set_timer4+0x28>)
 8001e16:	601a      	str	r2, [r3, #0]
	timer4_flag = 0;
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <Set_timer4+0x2c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	20000134 	.word	0x20000134
 8001e2c:	20000130 	.word	0x20000130

08001e30 <Timer_run>:
void Timer_run(){
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
	if(timer1_counter >0){
 8001e34:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <Timer_run+0x8c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	dd0b      	ble.n	8001e54 <Timer_run+0x24>
		timer1_counter --;
 8001e3c:	4b1f      	ldr	r3, [pc, #124]	; (8001ebc <Timer_run+0x8c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	4a1e      	ldr	r2, [pc, #120]	; (8001ebc <Timer_run+0x8c>)
 8001e44:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001e46:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <Timer_run+0x8c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	dc02      	bgt.n	8001e54 <Timer_run+0x24>
			timer1_flag = 1;
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <Timer_run+0x90>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter >0){
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <Timer_run+0x94>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	dd0b      	ble.n	8001e74 <Timer_run+0x44>
		timer2_counter --;
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <Timer_run+0x94>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	4a18      	ldr	r2, [pc, #96]	; (8001ec4 <Timer_run+0x94>)
 8001e64:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8001e66:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <Timer_run+0x94>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	dc02      	bgt.n	8001e74 <Timer_run+0x44>
			timer2_flag = 1;
 8001e6e:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <Timer_run+0x98>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter >0){
 8001e74:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <Timer_run+0x9c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	dd0b      	ble.n	8001e94 <Timer_run+0x64>
		timer3_counter --;
 8001e7c:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <Timer_run+0x9c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <Timer_run+0x9c>)
 8001e84:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <Timer_run+0x9c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	dc02      	bgt.n	8001e94 <Timer_run+0x64>
			timer3_flag = 1;
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <Timer_run+0xa0>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter >0){
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <Timer_run+0xa4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	dd0b      	ble.n	8001eb4 <Timer_run+0x84>
		timer4_counter --;
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <Timer_run+0xa4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	4a0c      	ldr	r2, [pc, #48]	; (8001ed4 <Timer_run+0xa4>)
 8001ea4:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <Timer_run+0xa4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	dc02      	bgt.n	8001eb4 <Timer_run+0x84>
			timer4_flag = 1;
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <Timer_run+0xa8>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
		}
	}

}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	2000011c 	.word	0x2000011c
 8001ec0:	20000118 	.word	0x20000118
 8001ec4:	20000124 	.word	0x20000124
 8001ec8:	20000120 	.word	0x20000120
 8001ecc:	2000012c 	.word	0x2000012c
 8001ed0:	20000128 	.word	0x20000128
 8001ed4:	20000134 	.word	0x20000134
 8001ed8:	20000130 	.word	0x20000130

08001edc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_MspInit+0x5c>)
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <HAL_MspInit+0x5c>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6193      	str	r3, [r2, #24]
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_MspInit+0x5c>)
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <HAL_MspInit+0x5c>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <HAL_MspInit+0x5c>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	61d3      	str	r3, [r2, #28]
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <HAL_MspInit+0x5c>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_MspInit+0x60>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <HAL_MspInit+0x60>)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40010000 	.word	0x40010000

08001f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f50:	d114      	bne.n	8001f7c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f52:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_TIM_Base_MspInit+0x78>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <HAL_TIM_Base_MspInit+0x78>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	61d3      	str	r3, [r2, #28]
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_TIM_Base_MspInit+0x78>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	201c      	movs	r0, #28
 8001f70:	f000 fa75 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f74:	201c      	movs	r0, #28
 8001f76:	f000 fa8e 	bl	8002496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f7a:	e018      	b.n	8001fae <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0e      	ldr	r2, [pc, #56]	; (8001fbc <HAL_TIM_Base_MspInit+0x7c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d113      	bne.n	8001fae <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <HAL_TIM_Base_MspInit+0x78>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4a0b      	ldr	r2, [pc, #44]	; (8001fb8 <HAL_TIM_Base_MspInit+0x78>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	61d3      	str	r3, [r2, #28]
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_TIM_Base_MspInit+0x78>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	201d      	movs	r0, #29
 8001fa4:	f000 fa5b 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fa8:	201d      	movs	r0, #29
 8001faa:	f000 fa74 	bl	8002496 <HAL_NVIC_EnableIRQ>
}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40000400 	.word	0x40000400

08001fc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0310 	add.w	r3, r7, #16
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a0f      	ldr	r2, [pc, #60]	; (8002018 <HAL_TIM_MspPostInit+0x58>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d117      	bne.n	8002010 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe0:	4b0e      	ldr	r3, [pc, #56]	; (800201c <HAL_TIM_MspPostInit+0x5c>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4a0d      	ldr	r2, [pc, #52]	; (800201c <HAL_TIM_MspPostInit+0x5c>)
 8001fe6:	f043 0304 	orr.w	r3, r3, #4
 8001fea:	6193      	str	r3, [r2, #24]
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_TIM_MspPostInit+0x5c>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ff8:	2340      	movs	r3, #64	; 0x40
 8001ffa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002000:	2302      	movs	r3, #2
 8002002:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	4619      	mov	r1, r3
 800200a:	4805      	ldr	r0, [pc, #20]	; (8002020 <HAL_TIM_MspPostInit+0x60>)
 800200c:	f000 fa5e 	bl	80024cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002010:	bf00      	nop
 8002012:	3720      	adds	r7, #32
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40000400 	.word	0x40000400
 800201c:	40021000 	.word	0x40021000
 8002020:	40010800 	.word	0x40010800

08002024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0310 	add.w	r3, r7, #16
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a15      	ldr	r2, [pc, #84]	; (8002094 <HAL_UART_MspInit+0x70>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d123      	bne.n	800208c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002044:	4b14      	ldr	r3, [pc, #80]	; (8002098 <HAL_UART_MspInit+0x74>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	4a13      	ldr	r2, [pc, #76]	; (8002098 <HAL_UART_MspInit+0x74>)
 800204a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800204e:	61d3      	str	r3, [r2, #28]
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <HAL_UART_MspInit+0x74>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205c:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <HAL_UART_MspInit+0x74>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	4a0d      	ldr	r2, [pc, #52]	; (8002098 <HAL_UART_MspInit+0x74>)
 8002062:	f043 0304 	orr.w	r3, r3, #4
 8002066:	6193      	str	r3, [r2, #24]
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_UART_MspInit+0x74>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002074:	230c      	movs	r3, #12
 8002076:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2302      	movs	r3, #2
 800207e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002080:	f107 0310 	add.w	r3, r7, #16
 8002084:	4619      	mov	r1, r3
 8002086:	4805      	ldr	r0, [pc, #20]	; (800209c <HAL_UART_MspInit+0x78>)
 8002088:	f000 fa20 	bl	80024cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800208c:	bf00      	nop
 800208e:	3720      	adds	r7, #32
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40004400 	.word	0x40004400
 8002098:	40021000 	.word	0x40021000
 800209c:	40010800 	.word	0x40010800

080020a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <NMI_Handler+0x4>

080020a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020aa:	e7fe      	b.n	80020aa <HardFault_Handler+0x4>

080020ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <MemManage_Handler+0x4>

080020b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b6:	e7fe      	b.n	80020b6 <BusFault_Handler+0x4>

080020b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020bc:	e7fe      	b.n	80020bc <UsageFault_Handler+0x4>

080020be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr

080020d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr

080020e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e6:	f000 f8c7 	bl	8002278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <TIM2_IRQHandler+0x10>)
 80020f6:	f001 f8d3 	bl	80032a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000204 	.word	0x20000204

08002104 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <TIM3_IRQHandler+0x10>)
 800210a:	f001 f8c9 	bl	80032a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000144 	.word	0x20000144

08002118 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800211c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002120:	f000 fb88 	bl	8002834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}

08002128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002130:	4a14      	ldr	r2, [pc, #80]	; (8002184 <_sbrk+0x5c>)
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <_sbrk+0x60>)
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800213c:	4b13      	ldr	r3, [pc, #76]	; (800218c <_sbrk+0x64>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d102      	bne.n	800214a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <_sbrk+0x64>)
 8002146:	4a12      	ldr	r2, [pc, #72]	; (8002190 <_sbrk+0x68>)
 8002148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <_sbrk+0x64>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	429a      	cmp	r2, r3
 8002156:	d207      	bcs.n	8002168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002158:	f001 fff8 	bl	800414c <__errno>
 800215c:	4603      	mov	r3, r0
 800215e:	220c      	movs	r2, #12
 8002160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
 8002166:	e009      	b.n	800217c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <_sbrk+0x64>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <_sbrk+0x64>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	4a05      	ldr	r2, [pc, #20]	; (800218c <_sbrk+0x64>)
 8002178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800217a:	68fb      	ldr	r3, [r7, #12]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20005000 	.word	0x20005000
 8002188:	00000400 	.word	0x00000400
 800218c:	20000138 	.word	0x20000138
 8002190:	20000260 	.word	0x20000260

08002194 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021a0:	480c      	ldr	r0, [pc, #48]	; (80021d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021a2:	490d      	ldr	r1, [pc, #52]	; (80021d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021a4:	4a0d      	ldr	r2, [pc, #52]	; (80021dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a8:	e002      	b.n	80021b0 <LoopCopyDataInit>

080021aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ae:	3304      	adds	r3, #4

080021b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b4:	d3f9      	bcc.n	80021aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b6:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021b8:	4c0a      	ldr	r4, [pc, #40]	; (80021e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021bc:	e001      	b.n	80021c2 <LoopFillZerobss>

080021be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c0:	3204      	adds	r2, #4

080021c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c4:	d3fb      	bcc.n	80021be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021c6:	f7ff ffe5 	bl	8002194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ca:	f001 ffc5 	bl	8004158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021ce:	f7ff fbd3 	bl	8001978 <main>
  bx lr
 80021d2:	4770      	bx	lr
  ldr r0, =_sdata
 80021d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d8:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 80021dc:	08004ad0 	.word	0x08004ad0
  ldr r2, =_sbss
 80021e0:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 80021e4:	20000260 	.word	0x20000260

080021e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021e8:	e7fe      	b.n	80021e8 <ADC1_2_IRQHandler>
	...

080021ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_Init+0x28>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a07      	ldr	r2, [pc, #28]	; (8002214 <HAL_Init+0x28>)
 80021f6:	f043 0310 	orr.w	r3, r3, #16
 80021fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021fc:	2003      	movs	r0, #3
 80021fe:	f000 f923 	bl	8002448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002202:	2000      	movs	r0, #0
 8002204:	f000 f808 	bl	8002218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002208:	f7ff fe68 	bl	8001edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40022000 	.word	0x40022000

08002218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_InitTick+0x54>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_InitTick+0x58>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4619      	mov	r1, r3
 800222a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800222e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002232:	fbb2 f3f3 	udiv	r3, r2, r3
 8002236:	4618      	mov	r0, r3
 8002238:	f000 f93b 	bl	80024b2 <HAL_SYSTICK_Config>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e00e      	b.n	8002264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b0f      	cmp	r3, #15
 800224a:	d80a      	bhi.n	8002262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800224c:	2200      	movs	r2, #0
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	f04f 30ff 	mov.w	r0, #4294967295
 8002254:	f000 f903 	bl	800245e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002258:	4a06      	ldr	r2, [pc, #24]	; (8002274 <HAL_InitTick+0x5c>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	e000      	b.n	8002264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000050 	.word	0x20000050
 8002270:	20000058 	.word	0x20000058
 8002274:	20000054 	.word	0x20000054

08002278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_IncTick+0x1c>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HAL_IncTick+0x20>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4413      	add	r3, r2
 8002288:	4a03      	ldr	r2, [pc, #12]	; (8002298 <HAL_IncTick+0x20>)
 800228a:	6013      	str	r3, [r2, #0]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	20000058 	.word	0x20000058
 8002298:	2000024c 	.word	0x2000024c

0800229c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return uwTick;
 80022a0:	4b02      	ldr	r3, [pc, #8]	; (80022ac <HAL_GetTick+0x10>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	2000024c 	.word	0x2000024c

080022b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022cc:	4013      	ands	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e2:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	60d3      	str	r3, [r2, #12]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <__NVIC_GetPriorityGrouping+0x18>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 0307 	and.w	r3, r3, #7
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	2b00      	cmp	r3, #0
 8002324:	db0b      	blt.n	800233e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	4906      	ldr	r1, [pc, #24]	; (8002348 <__NVIC_EnableIRQ+0x34>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	2001      	movs	r0, #1
 8002336:	fa00 f202 	lsl.w	r2, r0, r2
 800233a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	e000e100 	.word	0xe000e100

0800234c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	2b00      	cmp	r3, #0
 800235e:	db0a      	blt.n	8002376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	490c      	ldr	r1, [pc, #48]	; (8002398 <__NVIC_SetPriority+0x4c>)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	0112      	lsls	r2, r2, #4
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	440b      	add	r3, r1
 8002370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002374:	e00a      	b.n	800238c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4908      	ldr	r1, [pc, #32]	; (800239c <__NVIC_SetPriority+0x50>)
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	3b04      	subs	r3, #4
 8002384:	0112      	lsls	r2, r2, #4
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	440b      	add	r3, r1
 800238a:	761a      	strb	r2, [r3, #24]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000e100 	.word	0xe000e100
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b089      	sub	sp, #36	; 0x24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f1c3 0307 	rsb	r3, r3, #7
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	bf28      	it	cs
 80023be:	2304      	movcs	r3, #4
 80023c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3304      	adds	r3, #4
 80023c6:	2b06      	cmp	r3, #6
 80023c8:	d902      	bls.n	80023d0 <NVIC_EncodePriority+0x30>
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3b03      	subs	r3, #3
 80023ce:	e000      	b.n	80023d2 <NVIC_EncodePriority+0x32>
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43da      	mvns	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	401a      	ands	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	43d9      	mvns	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	4313      	orrs	r3, r2
         );
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3724      	adds	r7, #36	; 0x24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3b01      	subs	r3, #1
 8002410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002414:	d301      	bcc.n	800241a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002416:	2301      	movs	r3, #1
 8002418:	e00f      	b.n	800243a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <SysTick_Config+0x40>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002422:	210f      	movs	r1, #15
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	f7ff ff90 	bl	800234c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <SysTick_Config+0x40>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002432:	4b04      	ldr	r3, [pc, #16]	; (8002444 <SysTick_Config+0x40>)
 8002434:	2207      	movs	r2, #7
 8002436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	e000e010 	.word	0xe000e010

08002448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ff2d 	bl	80022b0 <__NVIC_SetPriorityGrouping>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002470:	f7ff ff42 	bl	80022f8 <__NVIC_GetPriorityGrouping>
 8002474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	6978      	ldr	r0, [r7, #20]
 800247c:	f7ff ff90 	bl	80023a0 <NVIC_EncodePriority>
 8002480:	4602      	mov	r2, r0
 8002482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff5f 	bl	800234c <__NVIC_SetPriority>
}
 800248e:	bf00      	nop
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	4603      	mov	r3, r0
 800249e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff35 	bl	8002314 <__NVIC_EnableIRQ>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ffa2 	bl	8002404 <SysTick_Config>
 80024c0:	4603      	mov	r3, r0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b08b      	sub	sp, #44	; 0x2c
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024d6:	2300      	movs	r3, #0
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024da:	2300      	movs	r3, #0
 80024dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024de:	e169      	b.n	80027b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024e0:	2201      	movs	r2, #1
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69fa      	ldr	r2, [r7, #28]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	f040 8158 	bne.w	80027ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4a9a      	ldr	r2, [pc, #616]	; (800276c <HAL_GPIO_Init+0x2a0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d05e      	beq.n	80025c6 <HAL_GPIO_Init+0xfa>
 8002508:	4a98      	ldr	r2, [pc, #608]	; (800276c <HAL_GPIO_Init+0x2a0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d875      	bhi.n	80025fa <HAL_GPIO_Init+0x12e>
 800250e:	4a98      	ldr	r2, [pc, #608]	; (8002770 <HAL_GPIO_Init+0x2a4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d058      	beq.n	80025c6 <HAL_GPIO_Init+0xfa>
 8002514:	4a96      	ldr	r2, [pc, #600]	; (8002770 <HAL_GPIO_Init+0x2a4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d86f      	bhi.n	80025fa <HAL_GPIO_Init+0x12e>
 800251a:	4a96      	ldr	r2, [pc, #600]	; (8002774 <HAL_GPIO_Init+0x2a8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d052      	beq.n	80025c6 <HAL_GPIO_Init+0xfa>
 8002520:	4a94      	ldr	r2, [pc, #592]	; (8002774 <HAL_GPIO_Init+0x2a8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d869      	bhi.n	80025fa <HAL_GPIO_Init+0x12e>
 8002526:	4a94      	ldr	r2, [pc, #592]	; (8002778 <HAL_GPIO_Init+0x2ac>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d04c      	beq.n	80025c6 <HAL_GPIO_Init+0xfa>
 800252c:	4a92      	ldr	r2, [pc, #584]	; (8002778 <HAL_GPIO_Init+0x2ac>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d863      	bhi.n	80025fa <HAL_GPIO_Init+0x12e>
 8002532:	4a92      	ldr	r2, [pc, #584]	; (800277c <HAL_GPIO_Init+0x2b0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d046      	beq.n	80025c6 <HAL_GPIO_Init+0xfa>
 8002538:	4a90      	ldr	r2, [pc, #576]	; (800277c <HAL_GPIO_Init+0x2b0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d85d      	bhi.n	80025fa <HAL_GPIO_Init+0x12e>
 800253e:	2b12      	cmp	r3, #18
 8002540:	d82a      	bhi.n	8002598 <HAL_GPIO_Init+0xcc>
 8002542:	2b12      	cmp	r3, #18
 8002544:	d859      	bhi.n	80025fa <HAL_GPIO_Init+0x12e>
 8002546:	a201      	add	r2, pc, #4	; (adr r2, 800254c <HAL_GPIO_Init+0x80>)
 8002548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254c:	080025c7 	.word	0x080025c7
 8002550:	080025a1 	.word	0x080025a1
 8002554:	080025b3 	.word	0x080025b3
 8002558:	080025f5 	.word	0x080025f5
 800255c:	080025fb 	.word	0x080025fb
 8002560:	080025fb 	.word	0x080025fb
 8002564:	080025fb 	.word	0x080025fb
 8002568:	080025fb 	.word	0x080025fb
 800256c:	080025fb 	.word	0x080025fb
 8002570:	080025fb 	.word	0x080025fb
 8002574:	080025fb 	.word	0x080025fb
 8002578:	080025fb 	.word	0x080025fb
 800257c:	080025fb 	.word	0x080025fb
 8002580:	080025fb 	.word	0x080025fb
 8002584:	080025fb 	.word	0x080025fb
 8002588:	080025fb 	.word	0x080025fb
 800258c:	080025fb 	.word	0x080025fb
 8002590:	080025a9 	.word	0x080025a9
 8002594:	080025bd 	.word	0x080025bd
 8002598:	4a79      	ldr	r2, [pc, #484]	; (8002780 <HAL_GPIO_Init+0x2b4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d013      	beq.n	80025c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800259e:	e02c      	b.n	80025fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	623b      	str	r3, [r7, #32]
          break;
 80025a6:	e029      	b.n	80025fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	3304      	adds	r3, #4
 80025ae:	623b      	str	r3, [r7, #32]
          break;
 80025b0:	e024      	b.n	80025fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	3308      	adds	r3, #8
 80025b8:	623b      	str	r3, [r7, #32]
          break;
 80025ba:	e01f      	b.n	80025fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	330c      	adds	r3, #12
 80025c2:	623b      	str	r3, [r7, #32]
          break;
 80025c4:	e01a      	b.n	80025fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d102      	bne.n	80025d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025ce:	2304      	movs	r3, #4
 80025d0:	623b      	str	r3, [r7, #32]
          break;
 80025d2:	e013      	b.n	80025fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d105      	bne.n	80025e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025dc:	2308      	movs	r3, #8
 80025de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	611a      	str	r2, [r3, #16]
          break;
 80025e6:	e009      	b.n	80025fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025e8:	2308      	movs	r3, #8
 80025ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	615a      	str	r2, [r3, #20]
          break;
 80025f2:	e003      	b.n	80025fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
          break;
 80025f8:	e000      	b.n	80025fc <HAL_GPIO_Init+0x130>
          break;
 80025fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2bff      	cmp	r3, #255	; 0xff
 8002600:	d801      	bhi.n	8002606 <HAL_GPIO_Init+0x13a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	e001      	b.n	800260a <HAL_GPIO_Init+0x13e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3304      	adds	r3, #4
 800260a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	2bff      	cmp	r3, #255	; 0xff
 8002610:	d802      	bhi.n	8002618 <HAL_GPIO_Init+0x14c>
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	e002      	b.n	800261e <HAL_GPIO_Init+0x152>
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	3b08      	subs	r3, #8
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	210f      	movs	r1, #15
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	fa01 f303 	lsl.w	r3, r1, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	401a      	ands	r2, r3
 8002630:	6a39      	ldr	r1, [r7, #32]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	fa01 f303 	lsl.w	r3, r1, r3
 8002638:	431a      	orrs	r2, r3
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 80b1 	beq.w	80027ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800264c:	4b4d      	ldr	r3, [pc, #308]	; (8002784 <HAL_GPIO_Init+0x2b8>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	4a4c      	ldr	r2, [pc, #304]	; (8002784 <HAL_GPIO_Init+0x2b8>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6193      	str	r3, [r2, #24]
 8002658:	4b4a      	ldr	r3, [pc, #296]	; (8002784 <HAL_GPIO_Init+0x2b8>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002664:	4a48      	ldr	r2, [pc, #288]	; (8002788 <HAL_GPIO_Init+0x2bc>)
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	089b      	lsrs	r3, r3, #2
 800266a:	3302      	adds	r3, #2
 800266c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002670:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	220f      	movs	r2, #15
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	4013      	ands	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a40      	ldr	r2, [pc, #256]	; (800278c <HAL_GPIO_Init+0x2c0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d013      	beq.n	80026b8 <HAL_GPIO_Init+0x1ec>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a3f      	ldr	r2, [pc, #252]	; (8002790 <HAL_GPIO_Init+0x2c4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d00d      	beq.n	80026b4 <HAL_GPIO_Init+0x1e8>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a3e      	ldr	r2, [pc, #248]	; (8002794 <HAL_GPIO_Init+0x2c8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d007      	beq.n	80026b0 <HAL_GPIO_Init+0x1e4>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a3d      	ldr	r2, [pc, #244]	; (8002798 <HAL_GPIO_Init+0x2cc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d101      	bne.n	80026ac <HAL_GPIO_Init+0x1e0>
 80026a8:	2303      	movs	r3, #3
 80026aa:	e006      	b.n	80026ba <HAL_GPIO_Init+0x1ee>
 80026ac:	2304      	movs	r3, #4
 80026ae:	e004      	b.n	80026ba <HAL_GPIO_Init+0x1ee>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e002      	b.n	80026ba <HAL_GPIO_Init+0x1ee>
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <HAL_GPIO_Init+0x1ee>
 80026b8:	2300      	movs	r3, #0
 80026ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026bc:	f002 0203 	and.w	r2, r2, #3
 80026c0:	0092      	lsls	r2, r2, #2
 80026c2:	4093      	lsls	r3, r2
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026ca:	492f      	ldr	r1, [pc, #188]	; (8002788 <HAL_GPIO_Init+0x2bc>)
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	089b      	lsrs	r3, r3, #2
 80026d0:	3302      	adds	r3, #2
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d006      	beq.n	80026f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026e4:	4b2d      	ldr	r3, [pc, #180]	; (800279c <HAL_GPIO_Init+0x2d0>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	492c      	ldr	r1, [pc, #176]	; (800279c <HAL_GPIO_Init+0x2d0>)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	600b      	str	r3, [r1, #0]
 80026f0:	e006      	b.n	8002700 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026f2:	4b2a      	ldr	r3, [pc, #168]	; (800279c <HAL_GPIO_Init+0x2d0>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	4928      	ldr	r1, [pc, #160]	; (800279c <HAL_GPIO_Init+0x2d0>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d006      	beq.n	800271a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_GPIO_Init+0x2d0>)
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	4922      	ldr	r1, [pc, #136]	; (800279c <HAL_GPIO_Init+0x2d0>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
 8002718:	e006      	b.n	8002728 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800271a:	4b20      	ldr	r3, [pc, #128]	; (800279c <HAL_GPIO_Init+0x2d0>)
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	43db      	mvns	r3, r3
 8002722:	491e      	ldr	r1, [pc, #120]	; (800279c <HAL_GPIO_Init+0x2d0>)
 8002724:	4013      	ands	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d006      	beq.n	8002742 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_GPIO_Init+0x2d0>)
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	4918      	ldr	r1, [pc, #96]	; (800279c <HAL_GPIO_Init+0x2d0>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	608b      	str	r3, [r1, #8]
 8002740:	e006      	b.n	8002750 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002742:	4b16      	ldr	r3, [pc, #88]	; (800279c <HAL_GPIO_Init+0x2d0>)
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	43db      	mvns	r3, r3
 800274a:	4914      	ldr	r1, [pc, #80]	; (800279c <HAL_GPIO_Init+0x2d0>)
 800274c:	4013      	ands	r3, r2
 800274e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d021      	beq.n	80027a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <HAL_GPIO_Init+0x2d0>)
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	490e      	ldr	r1, [pc, #56]	; (800279c <HAL_GPIO_Init+0x2d0>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	60cb      	str	r3, [r1, #12]
 8002768:	e021      	b.n	80027ae <HAL_GPIO_Init+0x2e2>
 800276a:	bf00      	nop
 800276c:	10320000 	.word	0x10320000
 8002770:	10310000 	.word	0x10310000
 8002774:	10220000 	.word	0x10220000
 8002778:	10210000 	.word	0x10210000
 800277c:	10120000 	.word	0x10120000
 8002780:	10110000 	.word	0x10110000
 8002784:	40021000 	.word	0x40021000
 8002788:	40010000 	.word	0x40010000
 800278c:	40010800 	.word	0x40010800
 8002790:	40010c00 	.word	0x40010c00
 8002794:	40011000 	.word	0x40011000
 8002798:	40011400 	.word	0x40011400
 800279c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_GPIO_Init+0x304>)
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	4909      	ldr	r1, [pc, #36]	; (80027d0 <HAL_GPIO_Init+0x304>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	3301      	adds	r3, #1
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	fa22 f303 	lsr.w	r3, r2, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f47f ae8e 	bne.w	80024e0 <HAL_GPIO_Init+0x14>
  }
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop
 80027c8:	372c      	adds	r7, #44	; 0x2c
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	40010400 	.word	0x40010400

080027d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	887b      	ldrh	r3, [r7, #2]
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
 80027f0:	e001      	b.n	80027f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	460b      	mov	r3, r1
 800280c:	807b      	strh	r3, [r7, #2]
 800280e:	4613      	mov	r3, r2
 8002810:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002812:	787b      	ldrb	r3, [r7, #1]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002818:	887a      	ldrh	r2, [r7, #2]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800281e:	e003      	b.n	8002828 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002820:	887b      	ldrh	r3, [r7, #2]
 8002822:	041a      	lsls	r2, r3, #16
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	611a      	str	r2, [r3, #16]
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
	...

08002834 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	88fb      	ldrh	r3, [r7, #6]
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d006      	beq.n	8002858 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800284a:	4a05      	ldr	r2, [pc, #20]	; (8002860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002850:	88fb      	ldrh	r3, [r7, #6]
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f806 	bl	8002864 <HAL_GPIO_EXTI_Callback>
  }
}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40010400 	.word	0x40010400

08002864 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e26c      	b.n	8002d64 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 8087 	beq.w	80029a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002898:	4b92      	ldr	r3, [pc, #584]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 030c 	and.w	r3, r3, #12
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d00c      	beq.n	80028be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028a4:	4b8f      	ldr	r3, [pc, #572]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d112      	bne.n	80028d6 <HAL_RCC_OscConfig+0x5e>
 80028b0:	4b8c      	ldr	r3, [pc, #560]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028bc:	d10b      	bne.n	80028d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028be:	4b89      	ldr	r3, [pc, #548]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d06c      	beq.n	80029a4 <HAL_RCC_OscConfig+0x12c>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d168      	bne.n	80029a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e246      	b.n	8002d64 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028de:	d106      	bne.n	80028ee <HAL_RCC_OscConfig+0x76>
 80028e0:	4b80      	ldr	r3, [pc, #512]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a7f      	ldr	r2, [pc, #508]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	e02e      	b.n	800294c <HAL_RCC_OscConfig+0xd4>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10c      	bne.n	8002910 <HAL_RCC_OscConfig+0x98>
 80028f6:	4b7b      	ldr	r3, [pc, #492]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a7a      	ldr	r2, [pc, #488]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	4b78      	ldr	r3, [pc, #480]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a77      	ldr	r2, [pc, #476]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002908:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	e01d      	b.n	800294c <HAL_RCC_OscConfig+0xd4>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002918:	d10c      	bne.n	8002934 <HAL_RCC_OscConfig+0xbc>
 800291a:	4b72      	ldr	r3, [pc, #456]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a71      	ldr	r2, [pc, #452]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	4b6f      	ldr	r3, [pc, #444]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a6e      	ldr	r2, [pc, #440]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 800292c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	e00b      	b.n	800294c <HAL_RCC_OscConfig+0xd4>
 8002934:	4b6b      	ldr	r3, [pc, #428]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a6a      	ldr	r2, [pc, #424]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 800293a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	4b68      	ldr	r3, [pc, #416]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a67      	ldr	r2, [pc, #412]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800294a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d013      	beq.n	800297c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7ff fca2 	bl	800229c <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800295c:	f7ff fc9e 	bl	800229c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e1fa      	b.n	8002d64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296e:	4b5d      	ldr	r3, [pc, #372]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0xe4>
 800297a:	e014      	b.n	80029a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7ff fc8e 	bl	800229c <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002984:	f7ff fc8a 	bl	800229c <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	; 0x64
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e1e6      	b.n	8002d64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002996:	4b53      	ldr	r3, [pc, #332]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x10c>
 80029a2:	e000      	b.n	80029a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d063      	beq.n	8002a7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029b2:	4b4c      	ldr	r3, [pc, #304]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00b      	beq.n	80029d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029be:	4b49      	ldr	r3, [pc, #292]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d11c      	bne.n	8002a04 <HAL_RCC_OscConfig+0x18c>
 80029ca:	4b46      	ldr	r3, [pc, #280]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d116      	bne.n	8002a04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d6:	4b43      	ldr	r3, [pc, #268]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <HAL_RCC_OscConfig+0x176>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d001      	beq.n	80029ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e1ba      	b.n	8002d64 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ee:	4b3d      	ldr	r3, [pc, #244]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4939      	ldr	r1, [pc, #228]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a02:	e03a      	b.n	8002a7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d020      	beq.n	8002a4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a0c:	4b36      	ldr	r3, [pc, #216]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a12:	f7ff fc43 	bl	800229c <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a1a:	f7ff fc3f 	bl	800229c <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e19b      	b.n	8002d64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2c:	4b2d      	ldr	r3, [pc, #180]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a38:	4b2a      	ldr	r3, [pc, #168]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4927      	ldr	r1, [pc, #156]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	600b      	str	r3, [r1, #0]
 8002a4c:	e015      	b.n	8002a7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a4e:	4b26      	ldr	r3, [pc, #152]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7ff fc22 	bl	800229c <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a5c:	f7ff fc1e 	bl	800229c <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e17a      	b.n	8002d64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d03a      	beq.n	8002afc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d019      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8e:	4b17      	ldr	r3, [pc, #92]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a94:	f7ff fc02 	bl	800229c <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a9c:	f7ff fbfe 	bl	800229c <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e15a      	b.n	8002d64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aae:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002aba:	2001      	movs	r0, #1
 8002abc:	f000 fad8 	bl	8003070 <RCC_Delay>
 8002ac0:	e01c      	b.n	8002afc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac8:	f7ff fbe8 	bl	800229c <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ace:	e00f      	b.n	8002af0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad0:	f7ff fbe4 	bl	800229c <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d908      	bls.n	8002af0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e140      	b.n	8002d64 <HAL_RCC_OscConfig+0x4ec>
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	42420000 	.word	0x42420000
 8002aec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af0:	4b9e      	ldr	r3, [pc, #632]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1e9      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80a6 	beq.w	8002c56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b0e:	4b97      	ldr	r3, [pc, #604]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10d      	bne.n	8002b36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b1a:	4b94      	ldr	r3, [pc, #592]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	4a93      	ldr	r2, [pc, #588]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b24:	61d3      	str	r3, [r2, #28]
 8002b26:	4b91      	ldr	r3, [pc, #580]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b32:	2301      	movs	r3, #1
 8002b34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b36:	4b8e      	ldr	r3, [pc, #568]	; (8002d70 <HAL_RCC_OscConfig+0x4f8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d118      	bne.n	8002b74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b42:	4b8b      	ldr	r3, [pc, #556]	; (8002d70 <HAL_RCC_OscConfig+0x4f8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a8a      	ldr	r2, [pc, #552]	; (8002d70 <HAL_RCC_OscConfig+0x4f8>)
 8002b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b4e:	f7ff fba5 	bl	800229c <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b56:	f7ff fba1 	bl	800229c <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b64      	cmp	r3, #100	; 0x64
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e0fd      	b.n	8002d64 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b68:	4b81      	ldr	r3, [pc, #516]	; (8002d70 <HAL_RCC_OscConfig+0x4f8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d106      	bne.n	8002b8a <HAL_RCC_OscConfig+0x312>
 8002b7c:	4b7b      	ldr	r3, [pc, #492]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	4a7a      	ldr	r2, [pc, #488]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	6213      	str	r3, [r2, #32]
 8002b88:	e02d      	b.n	8002be6 <HAL_RCC_OscConfig+0x36e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10c      	bne.n	8002bac <HAL_RCC_OscConfig+0x334>
 8002b92:	4b76      	ldr	r3, [pc, #472]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	4a75      	ldr	r2, [pc, #468]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	6213      	str	r3, [r2, #32]
 8002b9e:	4b73      	ldr	r3, [pc, #460]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	4a72      	ldr	r2, [pc, #456]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002ba4:	f023 0304 	bic.w	r3, r3, #4
 8002ba8:	6213      	str	r3, [r2, #32]
 8002baa:	e01c      	b.n	8002be6 <HAL_RCC_OscConfig+0x36e>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d10c      	bne.n	8002bce <HAL_RCC_OscConfig+0x356>
 8002bb4:	4b6d      	ldr	r3, [pc, #436]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	4a6c      	ldr	r2, [pc, #432]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002bba:	f043 0304 	orr.w	r3, r3, #4
 8002bbe:	6213      	str	r3, [r2, #32]
 8002bc0:	4b6a      	ldr	r3, [pc, #424]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	4a69      	ldr	r2, [pc, #420]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6213      	str	r3, [r2, #32]
 8002bcc:	e00b      	b.n	8002be6 <HAL_RCC_OscConfig+0x36e>
 8002bce:	4b67      	ldr	r3, [pc, #412]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	4a66      	ldr	r2, [pc, #408]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	6213      	str	r3, [r2, #32]
 8002bda:	4b64      	ldr	r3, [pc, #400]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4a63      	ldr	r2, [pc, #396]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002be0:	f023 0304 	bic.w	r3, r3, #4
 8002be4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d015      	beq.n	8002c1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bee:	f7ff fb55 	bl	800229c <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf4:	e00a      	b.n	8002c0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7ff fb51 	bl	800229c <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e0ab      	b.n	8002d64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0c:	4b57      	ldr	r3, [pc, #348]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0ee      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x37e>
 8002c18:	e014      	b.n	8002c44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1a:	f7ff fb3f 	bl	800229c <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c20:	e00a      	b.n	8002c38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c22:	f7ff fb3b 	bl	800229c <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e095      	b.n	8002d64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c38:	4b4c      	ldr	r3, [pc, #304]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1ee      	bne.n	8002c22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d105      	bne.n	8002c56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c4a:	4b48      	ldr	r3, [pc, #288]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	4a47      	ldr	r2, [pc, #284]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 8081 	beq.w	8002d62 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c60:	4b42      	ldr	r3, [pc, #264]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 030c 	and.w	r3, r3, #12
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d061      	beq.n	8002d30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d146      	bne.n	8002d02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c74:	4b3f      	ldr	r3, [pc, #252]	; (8002d74 <HAL_RCC_OscConfig+0x4fc>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7a:	f7ff fb0f 	bl	800229c <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c82:	f7ff fb0b 	bl	800229c <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e067      	b.n	8002d64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c94:	4b35      	ldr	r3, [pc, #212]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1f0      	bne.n	8002c82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca8:	d108      	bne.n	8002cbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002caa:	4b30      	ldr	r3, [pc, #192]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	492d      	ldr	r1, [pc, #180]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cbc:	4b2b      	ldr	r3, [pc, #172]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a19      	ldr	r1, [r3, #32]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	4927      	ldr	r1, [pc, #156]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd4:	4b27      	ldr	r3, [pc, #156]	; (8002d74 <HAL_RCC_OscConfig+0x4fc>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cda:	f7ff fadf 	bl	800229c <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce2:	f7ff fadb 	bl	800229c <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e037      	b.n	8002d64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cf4:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x46a>
 8002d00:	e02f      	b.n	8002d62 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d02:	4b1c      	ldr	r3, [pc, #112]	; (8002d74 <HAL_RCC_OscConfig+0x4fc>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d08:	f7ff fac8 	bl	800229c <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d10:	f7ff fac4 	bl	800229c <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e020      	b.n	8002d64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d22:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x498>
 8002d2e:	e018      	b.n	8002d62 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e013      	b.n	8002d64 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <HAL_RCC_OscConfig+0x4f4>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d106      	bne.n	8002d5e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d001      	beq.n	8002d62 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40007000 	.word	0x40007000
 8002d74:	42420060 	.word	0x42420060

08002d78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0d0      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d8c:	4b6a      	ldr	r3, [pc, #424]	; (8002f38 <HAL_RCC_ClockConfig+0x1c0>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d910      	bls.n	8002dbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9a:	4b67      	ldr	r3, [pc, #412]	; (8002f38 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 0207 	bic.w	r2, r3, #7
 8002da2:	4965      	ldr	r1, [pc, #404]	; (8002f38 <HAL_RCC_ClockConfig+0x1c0>)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b63      	ldr	r3, [pc, #396]	; (8002f38 <HAL_RCC_ClockConfig+0x1c0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0b8      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d020      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd4:	4b59      	ldr	r3, [pc, #356]	; (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	4a58      	ldr	r2, [pc, #352]	; (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002dda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dec:	4b53      	ldr	r3, [pc, #332]	; (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4a52      	ldr	r2, [pc, #328]	; (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002df2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002df6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df8:	4b50      	ldr	r3, [pc, #320]	; (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	494d      	ldr	r1, [pc, #308]	; (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d040      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d107      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1e:	4b47      	ldr	r3, [pc, #284]	; (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d115      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e07f      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d107      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e36:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e073      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e46:	4b3d      	ldr	r3, [pc, #244]	; (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e06b      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e56:	4b39      	ldr	r3, [pc, #228]	; (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f023 0203 	bic.w	r2, r3, #3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	4936      	ldr	r1, [pc, #216]	; (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e68:	f7ff fa18 	bl	800229c <HAL_GetTick>
 8002e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6e:	e00a      	b.n	8002e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e70:	f7ff fa14 	bl	800229c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e053      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e86:	4b2d      	ldr	r3, [pc, #180]	; (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f003 020c 	and.w	r2, r3, #12
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d1eb      	bne.n	8002e70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e98:	4b27      	ldr	r3, [pc, #156]	; (8002f38 <HAL_RCC_ClockConfig+0x1c0>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d210      	bcs.n	8002ec8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea6:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 0207 	bic.w	r2, r3, #7
 8002eae:	4922      	ldr	r1, [pc, #136]	; (8002f38 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb6:	4b20      	ldr	r3, [pc, #128]	; (8002f38 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e032      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed4:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4916      	ldr	r1, [pc, #88]	; (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d009      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ef2:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	490e      	ldr	r1, [pc, #56]	; (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f06:	f000 f821 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	490a      	ldr	r1, [pc, #40]	; (8002f40 <HAL_RCC_ClockConfig+0x1c8>)
 8002f18:	5ccb      	ldrb	r3, [r1, r3]
 8002f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1e:	4a09      	ldr	r2, [pc, #36]	; (8002f44 <HAL_RCC_ClockConfig+0x1cc>)
 8002f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <HAL_RCC_ClockConfig+0x1d0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff f976 	bl	8002218 <HAL_InitTick>

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40022000 	.word	0x40022000
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	08004a7c 	.word	0x08004a7c
 8002f44:	20000050 	.word	0x20000050
 8002f48:	20000054 	.word	0x20000054

08002f4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f4c:	b490      	push	{r4, r7}
 8002f4e:	b08a      	sub	sp, #40	; 0x28
 8002f50:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f52:	4b2a      	ldr	r3, [pc, #168]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f54:	1d3c      	adds	r4, r7, #4
 8002f56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f5c:	f240 2301 	movw	r3, #513	; 0x201
 8002f60:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
 8002f66:	2300      	movs	r3, #0
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f76:	4b22      	ldr	r3, [pc, #136]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d002      	beq.n	8002f8c <HAL_RCC_GetSysClockFreq+0x40>
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d003      	beq.n	8002f92 <HAL_RCC_GetSysClockFreq+0x46>
 8002f8a:	e02d      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f8c:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f8e:	623b      	str	r3, [r7, #32]
      break;
 8002f90:	e02d      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	0c9b      	lsrs	r3, r3, #18
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fa4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d013      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fb0:	4b13      	ldr	r3, [pc, #76]	; (8003000 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	0c5b      	lsrs	r3, r3, #17
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fc4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	4a0e      	ldr	r2, [pc, #56]	; (8003004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fca:	fb02 f203 	mul.w	r2, r2, r3
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd6:	e004      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	4a0b      	ldr	r2, [pc, #44]	; (8003008 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fdc:	fb02 f303 	mul.w	r3, r2, r3
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	623b      	str	r3, [r7, #32]
      break;
 8002fe6:	e002      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fea:	623b      	str	r3, [r7, #32]
      break;
 8002fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fee:	6a3b      	ldr	r3, [r7, #32]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3728      	adds	r7, #40	; 0x28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc90      	pop	{r4, r7}
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	08004a6c 	.word	0x08004a6c
 8003000:	40021000 	.word	0x40021000
 8003004:	007a1200 	.word	0x007a1200
 8003008:	003d0900 	.word	0x003d0900

0800300c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003010:	4b02      	ldr	r3, [pc, #8]	; (800301c <HAL_RCC_GetHCLKFreq+0x10>)
 8003012:	681b      	ldr	r3, [r3, #0]
}
 8003014:	4618      	mov	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	20000050 	.word	0x20000050

08003020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003024:	f7ff fff2 	bl	800300c <HAL_RCC_GetHCLKFreq>
 8003028:	4602      	mov	r2, r0
 800302a:	4b05      	ldr	r3, [pc, #20]	; (8003040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	0a1b      	lsrs	r3, r3, #8
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	4903      	ldr	r1, [pc, #12]	; (8003044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003036:	5ccb      	ldrb	r3, [r1, r3]
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800303c:	4618      	mov	r0, r3
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40021000 	.word	0x40021000
 8003044:	08004a8c 	.word	0x08004a8c

08003048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800304c:	f7ff ffde 	bl	800300c <HAL_RCC_GetHCLKFreq>
 8003050:	4602      	mov	r2, r0
 8003052:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	0adb      	lsrs	r3, r3, #11
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	4903      	ldr	r1, [pc, #12]	; (800306c <HAL_RCC_GetPCLK2Freq+0x24>)
 800305e:	5ccb      	ldrb	r3, [r1, r3]
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000
 800306c:	08004a8c 	.word	0x08004a8c

08003070 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003078:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <RCC_Delay+0x34>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <RCC_Delay+0x38>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	0a5b      	lsrs	r3, r3, #9
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	fb02 f303 	mul.w	r3, r2, r3
 800308a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800308c:	bf00      	nop
  }
  while (Delay --);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1e5a      	subs	r2, r3, #1
 8003092:	60fa      	str	r2, [r7, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f9      	bne.n	800308c <RCC_Delay+0x1c>
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr
 80030a4:	20000050 	.word	0x20000050
 80030a8:	10624dd3 	.word	0x10624dd3

080030ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e041      	b.n	8003142 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fe ff34 	bl	8001f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3304      	adds	r3, #4
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f000 fb86 	bl	80037fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	d001      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e03a      	b.n	80031da <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a18      	ldr	r2, [pc, #96]	; (80031e4 <HAL_TIM_Base_Start_IT+0x98>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00e      	beq.n	80031a4 <HAL_TIM_Base_Start_IT+0x58>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318e:	d009      	beq.n	80031a4 <HAL_TIM_Base_Start_IT+0x58>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a14      	ldr	r2, [pc, #80]	; (80031e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d004      	beq.n	80031a4 <HAL_TIM_Base_Start_IT+0x58>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a13      	ldr	r2, [pc, #76]	; (80031ec <HAL_TIM_Base_Start_IT+0xa0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d111      	bne.n	80031c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b06      	cmp	r3, #6
 80031b4:	d010      	beq.n	80031d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0201 	orr.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c6:	e007      	b.n	80031d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr
 80031e4:	40012c00 	.word	0x40012c00
 80031e8:	40000400 	.word	0x40000400
 80031ec:	40000800 	.word	0x40000800

080031f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e041      	b.n	8003286 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f839 	bl	800328e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3304      	adds	r3, #4
 800322c:	4619      	mov	r1, r3
 800322e:	4610      	mov	r0, r2
 8003230:	f000 fae4 	bl	80037fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d122      	bne.n	80032fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d11b      	bne.n	80032fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0202 	mvn.w	r2, #2
 80032cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fa6f 	bl	80037c6 <HAL_TIM_IC_CaptureCallback>
 80032e8:	e005      	b.n	80032f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fa62 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fa71 	bl	80037d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b04      	cmp	r3, #4
 8003308:	d122      	bne.n	8003350 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b04      	cmp	r3, #4
 8003316:	d11b      	bne.n	8003350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0204 	mvn.w	r2, #4
 8003320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2202      	movs	r2, #2
 8003326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fa45 	bl	80037c6 <HAL_TIM_IC_CaptureCallback>
 800333c:	e005      	b.n	800334a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fa38 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fa47 	bl	80037d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b08      	cmp	r3, #8
 800335c:	d122      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b08      	cmp	r3, #8
 800336a:	d11b      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0208 	mvn.w	r2, #8
 8003374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2204      	movs	r2, #4
 800337a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fa1b 	bl	80037c6 <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fa0e 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fa1d 	bl	80037d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b10      	cmp	r3, #16
 80033b0:	d122      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b10      	cmp	r3, #16
 80033be:	d11b      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0210 	mvn.w	r2, #16
 80033c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2208      	movs	r2, #8
 80033ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f9f1 	bl	80037c6 <HAL_TIM_IC_CaptureCallback>
 80033e4:	e005      	b.n	80033f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f9e4 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f9f3 	bl	80037d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b01      	cmp	r3, #1
 8003404:	d10e      	bne.n	8003424 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b01      	cmp	r3, #1
 8003412:	d107      	bne.n	8003424 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0201 	mvn.w	r2, #1
 800341c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fe fc96 	bl	8001d50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342e:	2b80      	cmp	r3, #128	; 0x80
 8003430:	d10e      	bne.n	8003450 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343c:	2b80      	cmp	r3, #128	; 0x80
 800343e:	d107      	bne.n	8003450 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fcbd 	bl	8003dca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b40      	cmp	r3, #64	; 0x40
 800345c:	d10e      	bne.n	800347c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003468:	2b40      	cmp	r3, #64	; 0x40
 800346a:	d107      	bne.n	800347c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f9b7 	bl	80037ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b20      	cmp	r3, #32
 8003488:	d10e      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b20      	cmp	r3, #32
 8003496:	d107      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0220 	mvn.w	r2, #32
 80034a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fc88 	bl	8003db8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e0ac      	b.n	8003624 <HAL_TIM_PWM_ConfigChannel+0x174>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b0c      	cmp	r3, #12
 80034d6:	f200 809f 	bhi.w	8003618 <HAL_TIM_PWM_ConfigChannel+0x168>
 80034da:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80034dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e0:	08003515 	.word	0x08003515
 80034e4:	08003619 	.word	0x08003619
 80034e8:	08003619 	.word	0x08003619
 80034ec:	08003619 	.word	0x08003619
 80034f0:	08003555 	.word	0x08003555
 80034f4:	08003619 	.word	0x08003619
 80034f8:	08003619 	.word	0x08003619
 80034fc:	08003619 	.word	0x08003619
 8003500:	08003597 	.word	0x08003597
 8003504:	08003619 	.word	0x08003619
 8003508:	08003619 	.word	0x08003619
 800350c:	08003619 	.word	0x08003619
 8003510:	080035d7 	.word	0x080035d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	4618      	mov	r0, r3
 800351c:	f000 f9d0 	bl	80038c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0208 	orr.w	r2, r2, #8
 800352e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0204 	bic.w	r2, r2, #4
 800353e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6999      	ldr	r1, [r3, #24]
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	691a      	ldr	r2, [r3, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	619a      	str	r2, [r3, #24]
      break;
 8003552:	e062      	b.n	800361a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fa16 	bl	800398c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699a      	ldr	r2, [r3, #24]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800356e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800357e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6999      	ldr	r1, [r3, #24]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	021a      	lsls	r2, r3, #8
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	619a      	str	r2, [r3, #24]
      break;
 8003594:	e041      	b.n	800361a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68b9      	ldr	r1, [r7, #8]
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fa5f 	bl	8003a60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	69da      	ldr	r2, [r3, #28]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0208 	orr.w	r2, r2, #8
 80035b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0204 	bic.w	r2, r2, #4
 80035c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69d9      	ldr	r1, [r3, #28]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	61da      	str	r2, [r3, #28]
      break;
 80035d4:	e021      	b.n	800361a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68b9      	ldr	r1, [r7, #8]
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 faa9 	bl	8003b34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69da      	ldr	r2, [r3, #28]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69d9      	ldr	r1, [r3, #28]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	021a      	lsls	r2, r3, #8
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	61da      	str	r2, [r3, #28]
      break;
 8003616:	e000      	b.n	800361a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003618:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_TIM_ConfigClockSource+0x18>
 8003640:	2302      	movs	r3, #2
 8003642:	e0b3      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x180>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003662:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800366a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800367c:	d03e      	beq.n	80036fc <HAL_TIM_ConfigClockSource+0xd0>
 800367e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003682:	f200 8087 	bhi.w	8003794 <HAL_TIM_ConfigClockSource+0x168>
 8003686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800368a:	f000 8085 	beq.w	8003798 <HAL_TIM_ConfigClockSource+0x16c>
 800368e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003692:	d87f      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x168>
 8003694:	2b70      	cmp	r3, #112	; 0x70
 8003696:	d01a      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0xa2>
 8003698:	2b70      	cmp	r3, #112	; 0x70
 800369a:	d87b      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x168>
 800369c:	2b60      	cmp	r3, #96	; 0x60
 800369e:	d050      	beq.n	8003742 <HAL_TIM_ConfigClockSource+0x116>
 80036a0:	2b60      	cmp	r3, #96	; 0x60
 80036a2:	d877      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x168>
 80036a4:	2b50      	cmp	r3, #80	; 0x50
 80036a6:	d03c      	beq.n	8003722 <HAL_TIM_ConfigClockSource+0xf6>
 80036a8:	2b50      	cmp	r3, #80	; 0x50
 80036aa:	d873      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x168>
 80036ac:	2b40      	cmp	r3, #64	; 0x40
 80036ae:	d058      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0x136>
 80036b0:	2b40      	cmp	r3, #64	; 0x40
 80036b2:	d86f      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x168>
 80036b4:	2b30      	cmp	r3, #48	; 0x30
 80036b6:	d064      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x156>
 80036b8:	2b30      	cmp	r3, #48	; 0x30
 80036ba:	d86b      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x168>
 80036bc:	2b20      	cmp	r3, #32
 80036be:	d060      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x156>
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	d867      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x168>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d05c      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x156>
 80036c8:	2b10      	cmp	r3, #16
 80036ca:	d05a      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80036cc:	e062      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	6899      	ldr	r1, [r3, #8]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f000 faee 	bl	8003cbe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	609a      	str	r2, [r3, #8]
      break;
 80036fa:	e04e      	b.n	800379a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	6899      	ldr	r1, [r3, #8]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f000 fad7 	bl	8003cbe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800371e:	609a      	str	r2, [r3, #8]
      break;
 8003720:	e03b      	b.n	800379a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	6859      	ldr	r1, [r3, #4]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	461a      	mov	r2, r3
 8003730:	f000 fa4e 	bl	8003bd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2150      	movs	r1, #80	; 0x50
 800373a:	4618      	mov	r0, r3
 800373c:	f000 faa5 	bl	8003c8a <TIM_ITRx_SetConfig>
      break;
 8003740:	e02b      	b.n	800379a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	6859      	ldr	r1, [r3, #4]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	461a      	mov	r2, r3
 8003750:	f000 fa6c 	bl	8003c2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2160      	movs	r1, #96	; 0x60
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fa95 	bl	8003c8a <TIM_ITRx_SetConfig>
      break;
 8003760:	e01b      	b.n	800379a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6859      	ldr	r1, [r3, #4]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	461a      	mov	r2, r3
 8003770:	f000 fa2e 	bl	8003bd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2140      	movs	r1, #64	; 0x40
 800377a:	4618      	mov	r0, r3
 800377c:	f000 fa85 	bl	8003c8a <TIM_ITRx_SetConfig>
      break;
 8003780:	e00b      	b.n	800379a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f000 fa7c 	bl	8003c8a <TIM_ITRx_SetConfig>
        break;
 8003792:	e002      	b.n	800379a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003794:	bf00      	nop
 8003796:	e000      	b.n	800379a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003798:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr

080037c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr

080037d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr

080037ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a29      	ldr	r2, [pc, #164]	; (80038b4 <TIM_Base_SetConfig+0xb8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00b      	beq.n	800382c <TIM_Base_SetConfig+0x30>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381a:	d007      	beq.n	800382c <TIM_Base_SetConfig+0x30>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a26      	ldr	r2, [pc, #152]	; (80038b8 <TIM_Base_SetConfig+0xbc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d003      	beq.n	800382c <TIM_Base_SetConfig+0x30>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a25      	ldr	r2, [pc, #148]	; (80038bc <TIM_Base_SetConfig+0xc0>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d108      	bne.n	800383e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a1c      	ldr	r2, [pc, #112]	; (80038b4 <TIM_Base_SetConfig+0xb8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00b      	beq.n	800385e <TIM_Base_SetConfig+0x62>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384c:	d007      	beq.n	800385e <TIM_Base_SetConfig+0x62>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a19      	ldr	r2, [pc, #100]	; (80038b8 <TIM_Base_SetConfig+0xbc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d003      	beq.n	800385e <TIM_Base_SetConfig+0x62>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a18      	ldr	r2, [pc, #96]	; (80038bc <TIM_Base_SetConfig+0xc0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d108      	bne.n	8003870 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a07      	ldr	r2, [pc, #28]	; (80038b4 <TIM_Base_SetConfig+0xb8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d103      	bne.n	80038a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	615a      	str	r2, [r3, #20]
}
 80038aa:	bf00      	nop
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	40012c00 	.word	0x40012c00
 80038b8:	40000400 	.word	0x40000400
 80038bc:	40000800 	.word	0x40000800

080038c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	f023 0201 	bic.w	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0303 	bic.w	r3, r3, #3
 80038f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f023 0302 	bic.w	r3, r3, #2
 8003908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a1c      	ldr	r2, [pc, #112]	; (8003988 <TIM_OC1_SetConfig+0xc8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d10c      	bne.n	8003936 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f023 0308 	bic.w	r3, r3, #8
 8003922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	4313      	orrs	r3, r2
 800392c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f023 0304 	bic.w	r3, r3, #4
 8003934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a13      	ldr	r2, [pc, #76]	; (8003988 <TIM_OC1_SetConfig+0xc8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d111      	bne.n	8003962 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800394c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	621a      	str	r2, [r3, #32]
}
 800397c:	bf00      	nop
 800397e:	371c      	adds	r7, #28
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40012c00 	.word	0x40012c00

0800398c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	f023 0210 	bic.w	r2, r3, #16
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	021b      	lsls	r3, r3, #8
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f023 0320 	bic.w	r3, r3, #32
 80039d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a1d      	ldr	r2, [pc, #116]	; (8003a5c <TIM_OC2_SetConfig+0xd0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d10d      	bne.n	8003a08 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a14      	ldr	r2, [pc, #80]	; (8003a5c <TIM_OC2_SetConfig+0xd0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d113      	bne.n	8003a38 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	621a      	str	r2, [r3, #32]
}
 8003a52:	bf00      	nop
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr
 8003a5c:	40012c00 	.word	0x40012c00

08003a60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 0303 	bic.w	r3, r3, #3
 8003a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	021b      	lsls	r3, r3, #8
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a1d      	ldr	r2, [pc, #116]	; (8003b30 <TIM_OC3_SetConfig+0xd0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d10d      	bne.n	8003ada <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a14      	ldr	r2, [pc, #80]	; (8003b30 <TIM_OC3_SetConfig+0xd0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d113      	bne.n	8003b0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	621a      	str	r2, [r3, #32]
}
 8003b24:	bf00      	nop
 8003b26:	371c      	adds	r7, #28
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40012c00 	.word	0x40012c00

08003b34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	021b      	lsls	r3, r3, #8
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	031b      	lsls	r3, r3, #12
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a0f      	ldr	r2, [pc, #60]	; (8003bcc <TIM_OC4_SetConfig+0x98>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d109      	bne.n	8003ba8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	019b      	lsls	r3, r3, #6
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	621a      	str	r2, [r3, #32]
}
 8003bc2:	bf00      	nop
 8003bc4:	371c      	adds	r7, #28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr
 8003bcc:	40012c00 	.word	0x40012c00

08003bd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	f023 0201 	bic.w	r2, r3, #1
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f023 030a 	bic.w	r3, r3, #10
 8003c0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	621a      	str	r2, [r3, #32]
}
 8003c22:	bf00      	nop
 8003c24:	371c      	adds	r7, #28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	f023 0210 	bic.w	r2, r3, #16
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	031b      	lsls	r3, r3, #12
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	621a      	str	r2, [r3, #32]
}
 8003c80:	bf00      	nop
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr

08003c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b085      	sub	sp, #20
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f043 0307 	orr.w	r3, r3, #7
 8003cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	609a      	str	r2, [r3, #8]
}
 8003cb4:	bf00      	nop
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr

08003cbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b087      	sub	sp, #28
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
 8003cca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	021a      	lsls	r2, r3, #8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	609a      	str	r2, [r3, #8]
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr

08003cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e046      	b.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a16      	ldr	r2, [pc, #88]	; (8003dac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00e      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d60:	d009      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a12      	ldr	r2, [pc, #72]	; (8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a10      	ldr	r2, [pc, #64]	; (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d10c      	bne.n	8003d90 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr
 8003dac:	40012c00 	.word	0x40012c00
 8003db0:	40000400 	.word	0x40000400
 8003db4:	40000800 	.word	0x40000800

08003db8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr

08003dca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e03f      	b.n	8003e6e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fe f90e 	bl	8002024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2224      	movs	r2, #36	; 0x24
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f905 	bl	8004030 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695a      	ldr	r2, [r3, #20]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b08a      	sub	sp, #40	; 0x28
 8003e7a:	af02      	add	r7, sp, #8
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	603b      	str	r3, [r7, #0]
 8003e82:	4613      	mov	r3, r2
 8003e84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	d17c      	bne.n	8003f90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_UART_Transmit+0x2c>
 8003e9c:	88fb      	ldrh	r3, [r7, #6]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e075      	b.n	8003f92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_UART_Transmit+0x3e>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e06e      	b.n	8003f92 <HAL_UART_Transmit+0x11c>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2221      	movs	r2, #33	; 0x21
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eca:	f7fe f9e7 	bl	800229c <HAL_GetTick>
 8003ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	88fa      	ldrh	r2, [r7, #6]
 8003ed4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	88fa      	ldrh	r2, [r7, #6]
 8003eda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee4:	d108      	bne.n	8003ef8 <HAL_UART_Transmit+0x82>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d104      	bne.n	8003ef8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	e003      	b.n	8003f00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003efc:	2300      	movs	r3, #0
 8003efe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f08:	e02a      	b.n	8003f60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2200      	movs	r2, #0
 8003f12:	2180      	movs	r1, #128	; 0x80
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f840 	bl	8003f9a <UART_WaitOnFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e036      	b.n	8003f92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10b      	bne.n	8003f42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	3302      	adds	r3, #2
 8003f3e:	61bb      	str	r3, [r7, #24]
 8003f40:	e007      	b.n	8003f52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	781a      	ldrb	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1cf      	bne.n	8003f0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2200      	movs	r2, #0
 8003f72:	2140      	movs	r1, #64	; 0x40
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 f810 	bl	8003f9a <UART_WaitOnFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e006      	b.n	8003f92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e000      	b.n	8003f92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
  }
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3720      	adds	r7, #32
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	603b      	str	r3, [r7, #0]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003faa:	e02c      	b.n	8004006 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb2:	d028      	beq.n	8004006 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d007      	beq.n	8003fca <UART_WaitOnFlagUntilTimeout+0x30>
 8003fba:	f7fe f96f 	bl	800229c <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d21d      	bcs.n	8004006 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fd8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0201 	bic.w	r2, r2, #1
 8003fe8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e00f      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4013      	ands	r3, r2
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	429a      	cmp	r2, r3
 8004014:	bf0c      	ite	eq
 8004016:	2301      	moveq	r3, #1
 8004018:	2300      	movne	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	429a      	cmp	r2, r3
 8004022:	d0c3      	beq.n	8003fac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800406a:	f023 030c 	bic.w	r3, r3, #12
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6812      	ldr	r2, [r2, #0]
 8004072:	68b9      	ldr	r1, [r7, #8]
 8004074:	430b      	orrs	r3, r1
 8004076:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a2c      	ldr	r2, [pc, #176]	; (8004144 <UART_SetConfig+0x114>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d103      	bne.n	80040a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004098:	f7fe ffd6 	bl	8003048 <HAL_RCC_GetPCLK2Freq>
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	e002      	b.n	80040a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040a0:	f7fe ffbe 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 80040a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009a      	lsls	r2, r3, #2
 80040b0:	441a      	add	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040bc:	4a22      	ldr	r2, [pc, #136]	; (8004148 <UART_SetConfig+0x118>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	0119      	lsls	r1, r3, #4
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	009a      	lsls	r2, r3, #2
 80040d0:	441a      	add	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040dc:	4b1a      	ldr	r3, [pc, #104]	; (8004148 <UART_SetConfig+0x118>)
 80040de:	fba3 0302 	umull	r0, r3, r3, r2
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	2064      	movs	r0, #100	; 0x64
 80040e6:	fb00 f303 	mul.w	r3, r0, r3
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	3332      	adds	r3, #50	; 0x32
 80040f0:	4a15      	ldr	r2, [pc, #84]	; (8004148 <UART_SetConfig+0x118>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040fc:	4419      	add	r1, r3
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009a      	lsls	r2, r3, #2
 8004108:	441a      	add	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	fbb2 f2f3 	udiv	r2, r2, r3
 8004114:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <UART_SetConfig+0x118>)
 8004116:	fba3 0302 	umull	r0, r3, r3, r2
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	2064      	movs	r0, #100	; 0x64
 800411e:	fb00 f303 	mul.w	r3, r0, r3
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	3332      	adds	r3, #50	; 0x32
 8004128:	4a07      	ldr	r2, [pc, #28]	; (8004148 <UART_SetConfig+0x118>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	f003 020f 	and.w	r2, r3, #15
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	440a      	add	r2, r1
 800413a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800413c:	bf00      	nop
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40013800 	.word	0x40013800
 8004148:	51eb851f 	.word	0x51eb851f

0800414c <__errno>:
 800414c:	4b01      	ldr	r3, [pc, #4]	; (8004154 <__errno+0x8>)
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	2000005c 	.word	0x2000005c

08004158 <__libc_init_array>:
 8004158:	b570      	push	{r4, r5, r6, lr}
 800415a:	2600      	movs	r6, #0
 800415c:	4d0c      	ldr	r5, [pc, #48]	; (8004190 <__libc_init_array+0x38>)
 800415e:	4c0d      	ldr	r4, [pc, #52]	; (8004194 <__libc_init_array+0x3c>)
 8004160:	1b64      	subs	r4, r4, r5
 8004162:	10a4      	asrs	r4, r4, #2
 8004164:	42a6      	cmp	r6, r4
 8004166:	d109      	bne.n	800417c <__libc_init_array+0x24>
 8004168:	f000 fc5c 	bl	8004a24 <_init>
 800416c:	2600      	movs	r6, #0
 800416e:	4d0a      	ldr	r5, [pc, #40]	; (8004198 <__libc_init_array+0x40>)
 8004170:	4c0a      	ldr	r4, [pc, #40]	; (800419c <__libc_init_array+0x44>)
 8004172:	1b64      	subs	r4, r4, r5
 8004174:	10a4      	asrs	r4, r4, #2
 8004176:	42a6      	cmp	r6, r4
 8004178:	d105      	bne.n	8004186 <__libc_init_array+0x2e>
 800417a:	bd70      	pop	{r4, r5, r6, pc}
 800417c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004180:	4798      	blx	r3
 8004182:	3601      	adds	r6, #1
 8004184:	e7ee      	b.n	8004164 <__libc_init_array+0xc>
 8004186:	f855 3b04 	ldr.w	r3, [r5], #4
 800418a:	4798      	blx	r3
 800418c:	3601      	adds	r6, #1
 800418e:	e7f2      	b.n	8004176 <__libc_init_array+0x1e>
 8004190:	08004ac8 	.word	0x08004ac8
 8004194:	08004ac8 	.word	0x08004ac8
 8004198:	08004ac8 	.word	0x08004ac8
 800419c:	08004acc 	.word	0x08004acc

080041a0 <memset>:
 80041a0:	4603      	mov	r3, r0
 80041a2:	4402      	add	r2, r0
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d100      	bne.n	80041aa <memset+0xa>
 80041a8:	4770      	bx	lr
 80041aa:	f803 1b01 	strb.w	r1, [r3], #1
 80041ae:	e7f9      	b.n	80041a4 <memset+0x4>

080041b0 <siprintf>:
 80041b0:	b40e      	push	{r1, r2, r3}
 80041b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041b6:	b500      	push	{lr}
 80041b8:	b09c      	sub	sp, #112	; 0x70
 80041ba:	ab1d      	add	r3, sp, #116	; 0x74
 80041bc:	9002      	str	r0, [sp, #8]
 80041be:	9006      	str	r0, [sp, #24]
 80041c0:	9107      	str	r1, [sp, #28]
 80041c2:	9104      	str	r1, [sp, #16]
 80041c4:	4808      	ldr	r0, [pc, #32]	; (80041e8 <siprintf+0x38>)
 80041c6:	4909      	ldr	r1, [pc, #36]	; (80041ec <siprintf+0x3c>)
 80041c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80041cc:	9105      	str	r1, [sp, #20]
 80041ce:	6800      	ldr	r0, [r0, #0]
 80041d0:	a902      	add	r1, sp, #8
 80041d2:	9301      	str	r3, [sp, #4]
 80041d4:	f000 f868 	bl	80042a8 <_svfiprintf_r>
 80041d8:	2200      	movs	r2, #0
 80041da:	9b02      	ldr	r3, [sp, #8]
 80041dc:	701a      	strb	r2, [r3, #0]
 80041de:	b01c      	add	sp, #112	; 0x70
 80041e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80041e4:	b003      	add	sp, #12
 80041e6:	4770      	bx	lr
 80041e8:	2000005c 	.word	0x2000005c
 80041ec:	ffff0208 	.word	0xffff0208

080041f0 <__ssputs_r>:
 80041f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041f4:	688e      	ldr	r6, [r1, #8]
 80041f6:	4682      	mov	sl, r0
 80041f8:	429e      	cmp	r6, r3
 80041fa:	460c      	mov	r4, r1
 80041fc:	4690      	mov	r8, r2
 80041fe:	461f      	mov	r7, r3
 8004200:	d838      	bhi.n	8004274 <__ssputs_r+0x84>
 8004202:	898a      	ldrh	r2, [r1, #12]
 8004204:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004208:	d032      	beq.n	8004270 <__ssputs_r+0x80>
 800420a:	6825      	ldr	r5, [r4, #0]
 800420c:	6909      	ldr	r1, [r1, #16]
 800420e:	3301      	adds	r3, #1
 8004210:	eba5 0901 	sub.w	r9, r5, r1
 8004214:	6965      	ldr	r5, [r4, #20]
 8004216:	444b      	add	r3, r9
 8004218:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800421c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004220:	106d      	asrs	r5, r5, #1
 8004222:	429d      	cmp	r5, r3
 8004224:	bf38      	it	cc
 8004226:	461d      	movcc	r5, r3
 8004228:	0553      	lsls	r3, r2, #21
 800422a:	d531      	bpl.n	8004290 <__ssputs_r+0xa0>
 800422c:	4629      	mov	r1, r5
 800422e:	f000 fb53 	bl	80048d8 <_malloc_r>
 8004232:	4606      	mov	r6, r0
 8004234:	b950      	cbnz	r0, 800424c <__ssputs_r+0x5c>
 8004236:	230c      	movs	r3, #12
 8004238:	f04f 30ff 	mov.w	r0, #4294967295
 800423c:	f8ca 3000 	str.w	r3, [sl]
 8004240:	89a3      	ldrh	r3, [r4, #12]
 8004242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004246:	81a3      	strh	r3, [r4, #12]
 8004248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800424c:	464a      	mov	r2, r9
 800424e:	6921      	ldr	r1, [r4, #16]
 8004250:	f000 face 	bl	80047f0 <memcpy>
 8004254:	89a3      	ldrh	r3, [r4, #12]
 8004256:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800425a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425e:	81a3      	strh	r3, [r4, #12]
 8004260:	6126      	str	r6, [r4, #16]
 8004262:	444e      	add	r6, r9
 8004264:	6026      	str	r6, [r4, #0]
 8004266:	463e      	mov	r6, r7
 8004268:	6165      	str	r5, [r4, #20]
 800426a:	eba5 0509 	sub.w	r5, r5, r9
 800426e:	60a5      	str	r5, [r4, #8]
 8004270:	42be      	cmp	r6, r7
 8004272:	d900      	bls.n	8004276 <__ssputs_r+0x86>
 8004274:	463e      	mov	r6, r7
 8004276:	4632      	mov	r2, r6
 8004278:	4641      	mov	r1, r8
 800427a:	6820      	ldr	r0, [r4, #0]
 800427c:	f000 fac6 	bl	800480c <memmove>
 8004280:	68a3      	ldr	r3, [r4, #8]
 8004282:	6822      	ldr	r2, [r4, #0]
 8004284:	1b9b      	subs	r3, r3, r6
 8004286:	4432      	add	r2, r6
 8004288:	2000      	movs	r0, #0
 800428a:	60a3      	str	r3, [r4, #8]
 800428c:	6022      	str	r2, [r4, #0]
 800428e:	e7db      	b.n	8004248 <__ssputs_r+0x58>
 8004290:	462a      	mov	r2, r5
 8004292:	f000 fb7b 	bl	800498c <_realloc_r>
 8004296:	4606      	mov	r6, r0
 8004298:	2800      	cmp	r0, #0
 800429a:	d1e1      	bne.n	8004260 <__ssputs_r+0x70>
 800429c:	4650      	mov	r0, sl
 800429e:	6921      	ldr	r1, [r4, #16]
 80042a0:	f000 face 	bl	8004840 <_free_r>
 80042a4:	e7c7      	b.n	8004236 <__ssputs_r+0x46>
	...

080042a8 <_svfiprintf_r>:
 80042a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ac:	4698      	mov	r8, r3
 80042ae:	898b      	ldrh	r3, [r1, #12]
 80042b0:	4607      	mov	r7, r0
 80042b2:	061b      	lsls	r3, r3, #24
 80042b4:	460d      	mov	r5, r1
 80042b6:	4614      	mov	r4, r2
 80042b8:	b09d      	sub	sp, #116	; 0x74
 80042ba:	d50e      	bpl.n	80042da <_svfiprintf_r+0x32>
 80042bc:	690b      	ldr	r3, [r1, #16]
 80042be:	b963      	cbnz	r3, 80042da <_svfiprintf_r+0x32>
 80042c0:	2140      	movs	r1, #64	; 0x40
 80042c2:	f000 fb09 	bl	80048d8 <_malloc_r>
 80042c6:	6028      	str	r0, [r5, #0]
 80042c8:	6128      	str	r0, [r5, #16]
 80042ca:	b920      	cbnz	r0, 80042d6 <_svfiprintf_r+0x2e>
 80042cc:	230c      	movs	r3, #12
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	f04f 30ff 	mov.w	r0, #4294967295
 80042d4:	e0d1      	b.n	800447a <_svfiprintf_r+0x1d2>
 80042d6:	2340      	movs	r3, #64	; 0x40
 80042d8:	616b      	str	r3, [r5, #20]
 80042da:	2300      	movs	r3, #0
 80042dc:	9309      	str	r3, [sp, #36]	; 0x24
 80042de:	2320      	movs	r3, #32
 80042e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042e4:	2330      	movs	r3, #48	; 0x30
 80042e6:	f04f 0901 	mov.w	r9, #1
 80042ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80042ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004494 <_svfiprintf_r+0x1ec>
 80042f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042f6:	4623      	mov	r3, r4
 80042f8:	469a      	mov	sl, r3
 80042fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042fe:	b10a      	cbz	r2, 8004304 <_svfiprintf_r+0x5c>
 8004300:	2a25      	cmp	r2, #37	; 0x25
 8004302:	d1f9      	bne.n	80042f8 <_svfiprintf_r+0x50>
 8004304:	ebba 0b04 	subs.w	fp, sl, r4
 8004308:	d00b      	beq.n	8004322 <_svfiprintf_r+0x7a>
 800430a:	465b      	mov	r3, fp
 800430c:	4622      	mov	r2, r4
 800430e:	4629      	mov	r1, r5
 8004310:	4638      	mov	r0, r7
 8004312:	f7ff ff6d 	bl	80041f0 <__ssputs_r>
 8004316:	3001      	adds	r0, #1
 8004318:	f000 80aa 	beq.w	8004470 <_svfiprintf_r+0x1c8>
 800431c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800431e:	445a      	add	r2, fp
 8004320:	9209      	str	r2, [sp, #36]	; 0x24
 8004322:	f89a 3000 	ldrb.w	r3, [sl]
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 80a2 	beq.w	8004470 <_svfiprintf_r+0x1c8>
 800432c:	2300      	movs	r3, #0
 800432e:	f04f 32ff 	mov.w	r2, #4294967295
 8004332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004336:	f10a 0a01 	add.w	sl, sl, #1
 800433a:	9304      	str	r3, [sp, #16]
 800433c:	9307      	str	r3, [sp, #28]
 800433e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004342:	931a      	str	r3, [sp, #104]	; 0x68
 8004344:	4654      	mov	r4, sl
 8004346:	2205      	movs	r2, #5
 8004348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800434c:	4851      	ldr	r0, [pc, #324]	; (8004494 <_svfiprintf_r+0x1ec>)
 800434e:	f000 fa41 	bl	80047d4 <memchr>
 8004352:	9a04      	ldr	r2, [sp, #16]
 8004354:	b9d8      	cbnz	r0, 800438e <_svfiprintf_r+0xe6>
 8004356:	06d0      	lsls	r0, r2, #27
 8004358:	bf44      	itt	mi
 800435a:	2320      	movmi	r3, #32
 800435c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004360:	0711      	lsls	r1, r2, #28
 8004362:	bf44      	itt	mi
 8004364:	232b      	movmi	r3, #43	; 0x2b
 8004366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800436a:	f89a 3000 	ldrb.w	r3, [sl]
 800436e:	2b2a      	cmp	r3, #42	; 0x2a
 8004370:	d015      	beq.n	800439e <_svfiprintf_r+0xf6>
 8004372:	4654      	mov	r4, sl
 8004374:	2000      	movs	r0, #0
 8004376:	f04f 0c0a 	mov.w	ip, #10
 800437a:	9a07      	ldr	r2, [sp, #28]
 800437c:	4621      	mov	r1, r4
 800437e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004382:	3b30      	subs	r3, #48	; 0x30
 8004384:	2b09      	cmp	r3, #9
 8004386:	d94e      	bls.n	8004426 <_svfiprintf_r+0x17e>
 8004388:	b1b0      	cbz	r0, 80043b8 <_svfiprintf_r+0x110>
 800438a:	9207      	str	r2, [sp, #28]
 800438c:	e014      	b.n	80043b8 <_svfiprintf_r+0x110>
 800438e:	eba0 0308 	sub.w	r3, r0, r8
 8004392:	fa09 f303 	lsl.w	r3, r9, r3
 8004396:	4313      	orrs	r3, r2
 8004398:	46a2      	mov	sl, r4
 800439a:	9304      	str	r3, [sp, #16]
 800439c:	e7d2      	b.n	8004344 <_svfiprintf_r+0x9c>
 800439e:	9b03      	ldr	r3, [sp, #12]
 80043a0:	1d19      	adds	r1, r3, #4
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	9103      	str	r1, [sp, #12]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	bfbb      	ittet	lt
 80043aa:	425b      	neglt	r3, r3
 80043ac:	f042 0202 	orrlt.w	r2, r2, #2
 80043b0:	9307      	strge	r3, [sp, #28]
 80043b2:	9307      	strlt	r3, [sp, #28]
 80043b4:	bfb8      	it	lt
 80043b6:	9204      	strlt	r2, [sp, #16]
 80043b8:	7823      	ldrb	r3, [r4, #0]
 80043ba:	2b2e      	cmp	r3, #46	; 0x2e
 80043bc:	d10c      	bne.n	80043d8 <_svfiprintf_r+0x130>
 80043be:	7863      	ldrb	r3, [r4, #1]
 80043c0:	2b2a      	cmp	r3, #42	; 0x2a
 80043c2:	d135      	bne.n	8004430 <_svfiprintf_r+0x188>
 80043c4:	9b03      	ldr	r3, [sp, #12]
 80043c6:	3402      	adds	r4, #2
 80043c8:	1d1a      	adds	r2, r3, #4
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	9203      	str	r2, [sp, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	bfb8      	it	lt
 80043d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80043d6:	9305      	str	r3, [sp, #20]
 80043d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044a4 <_svfiprintf_r+0x1fc>
 80043dc:	2203      	movs	r2, #3
 80043de:	4650      	mov	r0, sl
 80043e0:	7821      	ldrb	r1, [r4, #0]
 80043e2:	f000 f9f7 	bl	80047d4 <memchr>
 80043e6:	b140      	cbz	r0, 80043fa <_svfiprintf_r+0x152>
 80043e8:	2340      	movs	r3, #64	; 0x40
 80043ea:	eba0 000a 	sub.w	r0, r0, sl
 80043ee:	fa03 f000 	lsl.w	r0, r3, r0
 80043f2:	9b04      	ldr	r3, [sp, #16]
 80043f4:	3401      	adds	r4, #1
 80043f6:	4303      	orrs	r3, r0
 80043f8:	9304      	str	r3, [sp, #16]
 80043fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043fe:	2206      	movs	r2, #6
 8004400:	4825      	ldr	r0, [pc, #148]	; (8004498 <_svfiprintf_r+0x1f0>)
 8004402:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004406:	f000 f9e5 	bl	80047d4 <memchr>
 800440a:	2800      	cmp	r0, #0
 800440c:	d038      	beq.n	8004480 <_svfiprintf_r+0x1d8>
 800440e:	4b23      	ldr	r3, [pc, #140]	; (800449c <_svfiprintf_r+0x1f4>)
 8004410:	bb1b      	cbnz	r3, 800445a <_svfiprintf_r+0x1b2>
 8004412:	9b03      	ldr	r3, [sp, #12]
 8004414:	3307      	adds	r3, #7
 8004416:	f023 0307 	bic.w	r3, r3, #7
 800441a:	3308      	adds	r3, #8
 800441c:	9303      	str	r3, [sp, #12]
 800441e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004420:	4433      	add	r3, r6
 8004422:	9309      	str	r3, [sp, #36]	; 0x24
 8004424:	e767      	b.n	80042f6 <_svfiprintf_r+0x4e>
 8004426:	460c      	mov	r4, r1
 8004428:	2001      	movs	r0, #1
 800442a:	fb0c 3202 	mla	r2, ip, r2, r3
 800442e:	e7a5      	b.n	800437c <_svfiprintf_r+0xd4>
 8004430:	2300      	movs	r3, #0
 8004432:	f04f 0c0a 	mov.w	ip, #10
 8004436:	4619      	mov	r1, r3
 8004438:	3401      	adds	r4, #1
 800443a:	9305      	str	r3, [sp, #20]
 800443c:	4620      	mov	r0, r4
 800443e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004442:	3a30      	subs	r2, #48	; 0x30
 8004444:	2a09      	cmp	r2, #9
 8004446:	d903      	bls.n	8004450 <_svfiprintf_r+0x1a8>
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0c5      	beq.n	80043d8 <_svfiprintf_r+0x130>
 800444c:	9105      	str	r1, [sp, #20]
 800444e:	e7c3      	b.n	80043d8 <_svfiprintf_r+0x130>
 8004450:	4604      	mov	r4, r0
 8004452:	2301      	movs	r3, #1
 8004454:	fb0c 2101 	mla	r1, ip, r1, r2
 8004458:	e7f0      	b.n	800443c <_svfiprintf_r+0x194>
 800445a:	ab03      	add	r3, sp, #12
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	462a      	mov	r2, r5
 8004460:	4638      	mov	r0, r7
 8004462:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <_svfiprintf_r+0x1f8>)
 8004464:	a904      	add	r1, sp, #16
 8004466:	f3af 8000 	nop.w
 800446a:	1c42      	adds	r2, r0, #1
 800446c:	4606      	mov	r6, r0
 800446e:	d1d6      	bne.n	800441e <_svfiprintf_r+0x176>
 8004470:	89ab      	ldrh	r3, [r5, #12]
 8004472:	065b      	lsls	r3, r3, #25
 8004474:	f53f af2c 	bmi.w	80042d0 <_svfiprintf_r+0x28>
 8004478:	9809      	ldr	r0, [sp, #36]	; 0x24
 800447a:	b01d      	add	sp, #116	; 0x74
 800447c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004480:	ab03      	add	r3, sp, #12
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	462a      	mov	r2, r5
 8004486:	4638      	mov	r0, r7
 8004488:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <_svfiprintf_r+0x1f8>)
 800448a:	a904      	add	r1, sp, #16
 800448c:	f000 f87c 	bl	8004588 <_printf_i>
 8004490:	e7eb      	b.n	800446a <_svfiprintf_r+0x1c2>
 8004492:	bf00      	nop
 8004494:	08004a94 	.word	0x08004a94
 8004498:	08004a9e 	.word	0x08004a9e
 800449c:	00000000 	.word	0x00000000
 80044a0:	080041f1 	.word	0x080041f1
 80044a4:	08004a9a 	.word	0x08004a9a

080044a8 <_printf_common>:
 80044a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044ac:	4616      	mov	r6, r2
 80044ae:	4699      	mov	r9, r3
 80044b0:	688a      	ldr	r2, [r1, #8]
 80044b2:	690b      	ldr	r3, [r1, #16]
 80044b4:	4607      	mov	r7, r0
 80044b6:	4293      	cmp	r3, r2
 80044b8:	bfb8      	it	lt
 80044ba:	4613      	movlt	r3, r2
 80044bc:	6033      	str	r3, [r6, #0]
 80044be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044c2:	460c      	mov	r4, r1
 80044c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044c8:	b10a      	cbz	r2, 80044ce <_printf_common+0x26>
 80044ca:	3301      	adds	r3, #1
 80044cc:	6033      	str	r3, [r6, #0]
 80044ce:	6823      	ldr	r3, [r4, #0]
 80044d0:	0699      	lsls	r1, r3, #26
 80044d2:	bf42      	ittt	mi
 80044d4:	6833      	ldrmi	r3, [r6, #0]
 80044d6:	3302      	addmi	r3, #2
 80044d8:	6033      	strmi	r3, [r6, #0]
 80044da:	6825      	ldr	r5, [r4, #0]
 80044dc:	f015 0506 	ands.w	r5, r5, #6
 80044e0:	d106      	bne.n	80044f0 <_printf_common+0x48>
 80044e2:	f104 0a19 	add.w	sl, r4, #25
 80044e6:	68e3      	ldr	r3, [r4, #12]
 80044e8:	6832      	ldr	r2, [r6, #0]
 80044ea:	1a9b      	subs	r3, r3, r2
 80044ec:	42ab      	cmp	r3, r5
 80044ee:	dc28      	bgt.n	8004542 <_printf_common+0x9a>
 80044f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044f4:	1e13      	subs	r3, r2, #0
 80044f6:	6822      	ldr	r2, [r4, #0]
 80044f8:	bf18      	it	ne
 80044fa:	2301      	movne	r3, #1
 80044fc:	0692      	lsls	r2, r2, #26
 80044fe:	d42d      	bmi.n	800455c <_printf_common+0xb4>
 8004500:	4649      	mov	r1, r9
 8004502:	4638      	mov	r0, r7
 8004504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004508:	47c0      	blx	r8
 800450a:	3001      	adds	r0, #1
 800450c:	d020      	beq.n	8004550 <_printf_common+0xa8>
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	68e5      	ldr	r5, [r4, #12]
 8004512:	f003 0306 	and.w	r3, r3, #6
 8004516:	2b04      	cmp	r3, #4
 8004518:	bf18      	it	ne
 800451a:	2500      	movne	r5, #0
 800451c:	6832      	ldr	r2, [r6, #0]
 800451e:	f04f 0600 	mov.w	r6, #0
 8004522:	68a3      	ldr	r3, [r4, #8]
 8004524:	bf08      	it	eq
 8004526:	1aad      	subeq	r5, r5, r2
 8004528:	6922      	ldr	r2, [r4, #16]
 800452a:	bf08      	it	eq
 800452c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004530:	4293      	cmp	r3, r2
 8004532:	bfc4      	itt	gt
 8004534:	1a9b      	subgt	r3, r3, r2
 8004536:	18ed      	addgt	r5, r5, r3
 8004538:	341a      	adds	r4, #26
 800453a:	42b5      	cmp	r5, r6
 800453c:	d11a      	bne.n	8004574 <_printf_common+0xcc>
 800453e:	2000      	movs	r0, #0
 8004540:	e008      	b.n	8004554 <_printf_common+0xac>
 8004542:	2301      	movs	r3, #1
 8004544:	4652      	mov	r2, sl
 8004546:	4649      	mov	r1, r9
 8004548:	4638      	mov	r0, r7
 800454a:	47c0      	blx	r8
 800454c:	3001      	adds	r0, #1
 800454e:	d103      	bne.n	8004558 <_printf_common+0xb0>
 8004550:	f04f 30ff 	mov.w	r0, #4294967295
 8004554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004558:	3501      	adds	r5, #1
 800455a:	e7c4      	b.n	80044e6 <_printf_common+0x3e>
 800455c:	2030      	movs	r0, #48	; 0x30
 800455e:	18e1      	adds	r1, r4, r3
 8004560:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800456a:	4422      	add	r2, r4
 800456c:	3302      	adds	r3, #2
 800456e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004572:	e7c5      	b.n	8004500 <_printf_common+0x58>
 8004574:	2301      	movs	r3, #1
 8004576:	4622      	mov	r2, r4
 8004578:	4649      	mov	r1, r9
 800457a:	4638      	mov	r0, r7
 800457c:	47c0      	blx	r8
 800457e:	3001      	adds	r0, #1
 8004580:	d0e6      	beq.n	8004550 <_printf_common+0xa8>
 8004582:	3601      	adds	r6, #1
 8004584:	e7d9      	b.n	800453a <_printf_common+0x92>
	...

08004588 <_printf_i>:
 8004588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800458c:	460c      	mov	r4, r1
 800458e:	7e27      	ldrb	r7, [r4, #24]
 8004590:	4691      	mov	r9, r2
 8004592:	2f78      	cmp	r7, #120	; 0x78
 8004594:	4680      	mov	r8, r0
 8004596:	469a      	mov	sl, r3
 8004598:	990c      	ldr	r1, [sp, #48]	; 0x30
 800459a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800459e:	d807      	bhi.n	80045b0 <_printf_i+0x28>
 80045a0:	2f62      	cmp	r7, #98	; 0x62
 80045a2:	d80a      	bhi.n	80045ba <_printf_i+0x32>
 80045a4:	2f00      	cmp	r7, #0
 80045a6:	f000 80d9 	beq.w	800475c <_printf_i+0x1d4>
 80045aa:	2f58      	cmp	r7, #88	; 0x58
 80045ac:	f000 80a4 	beq.w	80046f8 <_printf_i+0x170>
 80045b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045b8:	e03a      	b.n	8004630 <_printf_i+0xa8>
 80045ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045be:	2b15      	cmp	r3, #21
 80045c0:	d8f6      	bhi.n	80045b0 <_printf_i+0x28>
 80045c2:	a001      	add	r0, pc, #4	; (adr r0, 80045c8 <_printf_i+0x40>)
 80045c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80045c8:	08004621 	.word	0x08004621
 80045cc:	08004635 	.word	0x08004635
 80045d0:	080045b1 	.word	0x080045b1
 80045d4:	080045b1 	.word	0x080045b1
 80045d8:	080045b1 	.word	0x080045b1
 80045dc:	080045b1 	.word	0x080045b1
 80045e0:	08004635 	.word	0x08004635
 80045e4:	080045b1 	.word	0x080045b1
 80045e8:	080045b1 	.word	0x080045b1
 80045ec:	080045b1 	.word	0x080045b1
 80045f0:	080045b1 	.word	0x080045b1
 80045f4:	08004743 	.word	0x08004743
 80045f8:	08004665 	.word	0x08004665
 80045fc:	08004725 	.word	0x08004725
 8004600:	080045b1 	.word	0x080045b1
 8004604:	080045b1 	.word	0x080045b1
 8004608:	08004765 	.word	0x08004765
 800460c:	080045b1 	.word	0x080045b1
 8004610:	08004665 	.word	0x08004665
 8004614:	080045b1 	.word	0x080045b1
 8004618:	080045b1 	.word	0x080045b1
 800461c:	0800472d 	.word	0x0800472d
 8004620:	680b      	ldr	r3, [r1, #0]
 8004622:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004626:	1d1a      	adds	r2, r3, #4
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	600a      	str	r2, [r1, #0]
 800462c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004630:	2301      	movs	r3, #1
 8004632:	e0a4      	b.n	800477e <_printf_i+0x1f6>
 8004634:	6825      	ldr	r5, [r4, #0]
 8004636:	6808      	ldr	r0, [r1, #0]
 8004638:	062e      	lsls	r6, r5, #24
 800463a:	f100 0304 	add.w	r3, r0, #4
 800463e:	d50a      	bpl.n	8004656 <_printf_i+0xce>
 8004640:	6805      	ldr	r5, [r0, #0]
 8004642:	600b      	str	r3, [r1, #0]
 8004644:	2d00      	cmp	r5, #0
 8004646:	da03      	bge.n	8004650 <_printf_i+0xc8>
 8004648:	232d      	movs	r3, #45	; 0x2d
 800464a:	426d      	negs	r5, r5
 800464c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004650:	230a      	movs	r3, #10
 8004652:	485e      	ldr	r0, [pc, #376]	; (80047cc <_printf_i+0x244>)
 8004654:	e019      	b.n	800468a <_printf_i+0x102>
 8004656:	f015 0f40 	tst.w	r5, #64	; 0x40
 800465a:	6805      	ldr	r5, [r0, #0]
 800465c:	600b      	str	r3, [r1, #0]
 800465e:	bf18      	it	ne
 8004660:	b22d      	sxthne	r5, r5
 8004662:	e7ef      	b.n	8004644 <_printf_i+0xbc>
 8004664:	680b      	ldr	r3, [r1, #0]
 8004666:	6825      	ldr	r5, [r4, #0]
 8004668:	1d18      	adds	r0, r3, #4
 800466a:	6008      	str	r0, [r1, #0]
 800466c:	0628      	lsls	r0, r5, #24
 800466e:	d501      	bpl.n	8004674 <_printf_i+0xec>
 8004670:	681d      	ldr	r5, [r3, #0]
 8004672:	e002      	b.n	800467a <_printf_i+0xf2>
 8004674:	0669      	lsls	r1, r5, #25
 8004676:	d5fb      	bpl.n	8004670 <_printf_i+0xe8>
 8004678:	881d      	ldrh	r5, [r3, #0]
 800467a:	2f6f      	cmp	r7, #111	; 0x6f
 800467c:	bf0c      	ite	eq
 800467e:	2308      	moveq	r3, #8
 8004680:	230a      	movne	r3, #10
 8004682:	4852      	ldr	r0, [pc, #328]	; (80047cc <_printf_i+0x244>)
 8004684:	2100      	movs	r1, #0
 8004686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800468a:	6866      	ldr	r6, [r4, #4]
 800468c:	2e00      	cmp	r6, #0
 800468e:	bfa8      	it	ge
 8004690:	6821      	ldrge	r1, [r4, #0]
 8004692:	60a6      	str	r6, [r4, #8]
 8004694:	bfa4      	itt	ge
 8004696:	f021 0104 	bicge.w	r1, r1, #4
 800469a:	6021      	strge	r1, [r4, #0]
 800469c:	b90d      	cbnz	r5, 80046a2 <_printf_i+0x11a>
 800469e:	2e00      	cmp	r6, #0
 80046a0:	d04d      	beq.n	800473e <_printf_i+0x1b6>
 80046a2:	4616      	mov	r6, r2
 80046a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80046a8:	fb03 5711 	mls	r7, r3, r1, r5
 80046ac:	5dc7      	ldrb	r7, [r0, r7]
 80046ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046b2:	462f      	mov	r7, r5
 80046b4:	42bb      	cmp	r3, r7
 80046b6:	460d      	mov	r5, r1
 80046b8:	d9f4      	bls.n	80046a4 <_printf_i+0x11c>
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d10b      	bne.n	80046d6 <_printf_i+0x14e>
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	07df      	lsls	r7, r3, #31
 80046c2:	d508      	bpl.n	80046d6 <_printf_i+0x14e>
 80046c4:	6923      	ldr	r3, [r4, #16]
 80046c6:	6861      	ldr	r1, [r4, #4]
 80046c8:	4299      	cmp	r1, r3
 80046ca:	bfde      	ittt	le
 80046cc:	2330      	movle	r3, #48	; 0x30
 80046ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046d6:	1b92      	subs	r2, r2, r6
 80046d8:	6122      	str	r2, [r4, #16]
 80046da:	464b      	mov	r3, r9
 80046dc:	4621      	mov	r1, r4
 80046de:	4640      	mov	r0, r8
 80046e0:	f8cd a000 	str.w	sl, [sp]
 80046e4:	aa03      	add	r2, sp, #12
 80046e6:	f7ff fedf 	bl	80044a8 <_printf_common>
 80046ea:	3001      	adds	r0, #1
 80046ec:	d14c      	bne.n	8004788 <_printf_i+0x200>
 80046ee:	f04f 30ff 	mov.w	r0, #4294967295
 80046f2:	b004      	add	sp, #16
 80046f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f8:	4834      	ldr	r0, [pc, #208]	; (80047cc <_printf_i+0x244>)
 80046fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046fe:	680e      	ldr	r6, [r1, #0]
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	f856 5b04 	ldr.w	r5, [r6], #4
 8004706:	061f      	lsls	r7, r3, #24
 8004708:	600e      	str	r6, [r1, #0]
 800470a:	d514      	bpl.n	8004736 <_printf_i+0x1ae>
 800470c:	07d9      	lsls	r1, r3, #31
 800470e:	bf44      	itt	mi
 8004710:	f043 0320 	orrmi.w	r3, r3, #32
 8004714:	6023      	strmi	r3, [r4, #0]
 8004716:	b91d      	cbnz	r5, 8004720 <_printf_i+0x198>
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	f023 0320 	bic.w	r3, r3, #32
 800471e:	6023      	str	r3, [r4, #0]
 8004720:	2310      	movs	r3, #16
 8004722:	e7af      	b.n	8004684 <_printf_i+0xfc>
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	f043 0320 	orr.w	r3, r3, #32
 800472a:	6023      	str	r3, [r4, #0]
 800472c:	2378      	movs	r3, #120	; 0x78
 800472e:	4828      	ldr	r0, [pc, #160]	; (80047d0 <_printf_i+0x248>)
 8004730:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004734:	e7e3      	b.n	80046fe <_printf_i+0x176>
 8004736:	065e      	lsls	r6, r3, #25
 8004738:	bf48      	it	mi
 800473a:	b2ad      	uxthmi	r5, r5
 800473c:	e7e6      	b.n	800470c <_printf_i+0x184>
 800473e:	4616      	mov	r6, r2
 8004740:	e7bb      	b.n	80046ba <_printf_i+0x132>
 8004742:	680b      	ldr	r3, [r1, #0]
 8004744:	6826      	ldr	r6, [r4, #0]
 8004746:	1d1d      	adds	r5, r3, #4
 8004748:	6960      	ldr	r0, [r4, #20]
 800474a:	600d      	str	r5, [r1, #0]
 800474c:	0635      	lsls	r5, r6, #24
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	d501      	bpl.n	8004756 <_printf_i+0x1ce>
 8004752:	6018      	str	r0, [r3, #0]
 8004754:	e002      	b.n	800475c <_printf_i+0x1d4>
 8004756:	0671      	lsls	r1, r6, #25
 8004758:	d5fb      	bpl.n	8004752 <_printf_i+0x1ca>
 800475a:	8018      	strh	r0, [r3, #0]
 800475c:	2300      	movs	r3, #0
 800475e:	4616      	mov	r6, r2
 8004760:	6123      	str	r3, [r4, #16]
 8004762:	e7ba      	b.n	80046da <_printf_i+0x152>
 8004764:	680b      	ldr	r3, [r1, #0]
 8004766:	1d1a      	adds	r2, r3, #4
 8004768:	600a      	str	r2, [r1, #0]
 800476a:	681e      	ldr	r6, [r3, #0]
 800476c:	2100      	movs	r1, #0
 800476e:	4630      	mov	r0, r6
 8004770:	6862      	ldr	r2, [r4, #4]
 8004772:	f000 f82f 	bl	80047d4 <memchr>
 8004776:	b108      	cbz	r0, 800477c <_printf_i+0x1f4>
 8004778:	1b80      	subs	r0, r0, r6
 800477a:	6060      	str	r0, [r4, #4]
 800477c:	6863      	ldr	r3, [r4, #4]
 800477e:	6123      	str	r3, [r4, #16]
 8004780:	2300      	movs	r3, #0
 8004782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004786:	e7a8      	b.n	80046da <_printf_i+0x152>
 8004788:	4632      	mov	r2, r6
 800478a:	4649      	mov	r1, r9
 800478c:	4640      	mov	r0, r8
 800478e:	6923      	ldr	r3, [r4, #16]
 8004790:	47d0      	blx	sl
 8004792:	3001      	adds	r0, #1
 8004794:	d0ab      	beq.n	80046ee <_printf_i+0x166>
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	079b      	lsls	r3, r3, #30
 800479a:	d413      	bmi.n	80047c4 <_printf_i+0x23c>
 800479c:	68e0      	ldr	r0, [r4, #12]
 800479e:	9b03      	ldr	r3, [sp, #12]
 80047a0:	4298      	cmp	r0, r3
 80047a2:	bfb8      	it	lt
 80047a4:	4618      	movlt	r0, r3
 80047a6:	e7a4      	b.n	80046f2 <_printf_i+0x16a>
 80047a8:	2301      	movs	r3, #1
 80047aa:	4632      	mov	r2, r6
 80047ac:	4649      	mov	r1, r9
 80047ae:	4640      	mov	r0, r8
 80047b0:	47d0      	blx	sl
 80047b2:	3001      	adds	r0, #1
 80047b4:	d09b      	beq.n	80046ee <_printf_i+0x166>
 80047b6:	3501      	adds	r5, #1
 80047b8:	68e3      	ldr	r3, [r4, #12]
 80047ba:	9903      	ldr	r1, [sp, #12]
 80047bc:	1a5b      	subs	r3, r3, r1
 80047be:	42ab      	cmp	r3, r5
 80047c0:	dcf2      	bgt.n	80047a8 <_printf_i+0x220>
 80047c2:	e7eb      	b.n	800479c <_printf_i+0x214>
 80047c4:	2500      	movs	r5, #0
 80047c6:	f104 0619 	add.w	r6, r4, #25
 80047ca:	e7f5      	b.n	80047b8 <_printf_i+0x230>
 80047cc:	08004aa5 	.word	0x08004aa5
 80047d0:	08004ab6 	.word	0x08004ab6

080047d4 <memchr>:
 80047d4:	4603      	mov	r3, r0
 80047d6:	b510      	push	{r4, lr}
 80047d8:	b2c9      	uxtb	r1, r1
 80047da:	4402      	add	r2, r0
 80047dc:	4293      	cmp	r3, r2
 80047de:	4618      	mov	r0, r3
 80047e0:	d101      	bne.n	80047e6 <memchr+0x12>
 80047e2:	2000      	movs	r0, #0
 80047e4:	e003      	b.n	80047ee <memchr+0x1a>
 80047e6:	7804      	ldrb	r4, [r0, #0]
 80047e8:	3301      	adds	r3, #1
 80047ea:	428c      	cmp	r4, r1
 80047ec:	d1f6      	bne.n	80047dc <memchr+0x8>
 80047ee:	bd10      	pop	{r4, pc}

080047f0 <memcpy>:
 80047f0:	440a      	add	r2, r1
 80047f2:	4291      	cmp	r1, r2
 80047f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80047f8:	d100      	bne.n	80047fc <memcpy+0xc>
 80047fa:	4770      	bx	lr
 80047fc:	b510      	push	{r4, lr}
 80047fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004802:	4291      	cmp	r1, r2
 8004804:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004808:	d1f9      	bne.n	80047fe <memcpy+0xe>
 800480a:	bd10      	pop	{r4, pc}

0800480c <memmove>:
 800480c:	4288      	cmp	r0, r1
 800480e:	b510      	push	{r4, lr}
 8004810:	eb01 0402 	add.w	r4, r1, r2
 8004814:	d902      	bls.n	800481c <memmove+0x10>
 8004816:	4284      	cmp	r4, r0
 8004818:	4623      	mov	r3, r4
 800481a:	d807      	bhi.n	800482c <memmove+0x20>
 800481c:	1e43      	subs	r3, r0, #1
 800481e:	42a1      	cmp	r1, r4
 8004820:	d008      	beq.n	8004834 <memmove+0x28>
 8004822:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004826:	f803 2f01 	strb.w	r2, [r3, #1]!
 800482a:	e7f8      	b.n	800481e <memmove+0x12>
 800482c:	4601      	mov	r1, r0
 800482e:	4402      	add	r2, r0
 8004830:	428a      	cmp	r2, r1
 8004832:	d100      	bne.n	8004836 <memmove+0x2a>
 8004834:	bd10      	pop	{r4, pc}
 8004836:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800483a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800483e:	e7f7      	b.n	8004830 <memmove+0x24>

08004840 <_free_r>:
 8004840:	b538      	push	{r3, r4, r5, lr}
 8004842:	4605      	mov	r5, r0
 8004844:	2900      	cmp	r1, #0
 8004846:	d043      	beq.n	80048d0 <_free_r+0x90>
 8004848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800484c:	1f0c      	subs	r4, r1, #4
 800484e:	2b00      	cmp	r3, #0
 8004850:	bfb8      	it	lt
 8004852:	18e4      	addlt	r4, r4, r3
 8004854:	f000 f8d0 	bl	80049f8 <__malloc_lock>
 8004858:	4a1e      	ldr	r2, [pc, #120]	; (80048d4 <_free_r+0x94>)
 800485a:	6813      	ldr	r3, [r2, #0]
 800485c:	4610      	mov	r0, r2
 800485e:	b933      	cbnz	r3, 800486e <_free_r+0x2e>
 8004860:	6063      	str	r3, [r4, #4]
 8004862:	6014      	str	r4, [r2, #0]
 8004864:	4628      	mov	r0, r5
 8004866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800486a:	f000 b8cb 	b.w	8004a04 <__malloc_unlock>
 800486e:	42a3      	cmp	r3, r4
 8004870:	d90a      	bls.n	8004888 <_free_r+0x48>
 8004872:	6821      	ldr	r1, [r4, #0]
 8004874:	1862      	adds	r2, r4, r1
 8004876:	4293      	cmp	r3, r2
 8004878:	bf01      	itttt	eq
 800487a:	681a      	ldreq	r2, [r3, #0]
 800487c:	685b      	ldreq	r3, [r3, #4]
 800487e:	1852      	addeq	r2, r2, r1
 8004880:	6022      	streq	r2, [r4, #0]
 8004882:	6063      	str	r3, [r4, #4]
 8004884:	6004      	str	r4, [r0, #0]
 8004886:	e7ed      	b.n	8004864 <_free_r+0x24>
 8004888:	461a      	mov	r2, r3
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	b10b      	cbz	r3, 8004892 <_free_r+0x52>
 800488e:	42a3      	cmp	r3, r4
 8004890:	d9fa      	bls.n	8004888 <_free_r+0x48>
 8004892:	6811      	ldr	r1, [r2, #0]
 8004894:	1850      	adds	r0, r2, r1
 8004896:	42a0      	cmp	r0, r4
 8004898:	d10b      	bne.n	80048b2 <_free_r+0x72>
 800489a:	6820      	ldr	r0, [r4, #0]
 800489c:	4401      	add	r1, r0
 800489e:	1850      	adds	r0, r2, r1
 80048a0:	4283      	cmp	r3, r0
 80048a2:	6011      	str	r1, [r2, #0]
 80048a4:	d1de      	bne.n	8004864 <_free_r+0x24>
 80048a6:	6818      	ldr	r0, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	4401      	add	r1, r0
 80048ac:	6011      	str	r1, [r2, #0]
 80048ae:	6053      	str	r3, [r2, #4]
 80048b0:	e7d8      	b.n	8004864 <_free_r+0x24>
 80048b2:	d902      	bls.n	80048ba <_free_r+0x7a>
 80048b4:	230c      	movs	r3, #12
 80048b6:	602b      	str	r3, [r5, #0]
 80048b8:	e7d4      	b.n	8004864 <_free_r+0x24>
 80048ba:	6820      	ldr	r0, [r4, #0]
 80048bc:	1821      	adds	r1, r4, r0
 80048be:	428b      	cmp	r3, r1
 80048c0:	bf01      	itttt	eq
 80048c2:	6819      	ldreq	r1, [r3, #0]
 80048c4:	685b      	ldreq	r3, [r3, #4]
 80048c6:	1809      	addeq	r1, r1, r0
 80048c8:	6021      	streq	r1, [r4, #0]
 80048ca:	6063      	str	r3, [r4, #4]
 80048cc:	6054      	str	r4, [r2, #4]
 80048ce:	e7c9      	b.n	8004864 <_free_r+0x24>
 80048d0:	bd38      	pop	{r3, r4, r5, pc}
 80048d2:	bf00      	nop
 80048d4:	2000013c 	.word	0x2000013c

080048d8 <_malloc_r>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	1ccd      	adds	r5, r1, #3
 80048dc:	f025 0503 	bic.w	r5, r5, #3
 80048e0:	3508      	adds	r5, #8
 80048e2:	2d0c      	cmp	r5, #12
 80048e4:	bf38      	it	cc
 80048e6:	250c      	movcc	r5, #12
 80048e8:	2d00      	cmp	r5, #0
 80048ea:	4606      	mov	r6, r0
 80048ec:	db01      	blt.n	80048f2 <_malloc_r+0x1a>
 80048ee:	42a9      	cmp	r1, r5
 80048f0:	d903      	bls.n	80048fa <_malloc_r+0x22>
 80048f2:	230c      	movs	r3, #12
 80048f4:	6033      	str	r3, [r6, #0]
 80048f6:	2000      	movs	r0, #0
 80048f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048fa:	f000 f87d 	bl	80049f8 <__malloc_lock>
 80048fe:	4921      	ldr	r1, [pc, #132]	; (8004984 <_malloc_r+0xac>)
 8004900:	680a      	ldr	r2, [r1, #0]
 8004902:	4614      	mov	r4, r2
 8004904:	b99c      	cbnz	r4, 800492e <_malloc_r+0x56>
 8004906:	4f20      	ldr	r7, [pc, #128]	; (8004988 <_malloc_r+0xb0>)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	b923      	cbnz	r3, 8004916 <_malloc_r+0x3e>
 800490c:	4621      	mov	r1, r4
 800490e:	4630      	mov	r0, r6
 8004910:	f000 f862 	bl	80049d8 <_sbrk_r>
 8004914:	6038      	str	r0, [r7, #0]
 8004916:	4629      	mov	r1, r5
 8004918:	4630      	mov	r0, r6
 800491a:	f000 f85d 	bl	80049d8 <_sbrk_r>
 800491e:	1c43      	adds	r3, r0, #1
 8004920:	d123      	bne.n	800496a <_malloc_r+0x92>
 8004922:	230c      	movs	r3, #12
 8004924:	4630      	mov	r0, r6
 8004926:	6033      	str	r3, [r6, #0]
 8004928:	f000 f86c 	bl	8004a04 <__malloc_unlock>
 800492c:	e7e3      	b.n	80048f6 <_malloc_r+0x1e>
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	1b5b      	subs	r3, r3, r5
 8004932:	d417      	bmi.n	8004964 <_malloc_r+0x8c>
 8004934:	2b0b      	cmp	r3, #11
 8004936:	d903      	bls.n	8004940 <_malloc_r+0x68>
 8004938:	6023      	str	r3, [r4, #0]
 800493a:	441c      	add	r4, r3
 800493c:	6025      	str	r5, [r4, #0]
 800493e:	e004      	b.n	800494a <_malloc_r+0x72>
 8004940:	6863      	ldr	r3, [r4, #4]
 8004942:	42a2      	cmp	r2, r4
 8004944:	bf0c      	ite	eq
 8004946:	600b      	streq	r3, [r1, #0]
 8004948:	6053      	strne	r3, [r2, #4]
 800494a:	4630      	mov	r0, r6
 800494c:	f000 f85a 	bl	8004a04 <__malloc_unlock>
 8004950:	f104 000b 	add.w	r0, r4, #11
 8004954:	1d23      	adds	r3, r4, #4
 8004956:	f020 0007 	bic.w	r0, r0, #7
 800495a:	1ac2      	subs	r2, r0, r3
 800495c:	d0cc      	beq.n	80048f8 <_malloc_r+0x20>
 800495e:	1a1b      	subs	r3, r3, r0
 8004960:	50a3      	str	r3, [r4, r2]
 8004962:	e7c9      	b.n	80048f8 <_malloc_r+0x20>
 8004964:	4622      	mov	r2, r4
 8004966:	6864      	ldr	r4, [r4, #4]
 8004968:	e7cc      	b.n	8004904 <_malloc_r+0x2c>
 800496a:	1cc4      	adds	r4, r0, #3
 800496c:	f024 0403 	bic.w	r4, r4, #3
 8004970:	42a0      	cmp	r0, r4
 8004972:	d0e3      	beq.n	800493c <_malloc_r+0x64>
 8004974:	1a21      	subs	r1, r4, r0
 8004976:	4630      	mov	r0, r6
 8004978:	f000 f82e 	bl	80049d8 <_sbrk_r>
 800497c:	3001      	adds	r0, #1
 800497e:	d1dd      	bne.n	800493c <_malloc_r+0x64>
 8004980:	e7cf      	b.n	8004922 <_malloc_r+0x4a>
 8004982:	bf00      	nop
 8004984:	2000013c 	.word	0x2000013c
 8004988:	20000140 	.word	0x20000140

0800498c <_realloc_r>:
 800498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498e:	4607      	mov	r7, r0
 8004990:	4614      	mov	r4, r2
 8004992:	460e      	mov	r6, r1
 8004994:	b921      	cbnz	r1, 80049a0 <_realloc_r+0x14>
 8004996:	4611      	mov	r1, r2
 8004998:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800499c:	f7ff bf9c 	b.w	80048d8 <_malloc_r>
 80049a0:	b922      	cbnz	r2, 80049ac <_realloc_r+0x20>
 80049a2:	f7ff ff4d 	bl	8004840 <_free_r>
 80049a6:	4625      	mov	r5, r4
 80049a8:	4628      	mov	r0, r5
 80049aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049ac:	f000 f830 	bl	8004a10 <_malloc_usable_size_r>
 80049b0:	42a0      	cmp	r0, r4
 80049b2:	d20f      	bcs.n	80049d4 <_realloc_r+0x48>
 80049b4:	4621      	mov	r1, r4
 80049b6:	4638      	mov	r0, r7
 80049b8:	f7ff ff8e 	bl	80048d8 <_malloc_r>
 80049bc:	4605      	mov	r5, r0
 80049be:	2800      	cmp	r0, #0
 80049c0:	d0f2      	beq.n	80049a8 <_realloc_r+0x1c>
 80049c2:	4631      	mov	r1, r6
 80049c4:	4622      	mov	r2, r4
 80049c6:	f7ff ff13 	bl	80047f0 <memcpy>
 80049ca:	4631      	mov	r1, r6
 80049cc:	4638      	mov	r0, r7
 80049ce:	f7ff ff37 	bl	8004840 <_free_r>
 80049d2:	e7e9      	b.n	80049a8 <_realloc_r+0x1c>
 80049d4:	4635      	mov	r5, r6
 80049d6:	e7e7      	b.n	80049a8 <_realloc_r+0x1c>

080049d8 <_sbrk_r>:
 80049d8:	b538      	push	{r3, r4, r5, lr}
 80049da:	2300      	movs	r3, #0
 80049dc:	4d05      	ldr	r5, [pc, #20]	; (80049f4 <_sbrk_r+0x1c>)
 80049de:	4604      	mov	r4, r0
 80049e0:	4608      	mov	r0, r1
 80049e2:	602b      	str	r3, [r5, #0]
 80049e4:	f7fd fba0 	bl	8002128 <_sbrk>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	d102      	bne.n	80049f2 <_sbrk_r+0x1a>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	b103      	cbz	r3, 80049f2 <_sbrk_r+0x1a>
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
 80049f4:	20000250 	.word	0x20000250

080049f8 <__malloc_lock>:
 80049f8:	4801      	ldr	r0, [pc, #4]	; (8004a00 <__malloc_lock+0x8>)
 80049fa:	f000 b811 	b.w	8004a20 <__retarget_lock_acquire_recursive>
 80049fe:	bf00      	nop
 8004a00:	20000258 	.word	0x20000258

08004a04 <__malloc_unlock>:
 8004a04:	4801      	ldr	r0, [pc, #4]	; (8004a0c <__malloc_unlock+0x8>)
 8004a06:	f000 b80c 	b.w	8004a22 <__retarget_lock_release_recursive>
 8004a0a:	bf00      	nop
 8004a0c:	20000258 	.word	0x20000258

08004a10 <_malloc_usable_size_r>:
 8004a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a14:	1f18      	subs	r0, r3, #4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bfbc      	itt	lt
 8004a1a:	580b      	ldrlt	r3, [r1, r0]
 8004a1c:	18c0      	addlt	r0, r0, r3
 8004a1e:	4770      	bx	lr

08004a20 <__retarget_lock_acquire_recursive>:
 8004a20:	4770      	bx	lr

08004a22 <__retarget_lock_release_recursive>:
 8004a22:	4770      	bx	lr

08004a24 <_init>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	bf00      	nop
 8004a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2a:	bc08      	pop	{r3}
 8004a2c:	469e      	mov	lr, r3
 8004a2e:	4770      	bx	lr

08004a30 <_fini>:
 8004a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a32:	bf00      	nop
 8004a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a36:	bc08      	pop	{r3}
 8004a38:	469e      	mov	lr, r3
 8004a3a:	4770      	bx	lr
