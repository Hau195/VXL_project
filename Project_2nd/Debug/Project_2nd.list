
Project_2nd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004828  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004934  08004934  00014934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800499c  0800499c  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  0800499c  0800499c  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800499c  0800499c  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800499c  0800499c  0001499c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049a0  080049a0  000149a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  080049a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200000c0  08004a64  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08004a64  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d694  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255d  00000000  00000000  0002d77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  0002fce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  00030a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181b3  00000000  00000000  000316a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffd0  00000000  00000000  00049853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088c66  00000000  00000000  00059823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2489  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a68  00000000  00000000  000e24dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c0 	.word	0x200000c0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800491c 	.word	0x0800491c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c4 	.word	0x200000c4
 8000148:	0800491c 	.word	0x0800491c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <Pedestrian_run>:

TIM_HandleTypeDef htim3;

int duty_cycle = 0;

void Pedestrian_run(){
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	switch(status)
 8000744:	4b4d      	ldr	r3, [pc, #308]	; (800087c <Pedestrian_run+0x13c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3b01      	subs	r3, #1
 800074a:	2b03      	cmp	r3, #3
 800074c:	f200 8093 	bhi.w	8000876 <Pedestrian_run+0x136>
 8000750:	a201      	add	r2, pc, #4	; (adr r2, 8000758 <Pedestrian_run+0x18>)
 8000752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000756:	bf00      	nop
 8000758:	08000769 	.word	0x08000769
 800075c:	080007a9 	.word	0x080007a9
 8000760:	08000829 	.word	0x08000829
 8000764:	080007e9 	.word	0x080007e9
	{
	case Auto_red:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800076e:	4844      	ldr	r0, [pc, #272]	; (8000880 <Pedestrian_run+0x140>)
 8000770:	f001 ffc3 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077a:	4842      	ldr	r0, [pc, #264]	; (8000884 <Pedestrian_run+0x144>)
 800077c:	f001 ffbd 	bl	80026fa <HAL_GPIO_WritePin>

		if(timer2_flag == 1){
 8000780:	4b41      	ldr	r3, [pc, #260]	; (8000888 <Pedestrian_run+0x148>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d16f      	bne.n	8000868 <Pedestrian_run+0x128>
			ped_flag = 0;
 8000788:	4b40      	ldr	r3, [pc, #256]	; (800088c <Pedestrian_run+0x14c>)
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000794:	483a      	ldr	r0, [pc, #232]	; (8000880 <Pedestrian_run+0x140>)
 8000796:	f001 ffb0 	bl	80026fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	4838      	ldr	r0, [pc, #224]	; (8000884 <Pedestrian_run+0x144>)
 80007a2:	f001 ffaa 	bl	80026fa <HAL_GPIO_WritePin>
			//__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 999);
		}

		break;
 80007a6:	e05f      	b.n	8000868 <Pedestrian_run+0x128>
	case Auto_change:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ae:	4834      	ldr	r0, [pc, #208]	; (8000880 <Pedestrian_run+0x140>)
 80007b0:	f001 ffa3 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ba:	4832      	ldr	r0, [pc, #200]	; (8000884 <Pedestrian_run+0x144>)
 80007bc:	f001 ff9d 	bl	80026fa <HAL_GPIO_WritePin>
		if(timer2_flag == 1){
 80007c0:	4b31      	ldr	r3, [pc, #196]	; (8000888 <Pedestrian_run+0x148>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d151      	bne.n	800086c <Pedestrian_run+0x12c>
			ped_flag = 0;
 80007c8:	4b30      	ldr	r3, [pc, #192]	; (800088c <Pedestrian_run+0x14c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d4:	482a      	ldr	r0, [pc, #168]	; (8000880 <Pedestrian_run+0x140>)
 80007d6:	f001 ff90 	bl	80026fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e0:	4828      	ldr	r0, [pc, #160]	; (8000884 <Pedestrian_run+0x144>)
 80007e2:	f001 ff8a 	bl	80026fa <HAL_GPIO_WritePin>
			//__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 999);
		}
		break;
 80007e6:	e041      	b.n	800086c <Pedestrian_run+0x12c>
	case Auto_green:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ee:	4824      	ldr	r0, [pc, #144]	; (8000880 <Pedestrian_run+0x140>)
 80007f0:	f001 ff83 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 	SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fa:	4822      	ldr	r0, [pc, #136]	; (8000884 <Pedestrian_run+0x144>)
 80007fc:	f001 ff7d 	bl	80026fa <HAL_GPIO_WritePin>
		if(timer2_flag == 1){
 8000800:	4b21      	ldr	r3, [pc, #132]	; (8000888 <Pedestrian_run+0x148>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d133      	bne.n	8000870 <Pedestrian_run+0x130>
			ped_flag = 0;
 8000808:	4b20      	ldr	r3, [pc, #128]	; (800088c <Pedestrian_run+0x14c>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000814:	481a      	ldr	r0, [pc, #104]	; (8000880 <Pedestrian_run+0x140>)
 8000816:	f001 ff70 	bl	80026fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000820:	4818      	ldr	r0, [pc, #96]	; (8000884 <Pedestrian_run+0x144>)
 8000822:	f001 ff6a 	bl	80026fa <HAL_GPIO_WritePin>
			//__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 999);
		}
		break;
 8000826:	e023      	b.n	8000870 <Pedestrian_run+0x130>
	case Auto_yellow:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800082e:	4814      	ldr	r0, [pc, #80]	; (8000880 <Pedestrian_run+0x140>)
 8000830:	f001 ff63 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  SET);
 8000834:	2201      	movs	r2, #1
 8000836:	f44f 7180 	mov.w	r1, #256	; 0x100
 800083a:	4812      	ldr	r0, [pc, #72]	; (8000884 <Pedestrian_run+0x144>)
 800083c:	f001 ff5d 	bl	80026fa <HAL_GPIO_WritePin>
		if(timer2_flag == 1){
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <Pedestrian_run+0x148>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d115      	bne.n	8000874 <Pedestrian_run+0x134>
			ped_flag = 0;
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <Pedestrian_run+0x14c>)
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000854:	480a      	ldr	r0, [pc, #40]	; (8000880 <Pedestrian_run+0x140>)
 8000856:	f001 ff50 	bl	80026fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000860:	4808      	ldr	r0, [pc, #32]	; (8000884 <Pedestrian_run+0x144>)
 8000862:	f001 ff4a 	bl	80026fa <HAL_GPIO_WritePin>
			//__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 999);
		}
		break;
 8000866:	e005      	b.n	8000874 <Pedestrian_run+0x134>
		break;
 8000868:	bf00      	nop
 800086a:	e004      	b.n	8000876 <Pedestrian_run+0x136>
		break;
 800086c:	bf00      	nop
 800086e:	e002      	b.n	8000876 <Pedestrian_run+0x136>
		break;
 8000870:	bf00      	nop
 8000872:	e000      	b.n	8000876 <Pedestrian_run+0x136>
		break;
 8000874:	bf00      	nop
	}
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000110 	.word	0x20000110
 8000880:	40010c00 	.word	0x40010c00
 8000884:	40010800 	.word	0x40010800
 8000888:	20000120 	.word	0x20000120
 800088c:	20000114 	.word	0x20000114

08000890 <buzzer_run>:
void buzzer_run(){
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, duty_cycle);
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <buzzer_run+0x28>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <buzzer_run+0x2c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	635a      	str	r2, [r3, #52]	; 0x34
	if(duty_cycle > 999) duty_cycle = 0 ;
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <buzzer_run+0x28>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008a6:	db02      	blt.n	80008ae <buzzer_run+0x1e>
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <buzzer_run+0x28>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	200000dc 	.word	0x200000dc
 80008bc:	20000144 	.word	0x20000144

080008c0 <mapFloat>:

float mapFloat(float x, float x_min, float x_max, float y_min, float y_max){
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b087      	sub	sp, #28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	603b      	str	r3, [r7, #0]
  float y;
  y = y_min + (x - x_min)/(x_max - x_min)*(y_max - y_min);
 80008ce:	68b9      	ldr	r1, [r7, #8]
 80008d0:	68f8      	ldr	r0, [r7, #12]
 80008d2:	f7ff fc3f 	bl	8000154 <__aeabi_fsub>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461c      	mov	r4, r3
 80008da:	68b9      	ldr	r1, [r7, #8]
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff fc39 	bl	8000154 <__aeabi_fsub>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4619      	mov	r1, r3
 80008e6:	4620      	mov	r0, r4
 80008e8:	f7ff fdf2 	bl	80004d0 <__aeabi_fdiv>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461c      	mov	r4, r3
 80008f0:	6839      	ldr	r1, [r7, #0]
 80008f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80008f4:	f7ff fc2e 	bl	8000154 <__aeabi_fsub>
 80008f8:	4603      	mov	r3, r0
 80008fa:	4619      	mov	r1, r3
 80008fc:	4620      	mov	r0, r4
 80008fe:	f7ff fd33 	bl	8000368 <__aeabi_fmul>
 8000902:	4603      	mov	r3, r0
 8000904:	4619      	mov	r1, r3
 8000906:	6838      	ldr	r0, [r7, #0]
 8000908:	f7ff fc26 	bl	8000158 <__addsf3>
 800090c:	4603      	mov	r3, r0
 800090e:	617b      	str	r3, [r7, #20]
  y = (y>y_max)?y_max:((y<y_min)?y_min:y);
 8000910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000912:	6978      	ldr	r0, [r7, #20]
 8000914:	f7ff fee4 	bl	80006e0 <__aeabi_fcmpgt>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <mapFloat+0x62>
 800091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000920:	e009      	b.n	8000936 <mapFloat+0x76>
 8000922:	6839      	ldr	r1, [r7, #0]
 8000924:	6978      	ldr	r0, [r7, #20]
 8000926:	f7ff febd 	bl	80006a4 <__aeabi_fcmplt>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <mapFloat+0x74>
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	e000      	b.n	8000936 <mapFloat+0x76>
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	617b      	str	r3, [r7, #20]
  return y;
 8000938:	697b      	ldr	r3, [r7, #20]
}
 800093a:	4618      	mov	r0, r3
 800093c:	371c      	adds	r7, #28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd90      	pop	{r4, r7, pc}
	...

08000944 <Is_button1_pressed>:
int button2_long_pressed_flag = 0;
int button3_long_pressed_flag = 0;
int buttonPED_long_pressed_flag = 0;


int Is_button1_pressed(){
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <Is_button1_pressed+0x20>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d104      	bne.n	800095a <Is_button1_pressed+0x16>
		button1_flag = 0;
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <Is_button1_pressed+0x20>)
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
		return 1;
 8000956:	2301      	movs	r3, #1
 8000958:	e000      	b.n	800095c <Is_button1_pressed+0x18>
	}
	else{
		return 0;
 800095a:	2300      	movs	r3, #0
	}
}
 800095c:	4618      	mov	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	200000e0 	.word	0x200000e0

08000968 <Is_button2_pressed>:
int Is_button2_pressed(){
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <Is_button2_pressed+0x20>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d104      	bne.n	800097e <Is_button2_pressed+0x16>
		button2_flag = 0;
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <Is_button2_pressed+0x20>)
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
		return 1;
 800097a:	2301      	movs	r3, #1
 800097c:	e000      	b.n	8000980 <Is_button2_pressed+0x18>
	}
	else{
		return 0;
 800097e:	2300      	movs	r3, #0
	}
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	200000e4 	.word	0x200000e4

0800098c <Is_button3_pressed>:
int Is_button3_pressed(){
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <Is_button3_pressed+0x20>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d104      	bne.n	80009a2 <Is_button3_pressed+0x16>
		button3_flag = 0;
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <Is_button3_pressed+0x20>)
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
		return 1;
 800099e:	2301      	movs	r3, #1
 80009a0:	e000      	b.n	80009a4 <Is_button3_pressed+0x18>
	}
	else{
		return 0;
 80009a2:	2300      	movs	r3, #0
	}
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	200000e8 	.word	0x200000e8

080009b0 <Is_buttonPED_pressed>:
int Is_buttonPED_pressed(){
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
	if(buttonPED_flag == 1){
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <Is_buttonPED_pressed+0x20>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d104      	bne.n	80009c6 <Is_buttonPED_pressed+0x16>
		buttonPED_flag = 0;
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <Is_buttonPED_pressed+0x20>)
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
		return 1;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e000      	b.n	80009c8 <Is_buttonPED_pressed+0x18>
	}
	else{
		return 0;
 80009c6:	2300      	movs	r3, #0
	}
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	200000ec 	.word	0x200000ec

080009d4 <Sub_key_pressed>:
		return 0;
	}
}


void Sub_key_pressed(int index){
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	if(index == 0)	button1_flag = 1;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d102      	bne.n	80009e8 <Sub_key_pressed+0x14>
 80009e2:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <Sub_key_pressed+0x44>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
	if(index == 1)	button2_flag = 1;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d102      	bne.n	80009f4 <Sub_key_pressed+0x20>
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <Sub_key_pressed+0x48>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	601a      	str	r2, [r3, #0]
	if(index == 2)	button3_flag = 1;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d102      	bne.n	8000a00 <Sub_key_pressed+0x2c>
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <Sub_key_pressed+0x4c>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
	if(index == 3)	buttonPED_flag = 1;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b03      	cmp	r3, #3
 8000a04:	d102      	bne.n	8000a0c <Sub_key_pressed+0x38>
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <Sub_key_pressed+0x50>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	601a      	str	r2, [r3, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	200000e0 	.word	0x200000e0
 8000a1c:	200000e4 	.word	0x200000e4
 8000a20:	200000e8 	.word	0x200000e8
 8000a24:	200000ec 	.word	0x200000ec

08000a28 <Button_undebounce>:
	if(index == 0)	button1_long_pressed_flag = 1;
	if(index == 1)	button2_long_pressed_flag = 1;
	if(index == 2)	button3_long_pressed_flag = 1;
	if(index == 3)	buttonPED_long_pressed_flag = 1;
}
void Button_undebounce(){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
	for(int i= 0; i<= 3;i++){
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	e07d      	b.n	8000b30 <Button_undebounce+0x108>
	State0[i] = State1[i];
 8000a34:	4a43      	ldr	r2, [pc, #268]	; (8000b44 <Button_undebounce+0x11c>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a3c:	4942      	ldr	r1, [pc, #264]	; (8000b48 <Button_undebounce+0x120>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	State1[i] = State2[i];
 8000a44:	4a41      	ldr	r2, [pc, #260]	; (8000b4c <Button_undebounce+0x124>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a4c:	493d      	ldr	r1, [pc, #244]	; (8000b44 <Button_undebounce+0x11c>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	State2[0]  = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8000a54:	2102      	movs	r1, #2
 8000a56:	483e      	ldr	r0, [pc, #248]	; (8000b50 <Button_undebounce+0x128>)
 8000a58:	f001 fe38 	bl	80026cc <HAL_GPIO_ReadPin>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b3a      	ldr	r3, [pc, #232]	; (8000b4c <Button_undebounce+0x124>)
 8000a62:	601a      	str	r2, [r3, #0]
	State2[1]  = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000a64:	2110      	movs	r1, #16
 8000a66:	483a      	ldr	r0, [pc, #232]	; (8000b50 <Button_undebounce+0x128>)
 8000a68:	f001 fe30 	bl	80026cc <HAL_GPIO_ReadPin>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4b36      	ldr	r3, [pc, #216]	; (8000b4c <Button_undebounce+0x124>)
 8000a72:	605a      	str	r2, [r3, #4]
	State2[2]  = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8000a74:	2101      	movs	r1, #1
 8000a76:	4837      	ldr	r0, [pc, #220]	; (8000b54 <Button_undebounce+0x12c>)
 8000a78:	f001 fe28 	bl	80026cc <HAL_GPIO_ReadPin>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <Button_undebounce+0x124>)
 8000a82:	609a      	str	r2, [r3, #8]
	State2[3]  = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000a84:	2101      	movs	r1, #1
 8000a86:	4832      	ldr	r0, [pc, #200]	; (8000b50 <Button_undebounce+0x128>)
 8000a88:	f001 fe20 	bl	80026cc <HAL_GPIO_ReadPin>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	461a      	mov	r2, r3
 8000a90:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <Button_undebounce+0x124>)
 8000a92:	60da      	str	r2, [r3, #12]

	if((State0[i] == State1[i]) && (State1[i] == State2[i])){
 8000a94:	4a2c      	ldr	r2, [pc, #176]	; (8000b48 <Button_undebounce+0x120>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a9c:	4929      	ldr	r1, [pc, #164]	; (8000b44 <Button_undebounce+0x11c>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d140      	bne.n	8000b2a <Button_undebounce+0x102>
 8000aa8:	4a26      	ldr	r2, [pc, #152]	; (8000b44 <Button_undebounce+0x11c>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ab0:	4926      	ldr	r1, [pc, #152]	; (8000b4c <Button_undebounce+0x124>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d136      	bne.n	8000b2a <Button_undebounce+0x102>
		if(State2[i] != State3[i]){
 8000abc:	4a23      	ldr	r2, [pc, #140]	; (8000b4c <Button_undebounce+0x124>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ac4:	4924      	ldr	r1, [pc, #144]	; (8000b58 <Button_undebounce+0x130>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d015      	beq.n	8000afc <Button_undebounce+0xd4>
			State3[i] = State2[i];
 8000ad0:	4a1e      	ldr	r2, [pc, #120]	; (8000b4c <Button_undebounce+0x124>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ad8:	491f      	ldr	r1, [pc, #124]	; (8000b58 <Button_undebounce+0x130>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(State3[i] == Press_state){
 8000ae0:	4a1d      	ldr	r2, [pc, #116]	; (8000b58 <Button_undebounce+0x130>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d11e      	bne.n	8000b2a <Button_undebounce+0x102>
				//TODO
				Waiting_time = 300;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <Button_undebounce+0x134>)
 8000aee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000af2:	601a      	str	r2, [r3, #0]
				Sub_key_pressed(i);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ff6d 	bl	80009d4 <Sub_key_pressed>
 8000afa:	e016      	b.n	8000b2a <Button_undebounce+0x102>
			}
		}
		else{
			if(State3[i] == Press_state){
 8000afc:	4a16      	ldr	r2, [pc, #88]	; (8000b58 <Button_undebounce+0x130>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d110      	bne.n	8000b2a <Button_undebounce+0x102>
			Waiting_time --;
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <Button_undebounce+0x134>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <Button_undebounce+0x134>)
 8000b10:	6013      	str	r3, [r2, #0]
			if(Waiting_time == 0){
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <Button_undebounce+0x134>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d107      	bne.n	8000b2a <Button_undebounce+0x102>
				//TODO
				Waiting_time = 100;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <Button_undebounce+0x134>)
 8000b1c:	2264      	movs	r2, #100	; 0x64
 8000b1e:	601a      	str	r2, [r3, #0]
				//Sub_long_pressed(i);
				State3[i] = Normal_state;
 8000b20:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <Button_undebounce+0x130>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2101      	movs	r1, #1
 8000b26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i= 0; i<= 3;i++){
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	f77f af7e 	ble.w	8000a34 <Button_undebounce+0xc>
			}
		}

	}
}
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000010 	.word	0x20000010
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	20000020 	.word	0x20000020
 8000b50:	40010800 	.word	0x40010800
 8000b54:	40010c00 	.word	0x40010c00
 8000b58:	20000030 	.word	0x20000030
 8000b5c:	20000040 	.word	0x20000040

08000b60 <red_seg_update>:
		buffer_led[0] = 1;
		buffer_led[1] = 0;
		break;
}
}
void red_seg_update(){
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
	buffer_led[0] = duration/10;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <red_seg_update+0x70>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a1a      	ldr	r2, [pc, #104]	; (8000bd4 <red_seg_update+0x74>)
 8000b6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b6e:	1092      	asrs	r2, r2, #2
 8000b70:	17db      	asrs	r3, r3, #31
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	4a18      	ldr	r2, [pc, #96]	; (8000bd8 <red_seg_update+0x78>)
 8000b76:	6013      	str	r3, [r2, #0]
	buffer_led[1] = duration%10;
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <red_seg_update+0x70>)
 8000b7a:	6819      	ldr	r1, [r3, #0]
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <red_seg_update+0x74>)
 8000b7e:	fb83 2301 	smull	r2, r3, r3, r1
 8000b82:	109a      	asrs	r2, r3, #2
 8000b84:	17cb      	asrs	r3, r1, #31
 8000b86:	1ad2      	subs	r2, r2, r3
 8000b88:	4613      	mov	r3, r2
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	4413      	add	r3, r2
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	1aca      	subs	r2, r1, r3
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <red_seg_update+0x78>)
 8000b94:	605a      	str	r2, [r3, #4]
	buffer_led[2] = duration2/10;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <red_seg_update+0x7c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <red_seg_update+0x74>)
 8000b9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba0:	1092      	asrs	r2, r2, #2
 8000ba2:	17db      	asrs	r3, r3, #31
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	4a0c      	ldr	r2, [pc, #48]	; (8000bd8 <red_seg_update+0x78>)
 8000ba8:	6093      	str	r3, [r2, #8]
	buffer_led[3] = duration2%10;
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <red_seg_update+0x7c>)
 8000bac:	6819      	ldr	r1, [r3, #0]
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <red_seg_update+0x74>)
 8000bb0:	fb83 2301 	smull	r2, r3, r3, r1
 8000bb4:	109a      	asrs	r2, r3, #2
 8000bb6:	17cb      	asrs	r3, r1, #31
 8000bb8:	1ad2      	subs	r2, r2, r3
 8000bba:	4613      	mov	r3, r2
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	4413      	add	r3, r2
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	1aca      	subs	r2, r1, r3
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <red_seg_update+0x78>)
 8000bc6:	60da      	str	r2, [r3, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	200000f8 	.word	0x200000f8
 8000bd4:	66666667 	.word	0x66666667
 8000bd8:	20000100 	.word	0x20000100
 8000bdc:	200000fc 	.word	0x200000fc

08000be0 <red_modify_update>:
void red_modify_update(){
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
	buffer_led[0] = duration_value/10;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <red_modify_update+0x4c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a11      	ldr	r2, [pc, #68]	; (8000c30 <red_modify_update+0x50>)
 8000bea:	fb82 1203 	smull	r1, r2, r2, r3
 8000bee:	1092      	asrs	r2, r2, #2
 8000bf0:	17db      	asrs	r3, r3, #31
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <red_modify_update+0x54>)
 8000bf6:	6013      	str	r3, [r2, #0]
	buffer_led[1] = duration_value%10;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <red_modify_update+0x4c>)
 8000bfa:	6819      	ldr	r1, [r3, #0]
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <red_modify_update+0x50>)
 8000bfe:	fb83 2301 	smull	r2, r3, r3, r1
 8000c02:	109a      	asrs	r2, r3, #2
 8000c04:	17cb      	asrs	r3, r1, #31
 8000c06:	1ad2      	subs	r2, r2, r3
 8000c08:	4613      	mov	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4413      	add	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	1aca      	subs	r2, r1, r3
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <red_modify_update+0x54>)
 8000c14:	605a      	str	r2, [r3, #4]
	buffer_led[2] = 0;
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <red_modify_update+0x54>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
	buffer_led[3] = 1;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <red_modify_update+0x54>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	60da      	str	r2, [r3, #12]
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	200000f4 	.word	0x200000f4
 8000c30:	66666667 	.word	0x66666667
 8000c34:	20000100 	.word	0x20000100

08000c38 <yellow_seg_update>:
void yellow_seg_update(){
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
	buffer_led[0] = duration/10;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <yellow_seg_update+0x70>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a1a      	ldr	r2, [pc, #104]	; (8000cac <yellow_seg_update+0x74>)
 8000c42:	fb82 1203 	smull	r1, r2, r2, r3
 8000c46:	1092      	asrs	r2, r2, #2
 8000c48:	17db      	asrs	r3, r3, #31
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	4a18      	ldr	r2, [pc, #96]	; (8000cb0 <yellow_seg_update+0x78>)
 8000c4e:	6013      	str	r3, [r2, #0]
	buffer_led[1] = duration%10;
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <yellow_seg_update+0x70>)
 8000c52:	6819      	ldr	r1, [r3, #0]
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <yellow_seg_update+0x74>)
 8000c56:	fb83 2301 	smull	r2, r3, r3, r1
 8000c5a:	109a      	asrs	r2, r3, #2
 8000c5c:	17cb      	asrs	r3, r1, #31
 8000c5e:	1ad2      	subs	r2, r2, r3
 8000c60:	4613      	mov	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	1aca      	subs	r2, r1, r3
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <yellow_seg_update+0x78>)
 8000c6c:	605a      	str	r2, [r3, #4]
	buffer_led[2] = duration/10;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <yellow_seg_update+0x70>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <yellow_seg_update+0x74>)
 8000c74:	fb82 1203 	smull	r1, r2, r2, r3
 8000c78:	1092      	asrs	r2, r2, #2
 8000c7a:	17db      	asrs	r3, r3, #31
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	4a0c      	ldr	r2, [pc, #48]	; (8000cb0 <yellow_seg_update+0x78>)
 8000c80:	6093      	str	r3, [r2, #8]
	buffer_led[3] = duration%10;
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <yellow_seg_update+0x70>)
 8000c84:	6819      	ldr	r1, [r3, #0]
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <yellow_seg_update+0x74>)
 8000c88:	fb83 2301 	smull	r2, r3, r3, r1
 8000c8c:	109a      	asrs	r2, r3, #2
 8000c8e:	17cb      	asrs	r3, r1, #31
 8000c90:	1ad2      	subs	r2, r2, r3
 8000c92:	4613      	mov	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	1aca      	subs	r2, r1, r3
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <yellow_seg_update+0x78>)
 8000c9e:	60da      	str	r2, [r3, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	200000f8 	.word	0x200000f8
 8000cac:	66666667 	.word	0x66666667
 8000cb0:	20000100 	.word	0x20000100

08000cb4 <yellow_modify_update>:
void yellow_modify_update(){
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
	buffer_led[0] = duration_value/10;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <yellow_modify_update+0x4c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a11      	ldr	r2, [pc, #68]	; (8000d04 <yellow_modify_update+0x50>)
 8000cbe:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc2:	1092      	asrs	r2, r2, #2
 8000cc4:	17db      	asrs	r3, r3, #31
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <yellow_modify_update+0x54>)
 8000cca:	6013      	str	r3, [r2, #0]
	buffer_led[1] = duration_value%10;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <yellow_modify_update+0x4c>)
 8000cce:	6819      	ldr	r1, [r3, #0]
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <yellow_modify_update+0x50>)
 8000cd2:	fb83 2301 	smull	r2, r3, r3, r1
 8000cd6:	109a      	asrs	r2, r3, #2
 8000cd8:	17cb      	asrs	r3, r1, #31
 8000cda:	1ad2      	subs	r2, r2, r3
 8000cdc:	4613      	mov	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	1aca      	subs	r2, r1, r3
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <yellow_modify_update+0x54>)
 8000ce8:	605a      	str	r2, [r3, #4]
	buffer_led[2] = 0;
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <yellow_modify_update+0x54>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
	buffer_led[3] = 2;
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <yellow_modify_update+0x54>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	60da      	str	r2, [r3, #12]
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	200000f4 	.word	0x200000f4
 8000d04:	66666667 	.word	0x66666667
 8000d08:	20000100 	.word	0x20000100

08000d0c <green_seg_update>:
void green_seg_update(){
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
	buffer_led[0] = duration/10;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <green_seg_update+0x70>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a1a      	ldr	r2, [pc, #104]	; (8000d80 <green_seg_update+0x74>)
 8000d16:	fb82 1203 	smull	r1, r2, r2, r3
 8000d1a:	1092      	asrs	r2, r2, #2
 8000d1c:	17db      	asrs	r3, r3, #31
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	4a18      	ldr	r2, [pc, #96]	; (8000d84 <green_seg_update+0x78>)
 8000d22:	6013      	str	r3, [r2, #0]
	buffer_led[1] = duration%10;
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <green_seg_update+0x70>)
 8000d26:	6819      	ldr	r1, [r3, #0]
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <green_seg_update+0x74>)
 8000d2a:	fb83 2301 	smull	r2, r3, r3, r1
 8000d2e:	109a      	asrs	r2, r3, #2
 8000d30:	17cb      	asrs	r3, r1, #31
 8000d32:	1ad2      	subs	r2, r2, r3
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	1aca      	subs	r2, r1, r3
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <green_seg_update+0x78>)
 8000d40:	605a      	str	r2, [r3, #4]
	buffer_led[2] = duration2/10;
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <green_seg_update+0x7c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <green_seg_update+0x74>)
 8000d48:	fb82 1203 	smull	r1, r2, r2, r3
 8000d4c:	1092      	asrs	r2, r2, #2
 8000d4e:	17db      	asrs	r3, r3, #31
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <green_seg_update+0x78>)
 8000d54:	6093      	str	r3, [r2, #8]
	buffer_led[3] = duration2%10;
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <green_seg_update+0x7c>)
 8000d58:	6819      	ldr	r1, [r3, #0]
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <green_seg_update+0x74>)
 8000d5c:	fb83 2301 	smull	r2, r3, r3, r1
 8000d60:	109a      	asrs	r2, r3, #2
 8000d62:	17cb      	asrs	r3, r1, #31
 8000d64:	1ad2      	subs	r2, r2, r3
 8000d66:	4613      	mov	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	1aca      	subs	r2, r1, r3
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <green_seg_update+0x78>)
 8000d72:	60da      	str	r2, [r3, #12]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	200000f8 	.word	0x200000f8
 8000d80:	66666667 	.word	0x66666667
 8000d84:	20000100 	.word	0x20000100
 8000d88:	200000fc 	.word	0x200000fc

08000d8c <green_modify_update>:
void green_modify_update(){
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
	buffer_led[0] = duration_value/10;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <green_modify_update+0x4c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a11      	ldr	r2, [pc, #68]	; (8000ddc <green_modify_update+0x50>)
 8000d96:	fb82 1203 	smull	r1, r2, r2, r3
 8000d9a:	1092      	asrs	r2, r2, #2
 8000d9c:	17db      	asrs	r3, r3, #31
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <green_modify_update+0x54>)
 8000da2:	6013      	str	r3, [r2, #0]
	buffer_led[1] = duration_value%10;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <green_modify_update+0x4c>)
 8000da6:	6819      	ldr	r1, [r3, #0]
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <green_modify_update+0x50>)
 8000daa:	fb83 2301 	smull	r2, r3, r3, r1
 8000dae:	109a      	asrs	r2, r3, #2
 8000db0:	17cb      	asrs	r3, r1, #31
 8000db2:	1ad2      	subs	r2, r2, r3
 8000db4:	4613      	mov	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	1aca      	subs	r2, r1, r3
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <green_modify_update+0x54>)
 8000dc0:	605a      	str	r2, [r3, #4]
	buffer_led[2] = 0;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <green_modify_update+0x54>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
	buffer_led[3] = 3;
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <green_modify_update+0x54>)
 8000dca:	2203      	movs	r2, #3
 8000dcc:	60da      	str	r2, [r3, #12]
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200000f4 	.word	0x200000f4
 8000ddc:	66666667 	.word	0x66666667
 8000de0:	20000100 	.word	0x20000100

08000de4 <traffic_light>:
void traffic_light(int colour){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b06      	subs	r3, #6
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	f200 8087 	bhi.w	8000f04 <traffic_light+0x120>
 8000df6:	a201      	add	r2, pc, #4	; (adr r2, 8000dfc <traffic_light+0x18>)
 8000df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfc:	08000e0d 	.word	0x08000e0d
 8000e00:	08000e4b 	.word	0x08000e4b
 8000e04:	08000e89 	.word	0x08000e89
 8000e08:	08000ec7 	.word	0x08000ec7
	switch(colour){
	case Reset:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2101      	movs	r1, #1
 8000e10:	483e      	ldr	r0, [pc, #248]	; (8000f0c <traffic_light+0x128>)
 8000e12:	f001 fc72 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2102      	movs	r1, #2
 8000e1a:	483c      	ldr	r0, [pc, #240]	; (8000f0c <traffic_light+0x128>)
 8000e1c:	f001 fc6d 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2104      	movs	r1, #4
 8000e24:	4839      	ldr	r0, [pc, #228]	; (8000f0c <traffic_light+0x128>)
 8000e26:	f001 fc68 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2108      	movs	r1, #8
 8000e2e:	4837      	ldr	r0, [pc, #220]	; (8000f0c <traffic_light+0x128>)
 8000e30:	f001 fc63 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2110      	movs	r1, #16
 8000e38:	4834      	ldr	r0, [pc, #208]	; (8000f0c <traffic_light+0x128>)
 8000e3a:	f001 fc5e 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2120      	movs	r1, #32
 8000e42:	4832      	ldr	r0, [pc, #200]	; (8000f0c <traffic_light+0x128>)
 8000e44:	f001 fc59 	bl	80026fa <HAL_GPIO_WritePin>
		break;
 8000e48:	e05c      	b.n	8000f04 <traffic_light+0x120>
	case Red:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	482f      	ldr	r0, [pc, #188]	; (8000f0c <traffic_light+0x128>)
 8000e50:	f001 fc53 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2102      	movs	r1, #2
 8000e58:	482c      	ldr	r0, [pc, #176]	; (8000f0c <traffic_light+0x128>)
 8000e5a:	f001 fc4e 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2104      	movs	r1, #4
 8000e62:	482a      	ldr	r0, [pc, #168]	; (8000f0c <traffic_light+0x128>)
 8000e64:	f001 fc49 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2108      	movs	r1, #8
 8000e6c:	4827      	ldr	r0, [pc, #156]	; (8000f0c <traffic_light+0x128>)
 8000e6e:	f001 fc44 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2110      	movs	r1, #16
 8000e76:	4825      	ldr	r0, [pc, #148]	; (8000f0c <traffic_light+0x128>)
 8000e78:	f001 fc3f 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2120      	movs	r1, #32
 8000e80:	4822      	ldr	r0, [pc, #136]	; (8000f0c <traffic_light+0x128>)
 8000e82:	f001 fc3a 	bl	80026fa <HAL_GPIO_WritePin>
		break;
 8000e86:	e03d      	b.n	8000f04 <traffic_light+0x120>
	case Yellow:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	481f      	ldr	r0, [pc, #124]	; (8000f0c <traffic_light+0x128>)
 8000e8e:	f001 fc34 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8000e92:	2201      	movs	r2, #1
 8000e94:	2102      	movs	r1, #2
 8000e96:	481d      	ldr	r0, [pc, #116]	; (8000f0c <traffic_light+0x128>)
 8000e98:	f001 fc2f 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2104      	movs	r1, #4
 8000ea0:	481a      	ldr	r0, [pc, #104]	; (8000f0c <traffic_light+0x128>)
 8000ea2:	f001 fc2a 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2108      	movs	r1, #8
 8000eaa:	4818      	ldr	r0, [pc, #96]	; (8000f0c <traffic_light+0x128>)
 8000eac:	f001 fc25 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2110      	movs	r1, #16
 8000eb4:	4815      	ldr	r0, [pc, #84]	; (8000f0c <traffic_light+0x128>)
 8000eb6:	f001 fc20 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2120      	movs	r1, #32
 8000ebe:	4813      	ldr	r0, [pc, #76]	; (8000f0c <traffic_light+0x128>)
 8000ec0:	f001 fc1b 	bl	80026fa <HAL_GPIO_WritePin>
		break;
 8000ec4:	e01e      	b.n	8000f04 <traffic_light+0x120>
	case Green:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4810      	ldr	r0, [pc, #64]	; (8000f0c <traffic_light+0x128>)
 8000ecc:	f001 fc15 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2102      	movs	r1, #2
 8000ed4:	480d      	ldr	r0, [pc, #52]	; (8000f0c <traffic_light+0x128>)
 8000ed6:	f001 fc10 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2104      	movs	r1, #4
 8000ede:	480b      	ldr	r0, [pc, #44]	; (8000f0c <traffic_light+0x128>)
 8000ee0:	f001 fc0b 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2108      	movs	r1, #8
 8000ee8:	4808      	ldr	r0, [pc, #32]	; (8000f0c <traffic_light+0x128>)
 8000eea:	f001 fc06 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	4806      	ldr	r0, [pc, #24]	; (8000f0c <traffic_light+0x128>)
 8000ef4:	f001 fc01 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2120      	movs	r1, #32
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <traffic_light+0x128>)
 8000efe:	f001 fbfc 	bl	80026fa <HAL_GPIO_WritePin>
		break;
 8000f02:	bf00      	nop
	}
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40010c00 	.word	0x40010c00

08000f10 <fsm_modify_run>:
 *      Author: HAU
 */
#include "fsm_modify.h"


void fsm_modify_run(){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	switch(status){
 8000f14:	4b3a      	ldr	r3, [pc, #232]	; (8001000 <fsm_modify_run+0xf0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b14      	cmp	r3, #20
 8000f1a:	d002      	beq.n	8000f22 <fsm_modify_run+0x12>
 8000f1c:	2b15      	cmp	r3, #21
 8000f1e:	d00f      	beq.n	8000f40 <fsm_modify_run+0x30>

		red_modify_update();

		break;
	}
}
 8000f20:	e06c      	b.n	8000ffc <fsm_modify_run+0xec>
		status = Auto_init;
 8000f22:	4b37      	ldr	r3, [pc, #220]	; (8001000 <fsm_modify_run+0xf0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
		if(Is_button2_pressed() == 1){
 8000f28:	f7ff fd1e 	bl	8000968 <Is_button2_pressed>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d163      	bne.n	8000ffa <fsm_modify_run+0xea>
			status = Red_Modify;
 8000f32:	4b33      	ldr	r3, [pc, #204]	; (8001000 <fsm_modify_run+0xf0>)
 8000f34:	2215      	movs	r2, #21
 8000f36:	601a      	str	r2, [r3, #0]
			Set_timer4(2);
 8000f38:	2002      	movs	r0, #2
 8000f3a:	f000 fedd 	bl	8001cf8 <Set_timer4>
		break;
 8000f3e:	e05c      	b.n	8000ffa <fsm_modify_run+0xea>
		if(timer4_flag == 1){
 8000f40:	4b30      	ldr	r3, [pc, #192]	; (8001004 <fsm_modify_run+0xf4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d117      	bne.n	8000f78 <fsm_modify_run+0x68>
			Set_timer4(2);
 8000f48:	2002      	movs	r0, #2
 8000f4a:	f000 fed5 	bl	8001cf8 <Set_timer4>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f54:	482c      	ldr	r0, [pc, #176]	; (8001008 <fsm_modify_run+0xf8>)
 8000f56:	f001 fbd0 	bl	80026fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	482b      	ldr	r0, [pc, #172]	; (800100c <fsm_modify_run+0xfc>)
 8000f60:	f001 fbcb 	bl	80026fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2120      	movs	r1, #32
 8000f68:	4828      	ldr	r0, [pc, #160]	; (800100c <fsm_modify_run+0xfc>)
 8000f6a:	f001 fbc6 	bl	80026fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2110      	movs	r1, #16
 8000f72:	4826      	ldr	r0, [pc, #152]	; (800100c <fsm_modify_run+0xfc>)
 8000f74:	f001 fbc1 	bl	80026fa <HAL_GPIO_WritePin>
		if(Is_button2_pressed() == 1){
 8000f78:	f7ff fcf6 	bl	8000968 <Is_button2_pressed>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d108      	bne.n	8000f94 <fsm_modify_run+0x84>
			status = Yellow_Modify;
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <fsm_modify_run+0xf0>)
 8000f84:	2216      	movs	r2, #22
 8000f86:	601a      	str	r2, [r3, #0]
			traffic_light(Reset);
 8000f88:	2006      	movs	r0, #6
 8000f8a:	f7ff ff2b 	bl	8000de4 <traffic_light>
			Set_timer4(2);
 8000f8e:	2002      	movs	r0, #2
 8000f90:	f000 feb2 	bl	8001cf8 <Set_timer4>
		if(Is_button1_pressed() == 1){
 8000f94:	f7ff fcd6 	bl	8000944 <Is_button1_pressed>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d112      	bne.n	8000fc4 <fsm_modify_run+0xb4>
			Red_duration --;
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <fsm_modify_run+0x100>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	4a1a      	ldr	r2, [pc, #104]	; (8001010 <fsm_modify_run+0x100>)
 8000fa6:	6013      	str	r3, [r2, #0]
			if(Red_duration > 99) Red_duration = 0;
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <fsm_modify_run+0x100>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b63      	cmp	r3, #99	; 0x63
 8000fae:	dd02      	ble.n	8000fb6 <fsm_modify_run+0xa6>
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <fsm_modify_run+0x100>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
			if(Red_duration < 0) Red_duration = 0;
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <fsm_modify_run+0x100>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	da02      	bge.n	8000fc4 <fsm_modify_run+0xb4>
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <fsm_modify_run+0x100>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
		if(Is_button3_pressed() == 1){
 8000fc4:	f7ff fce2 	bl	800098c <Is_button3_pressed>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d112      	bne.n	8000ff4 <fsm_modify_run+0xe4>
			Red_duration ++;
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <fsm_modify_run+0x100>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <fsm_modify_run+0x100>)
 8000fd6:	6013      	str	r3, [r2, #0]
			if(Red_duration > 99) Red_duration = 0;
 8000fd8:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <fsm_modify_run+0x100>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b63      	cmp	r3, #99	; 0x63
 8000fde:	dd02      	ble.n	8000fe6 <fsm_modify_run+0xd6>
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <fsm_modify_run+0x100>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
			if(Red_duration < 0) Red_duration = 0;
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <fsm_modify_run+0x100>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	da02      	bge.n	8000ff4 <fsm_modify_run+0xe4>
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <fsm_modify_run+0x100>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
		red_modify_update();
 8000ff4:	f7ff fdf4 	bl	8000be0 <red_modify_update>
		break;
 8000ff8:	e000      	b.n	8000ffc <fsm_modify_run+0xec>
		break;
 8000ffa:	bf00      	nop
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000110 	.word	0x20000110
 8001004:	20000130 	.word	0x20000130
 8001008:	40010800 	.word	0x40010800
 800100c:	40010c00 	.word	0x40010c00
 8001010:	20000044 	.word	0x20000044

08001014 <fsm_modify_green_run>:
 *  Created on: Nov 19, 2022
 *      Author: HAU
 */
#include "fsm_modify_green.h"

void fsm_modify_green_run(){
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	switch(status){
 8001018:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <fsm_modify_green_run+0xc0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b17      	cmp	r3, #23
 800101e:	d156      	bne.n	80010ce <fsm_modify_green_run+0xba>
	case Green_Modify:
		if(timer4_flag == 1){
 8001020:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <fsm_modify_green_run+0xc4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d117      	bne.n	8001058 <fsm_modify_green_run+0x44>
			Set_timer4(2);
 8001028:	2002      	movs	r0, #2
 800102a:	f000 fe65 	bl	8001cf8 <Set_timer4>
			//TL1
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001034:	4829      	ldr	r0, [pc, #164]	; (80010dc <fsm_modify_green_run+0xc8>)
 8001036:	f001 fb60 	bl	80026fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 800103a:	2201      	movs	r2, #1
 800103c:	2108      	movs	r1, #8
 800103e:	4828      	ldr	r0, [pc, #160]	; (80010e0 <fsm_modify_green_run+0xcc>)
 8001040:	f001 fb5b 	bl	80026fa <HAL_GPIO_WritePin>
			//TL2
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	2120      	movs	r1, #32
 8001048:	4825      	ldr	r0, [pc, #148]	; (80010e0 <fsm_modify_green_run+0xcc>)
 800104a:	f001 fb56 	bl	80026fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 800104e:	2201      	movs	r2, #1
 8001050:	2110      	movs	r1, #16
 8001052:	4823      	ldr	r0, [pc, #140]	; (80010e0 <fsm_modify_green_run+0xcc>)
 8001054:	f001 fb51 	bl	80026fa <HAL_GPIO_WritePin>
		}
		if(Is_button2_pressed() == 1){
 8001058:	f7ff fc86 	bl	8000968 <Is_button2_pressed>
 800105c:	4603      	mov	r3, r0
 800105e:	2b01      	cmp	r3, #1
 8001060:	d102      	bne.n	8001068 <fsm_modify_green_run+0x54>
			status = Normal;
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <fsm_modify_green_run+0xc0>)
 8001064:	2214      	movs	r2, #20
 8001066:	601a      	str	r2, [r3, #0]
		}
		if(Is_button1_pressed() == 1){
 8001068:	f7ff fc6c 	bl	8000944 <Is_button1_pressed>
 800106c:	4603      	mov	r3, r0
 800106e:	2b01      	cmp	r3, #1
 8001070:	d112      	bne.n	8001098 <fsm_modify_green_run+0x84>
			Green_duration -= 1;
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <fsm_modify_green_run+0xd0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	3b01      	subs	r3, #1
 8001078:	4a1a      	ldr	r2, [pc, #104]	; (80010e4 <fsm_modify_green_run+0xd0>)
 800107a:	6013      	str	r3, [r2, #0]
			if(duration_value > 99) duration_value = 0;
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <fsm_modify_green_run+0xd4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b63      	cmp	r3, #99	; 0x63
 8001082:	dd02      	ble.n	800108a <fsm_modify_green_run+0x76>
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <fsm_modify_green_run+0xd4>)
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
			if(duration_value < 0 ) duration_value = 99;
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <fsm_modify_green_run+0xd4>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	da02      	bge.n	8001098 <fsm_modify_green_run+0x84>
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <fsm_modify_green_run+0xd4>)
 8001094:	2263      	movs	r2, #99	; 0x63
 8001096:	601a      	str	r2, [r3, #0]
		}
		if(Is_button3_pressed() == 1){
 8001098:	f7ff fc78 	bl	800098c <Is_button3_pressed>
 800109c:	4603      	mov	r3, r0
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d112      	bne.n	80010c8 <fsm_modify_green_run+0xb4>
			Green_duration += 1;
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <fsm_modify_green_run+0xd0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	3301      	adds	r3, #1
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <fsm_modify_green_run+0xd0>)
 80010aa:	6013      	str	r3, [r2, #0]
			if(duration_value > 99) duration_value = 0;
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <fsm_modify_green_run+0xd4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b63      	cmp	r3, #99	; 0x63
 80010b2:	dd02      	ble.n	80010ba <fsm_modify_green_run+0xa6>
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <fsm_modify_green_run+0xd4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
			if(duration_value < 0 ) duration_value = 99;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <fsm_modify_green_run+0xd4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	da02      	bge.n	80010c8 <fsm_modify_green_run+0xb4>
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <fsm_modify_green_run+0xd4>)
 80010c4:	2263      	movs	r2, #99	; 0x63
 80010c6:	601a      	str	r2, [r3, #0]
		}

		green_modify_update();
 80010c8:	f7ff fe60 	bl	8000d8c <green_modify_update>

		break;
 80010cc:	bf00      	nop
	}
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000110 	.word	0x20000110
 80010d8:	20000130 	.word	0x20000130
 80010dc:	40010800 	.word	0x40010800
 80010e0:	40010c00 	.word	0x40010c00
 80010e4:	2000004c 	.word	0x2000004c
 80010e8:	200000f4 	.word	0x200000f4

080010ec <fsm_modify_yellow_run>:
 *  Created on: Nov 19, 2022
 *      Author: HAU
 */
#include "fsm_modify_yellow.h"

void fsm_modify_yellow_run(){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	switch(status){
 80010f0:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <fsm_modify_yellow_run+0xd4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b16      	cmp	r3, #22
 80010f6:	d160      	bne.n	80011ba <fsm_modify_yellow_run+0xce>
	case Yellow_Modify:
		if(timer4_flag == 1){
 80010f8:	4b32      	ldr	r3, [pc, #200]	; (80011c4 <fsm_modify_yellow_run+0xd8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d117      	bne.n	8001130 <fsm_modify_yellow_run+0x44>
			Set_timer4(2);
 8001100:	2002      	movs	r0, #2
 8001102:	f000 fdf9 	bl	8001cf8 <Set_timer4>
			//TL1
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800110c:	482e      	ldr	r0, [pc, #184]	; (80011c8 <fsm_modify_yellow_run+0xdc>)
 800110e:	f001 faf4 	bl	80026fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8001112:	2201      	movs	r2, #1
 8001114:	2108      	movs	r1, #8
 8001116:	482d      	ldr	r0, [pc, #180]	; (80011cc <fsm_modify_yellow_run+0xe0>)
 8001118:	f001 faef 	bl	80026fa <HAL_GPIO_WritePin>
			//TL2
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 800111c:	2201      	movs	r2, #1
 800111e:	2120      	movs	r1, #32
 8001120:	482a      	ldr	r0, [pc, #168]	; (80011cc <fsm_modify_yellow_run+0xe0>)
 8001122:	f001 faea 	bl	80026fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001126:	2201      	movs	r2, #1
 8001128:	2110      	movs	r1, #16
 800112a:	4828      	ldr	r0, [pc, #160]	; (80011cc <fsm_modify_yellow_run+0xe0>)
 800112c:	f001 fae5 	bl	80026fa <HAL_GPIO_WritePin>
			}

		if(Is_button2_pressed() == 1){
 8001130:	f7ff fc1a 	bl	8000968 <Is_button2_pressed>
 8001134:	4603      	mov	r3, r0
 8001136:	2b01      	cmp	r3, #1
 8001138:	d10c      	bne.n	8001154 <fsm_modify_yellow_run+0x68>
			status = Green_Modify;
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <fsm_modify_yellow_run+0xd4>)
 800113c:	2217      	movs	r2, #23
 800113e:	601a      	str	r2, [r3, #0]
			duration_value = Green_duration;
 8001140:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <fsm_modify_yellow_run+0xe4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a23      	ldr	r2, [pc, #140]	; (80011d4 <fsm_modify_yellow_run+0xe8>)
 8001146:	6013      	str	r3, [r2, #0]
			traffic_light(Reset);
 8001148:	2006      	movs	r0, #6
 800114a:	f7ff fe4b 	bl	8000de4 <traffic_light>
			Set_timer4(2);
 800114e:	2002      	movs	r0, #2
 8001150:	f000 fdd2 	bl	8001cf8 <Set_timer4>
			}

		if(Is_button1_pressed() == 1){
 8001154:	f7ff fbf6 	bl	8000944 <Is_button1_pressed>
 8001158:	4603      	mov	r3, r0
 800115a:	2b01      	cmp	r3, #1
 800115c:	d112      	bne.n	8001184 <fsm_modify_yellow_run+0x98>
			Yellow_duration -= 1;
 800115e:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <fsm_modify_yellow_run+0xec>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	3b01      	subs	r3, #1
 8001164:	4a1c      	ldr	r2, [pc, #112]	; (80011d8 <fsm_modify_yellow_run+0xec>)
 8001166:	6013      	str	r3, [r2, #0]
			if(Yellow_duration > 99) Yellow_duration = 0;
 8001168:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <fsm_modify_yellow_run+0xec>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b63      	cmp	r3, #99	; 0x63
 800116e:	dd02      	ble.n	8001176 <fsm_modify_yellow_run+0x8a>
 8001170:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <fsm_modify_yellow_run+0xec>)
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
			if(Yellow_duration < 0) Yellow_duration = 99;
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <fsm_modify_yellow_run+0xec>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	da02      	bge.n	8001184 <fsm_modify_yellow_run+0x98>
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <fsm_modify_yellow_run+0xec>)
 8001180:	2263      	movs	r2, #99	; 0x63
 8001182:	601a      	str	r2, [r3, #0]
			}

		if(Is_button3_pressed() == 1){
 8001184:	f7ff fc02 	bl	800098c <Is_button3_pressed>
 8001188:	4603      	mov	r3, r0
 800118a:	2b01      	cmp	r3, #1
 800118c:	d112      	bne.n	80011b4 <fsm_modify_yellow_run+0xc8>
			Yellow_duration += 1;
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <fsm_modify_yellow_run+0xec>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	3301      	adds	r3, #1
 8001194:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <fsm_modify_yellow_run+0xec>)
 8001196:	6013      	str	r3, [r2, #0]
			if(Yellow_duration > 99) Yellow_duration = 0;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <fsm_modify_yellow_run+0xec>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b63      	cmp	r3, #99	; 0x63
 800119e:	dd02      	ble.n	80011a6 <fsm_modify_yellow_run+0xba>
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <fsm_modify_yellow_run+0xec>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
			if(Yellow_duration < 0)  Yellow_duration = 99;
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <fsm_modify_yellow_run+0xec>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	da02      	bge.n	80011b4 <fsm_modify_yellow_run+0xc8>
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <fsm_modify_yellow_run+0xec>)
 80011b0:	2263      	movs	r2, #99	; 0x63
 80011b2:	601a      	str	r2, [r3, #0]
			}

			yellow_modify_update();
 80011b4:	f7ff fd7e 	bl	8000cb4 <yellow_modify_update>

			break;
 80011b8:	bf00      	nop
	}
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000110 	.word	0x20000110
 80011c4:	20000130 	.word	0x20000130
 80011c8:	40010800 	.word	0x40010800
 80011cc:	40010c00 	.word	0x40010c00
 80011d0:	2000004c 	.word	0x2000004c
 80011d4:	200000f4 	.word	0x200000f4
 80011d8:	20000048 	.word	0x20000048

080011dc <auto_tracffic_run>:
int TCNT1 = 0;
char str[50];
uint32_t ADC_value = 0;
UART_HandleTypeDef huart2;

void auto_tracffic_run(){
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b083      	sub	sp, #12
 80011e0:	af02      	add	r7, sp, #8
	switch(status){
 80011e2:	4baf      	ldr	r3, [pc, #700]	; (80014a0 <auto_tracffic_run+0x2c4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	f200 8287 	bhi.w	80016fa <auto_tracffic_run+0x51e>
 80011ec:	a201      	add	r2, pc, #4	; (adr r2, 80011f4 <auto_tracffic_run+0x18>)
 80011ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f2:	bf00      	nop
 80011f4:	08001209 	.word	0x08001209
 80011f8:	08001265 	.word	0x08001265
 80011fc:	080013ad 	.word	0x080013ad
 8001200:	080015fd 	.word	0x080015fd
 8001204:	080014f1 	.word	0x080014f1
	case Auto_init:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800120e:	48a5      	ldr	r0, [pc, #660]	; (80014a4 <auto_tracffic_run+0x2c8>)
 8001210:	f001 fa73 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	2108      	movs	r1, #8
 8001218:	48a3      	ldr	r0, [pc, #652]	; (80014a8 <auto_tracffic_run+0x2cc>)
 800121a:	f001 fa6e 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2120      	movs	r1, #32
 8001222:	48a1      	ldr	r0, [pc, #644]	; (80014a8 <auto_tracffic_run+0x2cc>)
 8001224:	f001 fa69 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	2110      	movs	r1, #16
 800122c:	489e      	ldr	r0, [pc, #632]	; (80014a8 <auto_tracffic_run+0x2cc>)
 800122e:	f001 fa64 	bl	80026fa <HAL_GPIO_WritePin>

		status = Auto_red;
 8001232:	4b9b      	ldr	r3, [pc, #620]	; (80014a0 <auto_tracffic_run+0x2c4>)
 8001234:	2201      	movs	r2, #1
 8001236:	601a      	str	r2, [r3, #0]

		Set_timer1(Red_duration);
 8001238:	4b9c      	ldr	r3, [pc, #624]	; (80014ac <auto_tracffic_run+0x2d0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f000 fd15 	bl	8001c6c <Set_timer1>
		TCNT1 = (timer1_counter/100)*100;
 8001242:	4b9b      	ldr	r3, [pc, #620]	; (80014b0 <auto_tracffic_run+0x2d4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a9b      	ldr	r2, [pc, #620]	; (80014b4 <auto_tracffic_run+0x2d8>)
 8001248:	fb82 1203 	smull	r1, r2, r2, r3
 800124c:	1152      	asrs	r2, r2, #5
 800124e:	17db      	asrs	r3, r3, #31
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2264      	movs	r2, #100	; 0x64
 8001254:	fb02 f303 	mul.w	r3, r2, r3
 8001258:	4a97      	ldr	r2, [pc, #604]	; (80014b8 <auto_tracffic_run+0x2dc>)
 800125a:	6013      	str	r3, [r2, #0]
		Set_timer3(5);
 800125c:	2005      	movs	r0, #5
 800125e:	f000 fd33 	bl	8001cc8 <Set_timer3>

		break;
 8001262:	e24a      	b.n	80016fa <auto_tracffic_run+0x51e>
	case Auto_red:
		//TL1
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8001264:	2201      	movs	r2, #1
 8001266:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800126a:	488e      	ldr	r0, [pc, #568]	; (80014a4 <auto_tracffic_run+0x2c8>)
 800126c:	f001 fa45 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	2108      	movs	r1, #8
 8001274:	488c      	ldr	r0, [pc, #560]	; (80014a8 <auto_tracffic_run+0x2cc>)
 8001276:	f001 fa40 	bl	80026fa <HAL_GPIO_WritePin>
		//TL2
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	2120      	movs	r1, #32
 800127e:	488a      	ldr	r0, [pc, #552]	; (80014a8 <auto_tracffic_run+0x2cc>)
 8001280:	f001 fa3b 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001284:	2201      	movs	r2, #1
 8001286:	2110      	movs	r1, #16
 8001288:	4887      	ldr	r0, [pc, #540]	; (80014a8 <auto_tracffic_run+0x2cc>)
 800128a:	f001 fa36 	bl	80026fa <HAL_GPIO_WritePin>

		if(timer1_flag == 1){
 800128e:	4b8b      	ldr	r3, [pc, #556]	; (80014bc <auto_tracffic_run+0x2e0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d10a      	bne.n	80012ac <auto_tracffic_run+0xd0>
			status = Auto_change;
 8001296:	4b82      	ldr	r3, [pc, #520]	; (80014a0 <auto_tracffic_run+0x2c4>)
 8001298:	2202      	movs	r2, #2
 800129a:	601a      	str	r2, [r3, #0]
			Set_timer1(Yellow_duration);
 800129c:	4b88      	ldr	r3, [pc, #544]	; (80014c0 <auto_tracffic_run+0x2e4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fce3 	bl	8001c6c <Set_timer1>
			Set_timer3(5);
 80012a6:	2005      	movs	r0, #5
 80012a8:	f000 fd0e 	bl	8001cc8 <Set_timer3>
		}

		if(Is_button1_pressed() == 1){
 80012ac:	f7ff fb4a 	bl	8000944 <Is_button1_pressed>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d105      	bne.n	80012c2 <auto_tracffic_run+0xe6>
			status = Man_red;
 80012b6:	4b7a      	ldr	r3, [pc, #488]	; (80014a0 <auto_tracffic_run+0x2c4>)
 80012b8:	220a      	movs	r2, #10
 80012ba:	601a      	str	r2, [r3, #0]
			Set_timer2(20);
 80012bc:	2014      	movs	r0, #20
 80012be:	f000 fceb 	bl	8001c98 <Set_timer2>
		}

		if(Is_button2_pressed() == 1){
 80012c2:	f7ff fb51 	bl	8000968 <Is_button2_pressed>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d10f      	bne.n	80012ec <auto_tracffic_run+0x110>
			status = Red_Modify;
 80012cc:	4b74      	ldr	r3, [pc, #464]	; (80014a0 <auto_tracffic_run+0x2c4>)
 80012ce:	2215      	movs	r2, #21
 80012d0:	601a      	str	r2, [r3, #0]
			traffic_light(Reset);
 80012d2:	2006      	movs	r0, #6
 80012d4:	f7ff fd86 	bl	8000de4 <traffic_light>
			duration_value = Red_duration + Yellow_duration;
 80012d8:	4b74      	ldr	r3, [pc, #464]	; (80014ac <auto_tracffic_run+0x2d0>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b78      	ldr	r3, [pc, #480]	; (80014c0 <auto_tracffic_run+0x2e4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a78      	ldr	r2, [pc, #480]	; (80014c4 <auto_tracffic_run+0x2e8>)
 80012e4:	6013      	str	r3, [r2, #0]
			Set_timer4(2);
 80012e6:	2002      	movs	r0, #2
 80012e8:	f000 fd06 	bl	8001cf8 <Set_timer4>
		}

		if(Is_buttonPED_pressed() == 1){
 80012ec:	f7ff fb60 	bl	80009b0 <Is_buttonPED_pressed>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d105      	bne.n	8001302 <auto_tracffic_run+0x126>
			ped_flag = 1;
 80012f6:	4b74      	ldr	r3, [pc, #464]	; (80014c8 <auto_tracffic_run+0x2ec>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]
			Set_timer2(200);
 80012fc:	20c8      	movs	r0, #200	; 0xc8
 80012fe:	f000 fccb 	bl	8001c98 <Set_timer2>

		}
		if(ped_flag == 1){
 8001302:	4b71      	ldr	r3, [pc, #452]	; (80014c8 <auto_tracffic_run+0x2ec>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d103      	bne.n	8001312 <auto_tracffic_run+0x136>
			Pedestrian_run();
 800130a:	f7ff fa19 	bl	8000740 <Pedestrian_run>
			buzzer_run();
 800130e:	f7ff fabf 	bl	8000890 <buzzer_run>
		}


		duty_cycle = mapFloat(timer1_counter, 0, TCNT1, 0, 999);
 8001312:	4b67      	ldr	r3, [pc, #412]	; (80014b0 <auto_tracffic_run+0x2d4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7fe ffd2 	bl	80002c0 <__aeabi_i2f>
 800131c:	4604      	mov	r4, r0
 800131e:	4b66      	ldr	r3, [pc, #408]	; (80014b8 <auto_tracffic_run+0x2dc>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7fe ffcc 	bl	80002c0 <__aeabi_i2f>
 8001328:	4602      	mov	r2, r0
 800132a:	4b68      	ldr	r3, [pc, #416]	; (80014cc <auto_tracffic_run+0x2f0>)
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	f04f 0100 	mov.w	r1, #0
 8001336:	4620      	mov	r0, r4
 8001338:	f7ff fac2 	bl	80008c0 <mapFloat>
 800133c:	4603      	mov	r3, r0
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f9d8 	bl	80006f4 <__aeabi_f2iz>
 8001344:	4603      	mov	r3, r0
 8001346:	4a62      	ldr	r2, [pc, #392]	; (80014d0 <auto_tracffic_run+0x2f4>)
 8001348:	6013      	str	r3, [r2, #0]

		duration = timer1_counter/100 + Yellow_duration;
 800134a:	4b59      	ldr	r3, [pc, #356]	; (80014b0 <auto_tracffic_run+0x2d4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a59      	ldr	r2, [pc, #356]	; (80014b4 <auto_tracffic_run+0x2d8>)
 8001350:	fb82 1203 	smull	r1, r2, r2, r3
 8001354:	1152      	asrs	r2, r2, #5
 8001356:	17db      	asrs	r3, r3, #31
 8001358:	1ad2      	subs	r2, r2, r3
 800135a:	4b59      	ldr	r3, [pc, #356]	; (80014c0 <auto_tracffic_run+0x2e4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a5c      	ldr	r2, [pc, #368]	; (80014d4 <auto_tracffic_run+0x2f8>)
 8001362:	6013      	str	r3, [r2, #0]
		duration2 = timer1_counter/100;
 8001364:	4b52      	ldr	r3, [pc, #328]	; (80014b0 <auto_tracffic_run+0x2d4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a52      	ldr	r2, [pc, #328]	; (80014b4 <auto_tracffic_run+0x2d8>)
 800136a:	fb82 1203 	smull	r1, r2, r2, r3
 800136e:	1152      	asrs	r2, r2, #5
 8001370:	17db      	asrs	r3, r3, #31
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	4a58      	ldr	r2, [pc, #352]	; (80014d8 <auto_tracffic_run+0x2fc>)
 8001376:	6013      	str	r3, [r2, #0]

		red_seg_update();
 8001378:	f7ff fbf2 	bl	8000b60 <red_seg_update>

		if(timer3_flag == 1){
 800137c:	4b57      	ldr	r3, [pc, #348]	; (80014dc <auto_tracffic_run+0x300>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b01      	cmp	r3, #1
 8001382:	f040 81b3 	bne.w	80016ec <auto_tracffic_run+0x510>
			Set_timer3(5);
 8001386:	2005      	movs	r0, #5
 8001388:	f000 fc9e 	bl	8001cc8 <Set_timer3>
		HAL_UART_Transmit (& huart2 , ( void *) str , sprintf (str , "!7SEG=%d#\n", duration ), 1000) ;
 800138c:	4b51      	ldr	r3, [pc, #324]	; (80014d4 <auto_tracffic_run+0x2f8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4953      	ldr	r1, [pc, #332]	; (80014e0 <auto_tracffic_run+0x304>)
 8001394:	4853      	ldr	r0, [pc, #332]	; (80014e4 <auto_tracffic_run+0x308>)
 8001396:	f002 fe87 	bl	80040a8 <siprintf>
 800139a:	4603      	mov	r3, r0
 800139c:	b29a      	uxth	r2, r3
 800139e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a2:	4950      	ldr	r1, [pc, #320]	; (80014e4 <auto_tracffic_run+0x308>)
 80013a4:	4850      	ldr	r0, [pc, #320]	; (80014e8 <auto_tracffic_run+0x30c>)
 80013a6:	f002 fce2 	bl	8003d6e <HAL_UART_Transmit>
		}
		break;
 80013aa:	e19f      	b.n	80016ec <auto_tracffic_run+0x510>
	case Auto_change:
		//TL1
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 80013ac:	2201      	movs	r2, #1
 80013ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013b2:	483c      	ldr	r0, [pc, #240]	; (80014a4 <auto_tracffic_run+0x2c8>)
 80013b4:	f001 f9a1 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2108      	movs	r1, #8
 80013bc:	483a      	ldr	r0, [pc, #232]	; (80014a8 <auto_tracffic_run+0x2cc>)
 80013be:	f001 f99c 	bl	80026fa <HAL_GPIO_WritePin>
		//TL2
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80013c2:	2201      	movs	r2, #1
 80013c4:	2120      	movs	r1, #32
 80013c6:	4838      	ldr	r0, [pc, #224]	; (80014a8 <auto_tracffic_run+0x2cc>)
 80013c8:	f001 f997 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80013cc:	2201      	movs	r2, #1
 80013ce:	2110      	movs	r1, #16
 80013d0:	4835      	ldr	r0, [pc, #212]	; (80014a8 <auto_tracffic_run+0x2cc>)
 80013d2:	f001 f992 	bl	80026fa <HAL_GPIO_WritePin>

		if(timer1_flag == 1){
 80013d6:	4b39      	ldr	r3, [pc, #228]	; (80014bc <auto_tracffic_run+0x2e0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d10a      	bne.n	80013f4 <auto_tracffic_run+0x218>
			status = Auto_green;
 80013de:	4b30      	ldr	r3, [pc, #192]	; (80014a0 <auto_tracffic_run+0x2c4>)
 80013e0:	2204      	movs	r2, #4
 80013e2:	601a      	str	r2, [r3, #0]
			Set_timer1(Green_duration);
 80013e4:	4b41      	ldr	r3, [pc, #260]	; (80014ec <auto_tracffic_run+0x310>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fc3f 	bl	8001c6c <Set_timer1>
			Set_timer3(5);
 80013ee:	2005      	movs	r0, #5
 80013f0:	f000 fc6a 	bl	8001cc8 <Set_timer3>
		}

		if(Is_button1_pressed() == 1){
 80013f4:	f7ff faa6 	bl	8000944 <Is_button1_pressed>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d105      	bne.n	800140a <auto_tracffic_run+0x22e>
			status = Man_yellow;
 80013fe:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <auto_tracffic_run+0x2c4>)
 8001400:	220b      	movs	r2, #11
 8001402:	601a      	str	r2, [r3, #0]
			Set_timer2(20);
 8001404:	2014      	movs	r0, #20
 8001406:	f000 fc47 	bl	8001c98 <Set_timer2>
		}

		if(Is_button2_pressed() == 1){
 800140a:	f7ff faad 	bl	8000968 <Is_button2_pressed>
 800140e:	4603      	mov	r3, r0
 8001410:	2b01      	cmp	r3, #1
 8001412:	d10f      	bne.n	8001434 <auto_tracffic_run+0x258>
			status = Red_Modify;
 8001414:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <auto_tracffic_run+0x2c4>)
 8001416:	2215      	movs	r2, #21
 8001418:	601a      	str	r2, [r3, #0]
			traffic_light(Reset);
 800141a:	2006      	movs	r0, #6
 800141c:	f7ff fce2 	bl	8000de4 <traffic_light>
			duration_value = Red_duration + Yellow_duration;
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <auto_tracffic_run+0x2d0>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <auto_tracffic_run+0x2e4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4413      	add	r3, r2
 800142a:	4a26      	ldr	r2, [pc, #152]	; (80014c4 <auto_tracffic_run+0x2e8>)
 800142c:	6013      	str	r3, [r2, #0]
			Set_timer4(2);
 800142e:	2002      	movs	r0, #2
 8001430:	f000 fc62 	bl	8001cf8 <Set_timer4>
		}

		if(Is_buttonPED_pressed() == 1){
 8001434:	f7ff fabc 	bl	80009b0 <Is_buttonPED_pressed>
 8001438:	4603      	mov	r3, r0
 800143a:	2b01      	cmp	r3, #1
 800143c:	d105      	bne.n	800144a <auto_tracffic_run+0x26e>
			ped_flag = 1;
 800143e:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <auto_tracffic_run+0x2ec>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]
			Set_timer2(200);
 8001444:	20c8      	movs	r0, #200	; 0xc8
 8001446:	f000 fc27 	bl	8001c98 <Set_timer2>

		}
		if(ped_flag == 1){
 800144a:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <auto_tracffic_run+0x2ec>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d101      	bne.n	8001456 <auto_tracffic_run+0x27a>
			Pedestrian_run();
 8001452:	f7ff f975 	bl	8000740 <Pedestrian_run>

		}

		duration = timer1_counter/100;
 8001456:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <auto_tracffic_run+0x2d4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a16      	ldr	r2, [pc, #88]	; (80014b4 <auto_tracffic_run+0x2d8>)
 800145c:	fb82 1203 	smull	r1, r2, r2, r3
 8001460:	1152      	asrs	r2, r2, #5
 8001462:	17db      	asrs	r3, r3, #31
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	4a1b      	ldr	r2, [pc, #108]	; (80014d4 <auto_tracffic_run+0x2f8>)
 8001468:	6013      	str	r3, [r2, #0]

		yellow_seg_update();
 800146a:	f7ff fbe5 	bl	8000c38 <yellow_seg_update>
		if(timer3_flag == 1){
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <auto_tracffic_run+0x300>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	f040 813c 	bne.w	80016f0 <auto_tracffic_run+0x514>
			Set_timer3(5);
 8001478:	2005      	movs	r0, #5
 800147a:	f000 fc25 	bl	8001cc8 <Set_timer3>
		HAL_UART_Transmit (& huart2 , ( void *) str , sprintf (str , "!7SEG=%d#\n", duration ), 1000) ;
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <auto_tracffic_run+0x2f8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	4916      	ldr	r1, [pc, #88]	; (80014e0 <auto_tracffic_run+0x304>)
 8001486:	4817      	ldr	r0, [pc, #92]	; (80014e4 <auto_tracffic_run+0x308>)
 8001488:	f002 fe0e 	bl	80040a8 <siprintf>
 800148c:	4603      	mov	r3, r0
 800148e:	b29a      	uxth	r2, r3
 8001490:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001494:	4913      	ldr	r1, [pc, #76]	; (80014e4 <auto_tracffic_run+0x308>)
 8001496:	4814      	ldr	r0, [pc, #80]	; (80014e8 <auto_tracffic_run+0x30c>)
 8001498:	f002 fc69 	bl	8003d6e <HAL_UART_Transmit>
		}
		break;
 800149c:	e128      	b.n	80016f0 <auto_tracffic_run+0x514>
 800149e:	bf00      	nop
 80014a0:	20000110 	.word	0x20000110
 80014a4:	40010800 	.word	0x40010800
 80014a8:	40010c00 	.word	0x40010c00
 80014ac:	20000044 	.word	0x20000044
 80014b0:	2000011c 	.word	0x2000011c
 80014b4:	51eb851f 	.word	0x51eb851f
 80014b8:	200000f0 	.word	0x200000f0
 80014bc:	20000118 	.word	0x20000118
 80014c0:	20000048 	.word	0x20000048
 80014c4:	200000f4 	.word	0x200000f4
 80014c8:	20000114 	.word	0x20000114
 80014cc:	4479c000 	.word	0x4479c000
 80014d0:	200000dc 	.word	0x200000dc
 80014d4:	200000f8 	.word	0x200000f8
 80014d8:	200000fc 	.word	0x200000fc
 80014dc:	20000128 	.word	0x20000128
 80014e0:	08004934 	.word	0x08004934
 80014e4:	200001d0 	.word	0x200001d0
 80014e8:	2000018c 	.word	0x2000018c
 80014ec:	2000004c 	.word	0x2000004c
	case Auto_green:
		//TL1
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014f6:	4883      	ldr	r0, [pc, #524]	; (8001704 <auto_tracffic_run+0x528>)
 80014f8:	f001 f8ff 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	2108      	movs	r1, #8
 8001500:	4881      	ldr	r0, [pc, #516]	; (8001708 <auto_tracffic_run+0x52c>)
 8001502:	f001 f8fa 	bl	80026fa <HAL_GPIO_WritePin>
		//TL2
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001506:	2201      	movs	r2, #1
 8001508:	2120      	movs	r1, #32
 800150a:	487f      	ldr	r0, [pc, #508]	; (8001708 <auto_tracffic_run+0x52c>)
 800150c:	f001 f8f5 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	2110      	movs	r1, #16
 8001514:	487c      	ldr	r0, [pc, #496]	; (8001708 <auto_tracffic_run+0x52c>)
 8001516:	f001 f8f0 	bl	80026fa <HAL_GPIO_WritePin>

		if(timer1_flag == 1){
 800151a:	4b7c      	ldr	r3, [pc, #496]	; (800170c <auto_tracffic_run+0x530>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d10a      	bne.n	8001538 <auto_tracffic_run+0x35c>
			status = Auto_yellow;
 8001522:	4b7b      	ldr	r3, [pc, #492]	; (8001710 <auto_tracffic_run+0x534>)
 8001524:	2203      	movs	r2, #3
 8001526:	601a      	str	r2, [r3, #0]
			Set_timer1(Yellow_duration);
 8001528:	4b7a      	ldr	r3, [pc, #488]	; (8001714 <auto_tracffic_run+0x538>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f000 fb9d 	bl	8001c6c <Set_timer1>
			Set_timer3(5);
 8001532:	2005      	movs	r0, #5
 8001534:	f000 fbc8 	bl	8001cc8 <Set_timer3>
		}

		if(Is_button1_pressed() == 1){
 8001538:	f7ff fa04 	bl	8000944 <Is_button1_pressed>
 800153c:	4603      	mov	r3, r0
 800153e:	2b01      	cmp	r3, #1
 8001540:	d105      	bne.n	800154e <auto_tracffic_run+0x372>
			status = Man_green;
 8001542:	4b73      	ldr	r3, [pc, #460]	; (8001710 <auto_tracffic_run+0x534>)
 8001544:	220c      	movs	r2, #12
 8001546:	601a      	str	r2, [r3, #0]
			Set_timer2(20);
 8001548:	2014      	movs	r0, #20
 800154a:	f000 fba5 	bl	8001c98 <Set_timer2>
		}

		if(Is_button2_pressed() == 1){
 800154e:	f7ff fa0b 	bl	8000968 <Is_button2_pressed>
 8001552:	4603      	mov	r3, r0
 8001554:	2b01      	cmp	r3, #1
 8001556:	d10f      	bne.n	8001578 <auto_tracffic_run+0x39c>
			status = Red_Modify;
 8001558:	4b6d      	ldr	r3, [pc, #436]	; (8001710 <auto_tracffic_run+0x534>)
 800155a:	2215      	movs	r2, #21
 800155c:	601a      	str	r2, [r3, #0]
			traffic_light(Reset);
 800155e:	2006      	movs	r0, #6
 8001560:	f7ff fc40 	bl	8000de4 <traffic_light>
			duration_value = Red_duration + Yellow_duration;
 8001564:	4b6c      	ldr	r3, [pc, #432]	; (8001718 <auto_tracffic_run+0x53c>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b6a      	ldr	r3, [pc, #424]	; (8001714 <auto_tracffic_run+0x538>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4413      	add	r3, r2
 800156e:	4a6b      	ldr	r2, [pc, #428]	; (800171c <auto_tracffic_run+0x540>)
 8001570:	6013      	str	r3, [r2, #0]
			Set_timer4(2);
 8001572:	2002      	movs	r0, #2
 8001574:	f000 fbc0 	bl	8001cf8 <Set_timer4>
		}

		if(Is_buttonPED_pressed() == 1){
 8001578:	f7ff fa1a 	bl	80009b0 <Is_buttonPED_pressed>
 800157c:	4603      	mov	r3, r0
 800157e:	2b01      	cmp	r3, #1
 8001580:	d105      	bne.n	800158e <auto_tracffic_run+0x3b2>
			ped_flag = 1;
 8001582:	4b67      	ldr	r3, [pc, #412]	; (8001720 <auto_tracffic_run+0x544>)
 8001584:	2201      	movs	r2, #1
 8001586:	601a      	str	r2, [r3, #0]
			Set_timer2(200);
 8001588:	20c8      	movs	r0, #200	; 0xc8
 800158a:	f000 fb85 	bl	8001c98 <Set_timer2>

		}
		if(ped_flag == 1){
 800158e:	4b64      	ldr	r3, [pc, #400]	; (8001720 <auto_tracffic_run+0x544>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d101      	bne.n	800159a <auto_tracffic_run+0x3be>
			Pedestrian_run();
 8001596:	f7ff f8d3 	bl	8000740 <Pedestrian_run>

		}

		duration  = timer1_counter/100 ;
 800159a:	4b62      	ldr	r3, [pc, #392]	; (8001724 <auto_tracffic_run+0x548>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a62      	ldr	r2, [pc, #392]	; (8001728 <auto_tracffic_run+0x54c>)
 80015a0:	fb82 1203 	smull	r1, r2, r2, r3
 80015a4:	1152      	asrs	r2, r2, #5
 80015a6:	17db      	asrs	r3, r3, #31
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	4a60      	ldr	r2, [pc, #384]	; (800172c <auto_tracffic_run+0x550>)
 80015ac:	6013      	str	r3, [r2, #0]
		duration2 = timer1_counter/100 + Yellow_duration;
 80015ae:	4b5d      	ldr	r3, [pc, #372]	; (8001724 <auto_tracffic_run+0x548>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a5d      	ldr	r2, [pc, #372]	; (8001728 <auto_tracffic_run+0x54c>)
 80015b4:	fb82 1203 	smull	r1, r2, r2, r3
 80015b8:	1152      	asrs	r2, r2, #5
 80015ba:	17db      	asrs	r3, r3, #31
 80015bc:	1ad2      	subs	r2, r2, r3
 80015be:	4b55      	ldr	r3, [pc, #340]	; (8001714 <auto_tracffic_run+0x538>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a5a      	ldr	r2, [pc, #360]	; (8001730 <auto_tracffic_run+0x554>)
 80015c6:	6013      	str	r3, [r2, #0]

		green_seg_update();
 80015c8:	f7ff fba0 	bl	8000d0c <green_seg_update>
		if(timer3_flag == 1){
 80015cc:	4b59      	ldr	r3, [pc, #356]	; (8001734 <auto_tracffic_run+0x558>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	f040 808f 	bne.w	80016f4 <auto_tracffic_run+0x518>
			Set_timer3(5);
 80015d6:	2005      	movs	r0, #5
 80015d8:	f000 fb76 	bl	8001cc8 <Set_timer3>
		HAL_UART_Transmit (& huart2 , ( void *) str , sprintf (str , "!7SEG=%d#\n", duration ), 1000) ;
 80015dc:	4b53      	ldr	r3, [pc, #332]	; (800172c <auto_tracffic_run+0x550>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4955      	ldr	r1, [pc, #340]	; (8001738 <auto_tracffic_run+0x55c>)
 80015e4:	4855      	ldr	r0, [pc, #340]	; (800173c <auto_tracffic_run+0x560>)
 80015e6:	f002 fd5f 	bl	80040a8 <siprintf>
 80015ea:	4603      	mov	r3, r0
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f2:	4952      	ldr	r1, [pc, #328]	; (800173c <auto_tracffic_run+0x560>)
 80015f4:	4852      	ldr	r0, [pc, #328]	; (8001740 <auto_tracffic_run+0x564>)
 80015f6:	f002 fbba 	bl	8003d6e <HAL_UART_Transmit>
		}
		break;
 80015fa:	e07b      	b.n	80016f4 <auto_tracffic_run+0x518>

	case Auto_yellow:
		//TL1
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001602:	4840      	ldr	r0, [pc, #256]	; (8001704 <auto_tracffic_run+0x528>)
 8001604:	f001 f879 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8001608:	2201      	movs	r2, #1
 800160a:	2108      	movs	r1, #8
 800160c:	483e      	ldr	r0, [pc, #248]	; (8001708 <auto_tracffic_run+0x52c>)
 800160e:	f001 f874 	bl	80026fa <HAL_GPIO_WritePin>
		//TL2
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001612:	2201      	movs	r2, #1
 8001614:	2120      	movs	r1, #32
 8001616:	483c      	ldr	r0, [pc, #240]	; (8001708 <auto_tracffic_run+0x52c>)
 8001618:	f001 f86f 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 800161c:	2200      	movs	r2, #0
 800161e:	2110      	movs	r1, #16
 8001620:	4839      	ldr	r0, [pc, #228]	; (8001708 <auto_tracffic_run+0x52c>)
 8001622:	f001 f86a 	bl	80026fa <HAL_GPIO_WritePin>

		if(timer1_flag == 1){
 8001626:	4b39      	ldr	r3, [pc, #228]	; (800170c <auto_tracffic_run+0x530>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d10a      	bne.n	8001644 <auto_tracffic_run+0x468>
			status = Auto_red;
 800162e:	4b38      	ldr	r3, [pc, #224]	; (8001710 <auto_tracffic_run+0x534>)
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]
			Set_timer1(Red_duration);
 8001634:	4b38      	ldr	r3, [pc, #224]	; (8001718 <auto_tracffic_run+0x53c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f000 fb17 	bl	8001c6c <Set_timer1>
			Set_timer3(5);
 800163e:	2005      	movs	r0, #5
 8001640:	f000 fb42 	bl	8001cc8 <Set_timer3>
		}

		if(Is_button1_pressed() == 1){
 8001644:	f7ff f97e 	bl	8000944 <Is_button1_pressed>
 8001648:	4603      	mov	r3, r0
 800164a:	2b01      	cmp	r3, #1
 800164c:	d105      	bne.n	800165a <auto_tracffic_run+0x47e>
			status = Man_yellow;
 800164e:	4b30      	ldr	r3, [pc, #192]	; (8001710 <auto_tracffic_run+0x534>)
 8001650:	220b      	movs	r2, #11
 8001652:	601a      	str	r2, [r3, #0]
			Set_timer2(20);
 8001654:	2014      	movs	r0, #20
 8001656:	f000 fb1f 	bl	8001c98 <Set_timer2>
		}

		if(Is_button2_pressed() == 1){
 800165a:	f7ff f985 	bl	8000968 <Is_button2_pressed>
 800165e:	4603      	mov	r3, r0
 8001660:	2b01      	cmp	r3, #1
 8001662:	d10f      	bne.n	8001684 <auto_tracffic_run+0x4a8>
			status = Red_Modify;
 8001664:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <auto_tracffic_run+0x534>)
 8001666:	2215      	movs	r2, #21
 8001668:	601a      	str	r2, [r3, #0]
			traffic_light(Reset);
 800166a:	2006      	movs	r0, #6
 800166c:	f7ff fbba 	bl	8000de4 <traffic_light>
			duration_value = Red_duration + Yellow_duration;
 8001670:	4b29      	ldr	r3, [pc, #164]	; (8001718 <auto_tracffic_run+0x53c>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b27      	ldr	r3, [pc, #156]	; (8001714 <auto_tracffic_run+0x538>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4413      	add	r3, r2
 800167a:	4a28      	ldr	r2, [pc, #160]	; (800171c <auto_tracffic_run+0x540>)
 800167c:	6013      	str	r3, [r2, #0]
			Set_timer4(2);
 800167e:	2002      	movs	r0, #2
 8001680:	f000 fb3a 	bl	8001cf8 <Set_timer4>
		}

		if(Is_buttonPED_pressed() == 1){
 8001684:	f7ff f994 	bl	80009b0 <Is_buttonPED_pressed>
 8001688:	4603      	mov	r3, r0
 800168a:	2b01      	cmp	r3, #1
 800168c:	d105      	bne.n	800169a <auto_tracffic_run+0x4be>
			ped_flag = 1;
 800168e:	4b24      	ldr	r3, [pc, #144]	; (8001720 <auto_tracffic_run+0x544>)
 8001690:	2201      	movs	r2, #1
 8001692:	601a      	str	r2, [r3, #0]
			Set_timer2(200);
 8001694:	20c8      	movs	r0, #200	; 0xc8
 8001696:	f000 faff 	bl	8001c98 <Set_timer2>
		}
		if(ped_flag == 1){
 800169a:	4b21      	ldr	r3, [pc, #132]	; (8001720 <auto_tracffic_run+0x544>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d101      	bne.n	80016a6 <auto_tracffic_run+0x4ca>
			Pedestrian_run();
 80016a2:	f7ff f84d 	bl	8000740 <Pedestrian_run>
		}

		duration = timer1_counter/100;
 80016a6:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <auto_tracffic_run+0x548>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a1f      	ldr	r2, [pc, #124]	; (8001728 <auto_tracffic_run+0x54c>)
 80016ac:	fb82 1203 	smull	r1, r2, r2, r3
 80016b0:	1152      	asrs	r2, r2, #5
 80016b2:	17db      	asrs	r3, r3, #31
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	4a1d      	ldr	r2, [pc, #116]	; (800172c <auto_tracffic_run+0x550>)
 80016b8:	6013      	str	r3, [r2, #0]

		yellow_seg_update();
 80016ba:	f7ff fabd 	bl	8000c38 <yellow_seg_update>
		if(timer3_flag == 1){
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <auto_tracffic_run+0x558>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d118      	bne.n	80016f8 <auto_tracffic_run+0x51c>
			Set_timer3(5);
 80016c6:	2005      	movs	r0, #5
 80016c8:	f000 fafe 	bl	8001cc8 <Set_timer3>
		HAL_UART_Transmit (& huart2 , ( void *) str , sprintf (str , "!7SEG=%d#\n", duration ), 1000) ;
 80016cc:	4b17      	ldr	r3, [pc, #92]	; (800172c <auto_tracffic_run+0x550>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4919      	ldr	r1, [pc, #100]	; (8001738 <auto_tracffic_run+0x55c>)
 80016d4:	4819      	ldr	r0, [pc, #100]	; (800173c <auto_tracffic_run+0x560>)
 80016d6:	f002 fce7 	bl	80040a8 <siprintf>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e2:	4916      	ldr	r1, [pc, #88]	; (800173c <auto_tracffic_run+0x560>)
 80016e4:	4816      	ldr	r0, [pc, #88]	; (8001740 <auto_tracffic_run+0x564>)
 80016e6:	f002 fb42 	bl	8003d6e <HAL_UART_Transmit>
		}
		break;
 80016ea:	e005      	b.n	80016f8 <auto_tracffic_run+0x51c>
		break;
 80016ec:	bf00      	nop
 80016ee:	e004      	b.n	80016fa <auto_tracffic_run+0x51e>
		break;
 80016f0:	bf00      	nop
 80016f2:	e002      	b.n	80016fa <auto_tracffic_run+0x51e>
		break;
 80016f4:	bf00      	nop
 80016f6:	e000      	b.n	80016fa <auto_tracffic_run+0x51e>
		break;
 80016f8:	bf00      	nop

	}
 }
 80016fa:	bf00      	nop
 80016fc:	3704      	adds	r7, #4
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd90      	pop	{r4, r7, pc}
 8001702:	bf00      	nop
 8001704:	40010800 	.word	0x40010800
 8001708:	40010c00 	.word	0x40010c00
 800170c:	20000118 	.word	0x20000118
 8001710:	20000110 	.word	0x20000110
 8001714:	20000048 	.word	0x20000048
 8001718:	20000044 	.word	0x20000044
 800171c:	200000f4 	.word	0x200000f4
 8001720:	20000114 	.word	0x20000114
 8001724:	2000011c 	.word	0x2000011c
 8001728:	51eb851f 	.word	0x51eb851f
 800172c:	200000f8 	.word	0x200000f8
 8001730:	200000fc 	.word	0x200000fc
 8001734:	20000128 	.word	0x20000128
 8001738:	08004934 	.word	0x08004934
 800173c:	200001d0 	.word	0x200001d0
 8001740:	2000018c 	.word	0x2000018c

08001744 <fsm_trafficlight_manual_run>:
 *  Created on: Dec 1, 2022
 *      Author: HAU
 */
#include "fsm_trafficlight_manual.h"

void fsm_trafficlight_manual_run(){
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	switch(status){
 8001748:	4b45      	ldr	r3, [pc, #276]	; (8001860 <fsm_trafficlight_manual_run+0x11c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b0c      	cmp	r3, #12
 800174e:	d02f      	beq.n	80017b0 <fsm_trafficlight_manual_run+0x6c>
 8001750:	2b0c      	cmp	r3, #12
 8001752:	f300 8082 	bgt.w	800185a <fsm_trafficlight_manual_run+0x116>
 8001756:	2b0a      	cmp	r3, #10
 8001758:	d002      	beq.n	8001760 <fsm_trafficlight_manual_run+0x1c>
 800175a:	2b0b      	cmp	r3, #11
 800175c:	d050      	beq.n	8001800 <fsm_trafficlight_manual_run+0xbc>
			status = Auto_init;
		}

		break;
	}
}
 800175e:	e07c      	b.n	800185a <fsm_trafficlight_manual_run+0x116>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8001760:	2201      	movs	r2, #1
 8001762:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001766:	483f      	ldr	r0, [pc, #252]	; (8001864 <fsm_trafficlight_manual_run+0x120>)
 8001768:	f000 ffc7 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	2108      	movs	r1, #8
 8001770:	483d      	ldr	r0, [pc, #244]	; (8001868 <fsm_trafficlight_manual_run+0x124>)
 8001772:	f000 ffc2 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	2120      	movs	r1, #32
 800177a:	483b      	ldr	r0, [pc, #236]	; (8001868 <fsm_trafficlight_manual_run+0x124>)
 800177c:	f000 ffbd 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001780:	2201      	movs	r2, #1
 8001782:	2110      	movs	r1, #16
 8001784:	4838      	ldr	r0, [pc, #224]	; (8001868 <fsm_trafficlight_manual_run+0x124>)
 8001786:	f000 ffb8 	bl	80026fa <HAL_GPIO_WritePin>
		if(Is_button1_pressed() == 1){
 800178a:	f7ff f8db 	bl	8000944 <Is_button1_pressed>
 800178e:	4603      	mov	r3, r0
 8001790:	2b01      	cmp	r3, #1
 8001792:	d105      	bne.n	80017a0 <fsm_trafficlight_manual_run+0x5c>
			status = Man_green;
 8001794:	4b32      	ldr	r3, [pc, #200]	; (8001860 <fsm_trafficlight_manual_run+0x11c>)
 8001796:	220c      	movs	r2, #12
 8001798:	601a      	str	r2, [r3, #0]
			Set_timer2(20);
 800179a:	2014      	movs	r0, #20
 800179c:	f000 fa7c 	bl	8001c98 <Set_timer2>
		if(timer2_flag == 1){
 80017a0:	4b32      	ldr	r3, [pc, #200]	; (800186c <fsm_trafficlight_manual_run+0x128>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d153      	bne.n	8001850 <fsm_trafficlight_manual_run+0x10c>
			status = Auto_init;
 80017a8:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <fsm_trafficlight_manual_run+0x11c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
		break;
 80017ae:	e04f      	b.n	8001850 <fsm_trafficlight_manual_run+0x10c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017b6:	482b      	ldr	r0, [pc, #172]	; (8001864 <fsm_trafficlight_manual_run+0x120>)
 80017b8:	f000 ff9f 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80017bc:	2201      	movs	r2, #1
 80017be:	2108      	movs	r1, #8
 80017c0:	4829      	ldr	r0, [pc, #164]	; (8001868 <fsm_trafficlight_manual_run+0x124>)
 80017c2:	f000 ff9a 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80017c6:	2201      	movs	r2, #1
 80017c8:	2120      	movs	r1, #32
 80017ca:	4827      	ldr	r0, [pc, #156]	; (8001868 <fsm_trafficlight_manual_run+0x124>)
 80017cc:	f000 ff95 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2110      	movs	r1, #16
 80017d4:	4824      	ldr	r0, [pc, #144]	; (8001868 <fsm_trafficlight_manual_run+0x124>)
 80017d6:	f000 ff90 	bl	80026fa <HAL_GPIO_WritePin>
		if(Is_button1_pressed() == 1){
 80017da:	f7ff f8b3 	bl	8000944 <Is_button1_pressed>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d105      	bne.n	80017f0 <fsm_trafficlight_manual_run+0xac>
			status = Man_yellow;
 80017e4:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <fsm_trafficlight_manual_run+0x11c>)
 80017e6:	220b      	movs	r2, #11
 80017e8:	601a      	str	r2, [r3, #0]
			Set_timer2(20);
 80017ea:	2014      	movs	r0, #20
 80017ec:	f000 fa54 	bl	8001c98 <Set_timer2>
		if(timer2_flag == 1){
 80017f0:	4b1e      	ldr	r3, [pc, #120]	; (800186c <fsm_trafficlight_manual_run+0x128>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d12d      	bne.n	8001854 <fsm_trafficlight_manual_run+0x110>
			status = Auto_init;
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <fsm_trafficlight_manual_run+0x11c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
		break;
 80017fe:	e029      	b.n	8001854 <fsm_trafficlight_manual_run+0x110>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,SET);
 8001800:	2201      	movs	r2, #1
 8001802:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001806:	4817      	ldr	r0, [pc, #92]	; (8001864 <fsm_trafficlight_manual_run+0x120>)
 8001808:	f000 ff77 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 800180c:	2201      	movs	r2, #1
 800180e:	2108      	movs	r1, #8
 8001810:	4815      	ldr	r0, [pc, #84]	; (8001868 <fsm_trafficlight_manual_run+0x124>)
 8001812:	f000 ff72 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001816:	2201      	movs	r2, #1
 8001818:	2120      	movs	r1, #32
 800181a:	4813      	ldr	r0, [pc, #76]	; (8001868 <fsm_trafficlight_manual_run+0x124>)
 800181c:	f000 ff6d 	bl	80026fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001820:	2201      	movs	r2, #1
 8001822:	2110      	movs	r1, #16
 8001824:	4810      	ldr	r0, [pc, #64]	; (8001868 <fsm_trafficlight_manual_run+0x124>)
 8001826:	f000 ff68 	bl	80026fa <HAL_GPIO_WritePin>
		if(Is_button1_pressed() == 1){
 800182a:	f7ff f88b 	bl	8000944 <Is_button1_pressed>
 800182e:	4603      	mov	r3, r0
 8001830:	2b01      	cmp	r3, #1
 8001832:	d105      	bne.n	8001840 <fsm_trafficlight_manual_run+0xfc>
			status = Man_red;
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <fsm_trafficlight_manual_run+0x11c>)
 8001836:	220a      	movs	r2, #10
 8001838:	601a      	str	r2, [r3, #0]
			Set_timer2(20);
 800183a:	2014      	movs	r0, #20
 800183c:	f000 fa2c 	bl	8001c98 <Set_timer2>
		if(timer2_flag == 1){
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <fsm_trafficlight_manual_run+0x128>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d107      	bne.n	8001858 <fsm_trafficlight_manual_run+0x114>
			status = Auto_init;
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <fsm_trafficlight_manual_run+0x11c>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
		break;
 800184e:	e003      	b.n	8001858 <fsm_trafficlight_manual_run+0x114>
		break;
 8001850:	bf00      	nop
 8001852:	e002      	b.n	800185a <fsm_trafficlight_manual_run+0x116>
		break;
 8001854:	bf00      	nop
 8001856:	e000      	b.n	800185a <fsm_trafficlight_manual_run+0x116>
		break;
 8001858:	bf00      	nop
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000110 	.word	0x20000110
 8001864:	40010800 	.word	0x40010800
 8001868:	40010c00 	.word	0x40010c00
 800186c:	20000120 	.word	0x20000120

08001870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001874:	f000 fc36 	bl	80020e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001878:	f000 f818 	bl	80018ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187c:	f000 f944 	bl	8001b08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001880:	f000 f918 	bl	8001ab4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001884:	f000 f854 	bl	8001930 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001888:	f000 f89e 	bl	80019c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 800188c:	4806      	ldr	r0, [pc, #24]	; (80018a8 <main+0x38>)
 800188e:	f001 fbd9 	bl	8003044 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //Set_timer1(10);
  while (1)
  {
	  auto_tracffic_run();
 8001892:	f7ff fca3 	bl	80011dc <auto_tracffic_run>
	  fsm_trafficlight_manual_run();
 8001896:	f7ff ff55 	bl	8001744 <fsm_trafficlight_manual_run>
	  fsm_modify_run();
 800189a:	f7ff fb39 	bl	8000f10 <fsm_modify_run>
	  fsm_modify_yellow_run();
 800189e:	f7ff fc25 	bl	80010ec <fsm_modify_yellow_run>
	  fsm_modify_green_run();
 80018a2:	f7ff fbb7 	bl	8001014 <fsm_modify_green_run>
	  auto_tracffic_run();
 80018a6:	e7f4      	b.n	8001892 <main+0x22>
 80018a8:	20000204 	.word	0x20000204

080018ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b090      	sub	sp, #64	; 0x40
 80018b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b2:	f107 0318 	add.w	r3, r7, #24
 80018b6:	2228      	movs	r2, #40	; 0x28
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 fbec 	bl	8004098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018ce:	2302      	movs	r3, #2
 80018d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d2:	2301      	movs	r3, #1
 80018d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018d6:	2310      	movs	r3, #16
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018da:	2302      	movs	r3, #2
 80018dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80018de:	2300      	movs	r3, #0
 80018e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80018e2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80018e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e8:	f107 0318 	add.w	r3, r7, #24
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 ff3f 	bl	8002770 <HAL_RCC_OscConfig>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80018f8:	f000 f9b2 	bl	8001c60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018fc:	230f      	movs	r3, #15
 80018fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001900:	2302      	movs	r3, #2
 8001902:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800190c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	2102      	movs	r1, #2
 8001916:	4618      	mov	r0, r3
 8001918:	f001 f9aa 	bl	8002c70 <HAL_RCC_ClockConfig>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001922:	f000 f99d 	bl	8001c60 <Error_Handler>
  }
}
 8001926:	bf00      	nop
 8001928:	3740      	adds	r7, #64	; 0x40
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001944:	463b      	mov	r3, r7
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800194c:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <MX_TIM2_Init+0x94>)
 800194e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001952:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <MX_TIM2_Init+0x94>)
 8001956:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800195a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <MX_TIM2_Init+0x94>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <MX_TIM2_Init+0x94>)
 8001964:	2213      	movs	r2, #19
 8001966:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001968:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <MX_TIM2_Init+0x94>)
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <MX_TIM2_Init+0x94>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001974:	4813      	ldr	r0, [pc, #76]	; (80019c4 <MX_TIM2_Init+0x94>)
 8001976:	f001 fb15 	bl	8002fa4 <HAL_TIM_Base_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001980:	f000 f96e 	bl	8001c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001988:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	4619      	mov	r1, r3
 8001990:	480c      	ldr	r0, [pc, #48]	; (80019c4 <MX_TIM2_Init+0x94>)
 8001992:	f001 fdc7 	bl	8003524 <HAL_TIM_ConfigClockSource>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800199c:	f000 f960 	bl	8001c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019a8:	463b      	mov	r3, r7
 80019aa:	4619      	mov	r1, r3
 80019ac:	4805      	ldr	r0, [pc, #20]	; (80019c4 <MX_TIM2_Init+0x94>)
 80019ae:	f002 f921 	bl	8003bf4 <HAL_TIMEx_MasterConfigSynchronization>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80019b8:	f000 f952 	bl	8001c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000204 	.word	0x20000204

080019c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08e      	sub	sp, #56	; 0x38
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019dc:	f107 0320 	add.w	r3, r7, #32
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
 80019f4:	615a      	str	r2, [r3, #20]
 80019f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019f8:	4b2c      	ldr	r3, [pc, #176]	; (8001aac <MX_TIM3_Init+0xe4>)
 80019fa:	4a2d      	ldr	r2, [pc, #180]	; (8001ab0 <MX_TIM3_Init+0xe8>)
 80019fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80019fe:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <MX_TIM3_Init+0xe4>)
 8001a00:	223f      	movs	r2, #63	; 0x3f
 8001a02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a04:	4b29      	ldr	r3, [pc, #164]	; (8001aac <MX_TIM3_Init+0xe4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001a0a:	4b28      	ldr	r3, [pc, #160]	; (8001aac <MX_TIM3_Init+0xe4>)
 8001a0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a12:	4b26      	ldr	r3, [pc, #152]	; (8001aac <MX_TIM3_Init+0xe4>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a18:	4b24      	ldr	r3, [pc, #144]	; (8001aac <MX_TIM3_Init+0xe4>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a1e:	4823      	ldr	r0, [pc, #140]	; (8001aac <MX_TIM3_Init+0xe4>)
 8001a20:	f001 fac0 	bl	8002fa4 <HAL_TIM_Base_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a2a:	f000 f919 	bl	8001c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a38:	4619      	mov	r1, r3
 8001a3a:	481c      	ldr	r0, [pc, #112]	; (8001aac <MX_TIM3_Init+0xe4>)
 8001a3c:	f001 fd72 	bl	8003524 <HAL_TIM_ConfigClockSource>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a46:	f000 f90b 	bl	8001c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a4a:	4818      	ldr	r0, [pc, #96]	; (8001aac <MX_TIM3_Init+0xe4>)
 8001a4c:	f001 fb4c 	bl	80030e8 <HAL_TIM_PWM_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a56:	f000 f903 	bl	8001c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a62:	f107 0320 	add.w	r3, r7, #32
 8001a66:	4619      	mov	r1, r3
 8001a68:	4810      	ldr	r0, [pc, #64]	; (8001aac <MX_TIM3_Init+0xe4>)
 8001a6a:	f002 f8c3 	bl	8003bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a74:	f000 f8f4 	bl	8001c60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a78:	2360      	movs	r3, #96	; 0x60
 8001a7a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4807      	ldr	r0, [pc, #28]	; (8001aac <MX_TIM3_Init+0xe4>)
 8001a90:	f001 fc8a 	bl	80033a8 <HAL_TIM_PWM_ConfigChannel>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a9a:	f000 f8e1 	bl	8001c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a9e:	4803      	ldr	r0, [pc, #12]	; (8001aac <MX_TIM3_Init+0xe4>)
 8001aa0:	f000 fa0a 	bl	8001eb8 <HAL_TIM_MspPostInit>

}
 8001aa4:	bf00      	nop
 8001aa6:	3738      	adds	r7, #56	; 0x38
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000144 	.word	0x20000144
 8001ab0:	40000400 	.word	0x40000400

08001ab4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <MX_USART2_UART_Init+0x50>)
 8001abc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ada:	220c      	movs	r2, #12
 8001adc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aea:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001aec:	f002 f8f2 	bl	8003cd4 <HAL_UART_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001af6:	f000 f8b3 	bl	8001c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2000018c 	.word	0x2000018c
 8001b04:	40004400 	.word	0x40004400

08001b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1c:	4b45      	ldr	r3, [pc, #276]	; (8001c34 <MX_GPIO_Init+0x12c>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a44      	ldr	r2, [pc, #272]	; (8001c34 <MX_GPIO_Init+0x12c>)
 8001b22:	f043 0310 	orr.w	r3, r3, #16
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <MX_GPIO_Init+0x12c>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b34:	4b3f      	ldr	r3, [pc, #252]	; (8001c34 <MX_GPIO_Init+0x12c>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	4a3e      	ldr	r2, [pc, #248]	; (8001c34 <MX_GPIO_Init+0x12c>)
 8001b3a:	f043 0320 	orr.w	r3, r3, #32
 8001b3e:	6193      	str	r3, [r2, #24]
 8001b40:	4b3c      	ldr	r3, [pc, #240]	; (8001c34 <MX_GPIO_Init+0x12c>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4c:	4b39      	ldr	r3, [pc, #228]	; (8001c34 <MX_GPIO_Init+0x12c>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a38      	ldr	r2, [pc, #224]	; (8001c34 <MX_GPIO_Init+0x12c>)
 8001b52:	f043 0304 	orr.w	r3, r3, #4
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <MX_GPIO_Init+0x12c>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b64:	4b33      	ldr	r3, [pc, #204]	; (8001c34 <MX_GPIO_Init+0x12c>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a32      	ldr	r2, [pc, #200]	; (8001c34 <MX_GPIO_Init+0x12c>)
 8001b6a:	f043 0308 	orr.w	r3, r3, #8
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <MX_GPIO_Init+0x12c>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8001b82:	482d      	ldr	r0, [pc, #180]	; (8001c38 <MX_GPIO_Init+0x130>)
 8001b84:	f000 fdb9 	bl	80026fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001b8e:	482b      	ldr	r0, [pc, #172]	; (8001c3c <MX_GPIO_Init+0x134>)
 8001b90:	f000 fdb3 	bl	80026fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b9a:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <MX_GPIO_Init+0x138>)
 8001b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ba2:	f107 0310 	add.w	r3, r7, #16
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4826      	ldr	r0, [pc, #152]	; (8001c44 <MX_GPIO_Init+0x13c>)
 8001baa:	f000 fc0b 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001bae:	2313      	movs	r3, #19
 8001bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 0310 	add.w	r3, r7, #16
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	481d      	ldr	r0, [pc, #116]	; (8001c38 <MX_GPIO_Init+0x130>)
 8001bc2:	f000 fbff 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_10;
 8001bc6:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8001bca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4816      	ldr	r0, [pc, #88]	; (8001c38 <MX_GPIO_Init+0x130>)
 8001be0:	f000 fbf0 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001be4:	2301      	movs	r3, #1
 8001be6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bec:	2301      	movs	r3, #1
 8001bee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4811      	ldr	r0, [pc, #68]	; (8001c3c <MX_GPIO_Init+0x134>)
 8001bf8:	f000 fbe4 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001bfc:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001c00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c02:	2301      	movs	r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0e:	f107 0310 	add.w	r3, r7, #16
 8001c12:	4619      	mov	r1, r3
 8001c14:	4809      	ldr	r0, [pc, #36]	; (8001c3c <MX_GPIO_Init+0x134>)
 8001c16:	f000 fbd5 	bl	80023c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	2028      	movs	r0, #40	; 0x28
 8001c20:	f000 fb99 	bl	8002356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c24:	2028      	movs	r0, #40	; 0x28
 8001c26:	f000 fbb2 	bl	800238e <HAL_NVIC_EnableIRQ>

}
 8001c2a:	bf00      	nop
 8001c2c:	3720      	adds	r7, #32
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010800 	.word	0x40010800
 8001c3c:	40010c00 	.word	0x40010c00
 8001c40:	10110000 	.word	0x10110000
 8001c44:	40011000 	.word	0x40011000

08001c48 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	Timer_run();
 8001c50:	f000 f86a 	bl	8001d28 <Timer_run>
	Button_undebounce();
 8001c54:	f7fe fee8 	bl	8000a28 <Button_undebounce>
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c64:	b672      	cpsid	i
}
 8001c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <Error_Handler+0x8>
	...

08001c6c <Set_timer1>:
int timer3_flag = 0;
int timer3_counter = 0;
int timer4_flag = 0;
int timer4_counter = 0;

void Set_timer1(int Time_set){
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	timer1_counter = Time_set*100;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2264      	movs	r2, #100	; 0x64
 8001c78:	fb02 f303 	mul.w	r3, r2, r3
 8001c7c:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <Set_timer1+0x24>)
 8001c7e:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <Set_timer1+0x28>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	2000011c 	.word	0x2000011c
 8001c94:	20000118 	.word	0x20000118

08001c98 <Set_timer2>:
void Set_timer2(int Time_set){
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	timer2_counter = Time_set*10;
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <Set_timer2+0x28>)
 8001cae:	601a      	str	r2, [r3, #0]
	timer2_flag = 0;
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <Set_timer2+0x2c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	20000124 	.word	0x20000124
 8001cc4:	20000120 	.word	0x20000120

08001cc8 <Set_timer3>:
void Set_timer3(int Time_set){
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	timer3_counter = Time_set*10;
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <Set_timer3+0x28>)
 8001cde:	601a      	str	r2, [r3, #0]
	timer3_flag = 0;
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <Set_timer3+0x2c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	2000012c 	.word	0x2000012c
 8001cf4:	20000128 	.word	0x20000128

08001cf8 <Set_timer4>:
void Set_timer4(int Time_set){
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	timer4_counter = Time_set*10;
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <Set_timer4+0x28>)
 8001d0e:	601a      	str	r2, [r3, #0]
	timer4_flag = 0;
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <Set_timer4+0x2c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	20000134 	.word	0x20000134
 8001d24:	20000130 	.word	0x20000130

08001d28 <Timer_run>:
void Timer_run(){
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
	if(timer1_counter >0){
 8001d2c:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <Timer_run+0x8c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	dd0b      	ble.n	8001d4c <Timer_run+0x24>
		timer1_counter --;
 8001d34:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <Timer_run+0x8c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	4a1e      	ldr	r2, [pc, #120]	; (8001db4 <Timer_run+0x8c>)
 8001d3c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <Timer_run+0x8c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	dc02      	bgt.n	8001d4c <Timer_run+0x24>
			timer1_flag = 1;
 8001d46:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <Timer_run+0x90>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter >0){
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <Timer_run+0x94>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	dd0b      	ble.n	8001d6c <Timer_run+0x44>
		timer2_counter --;
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <Timer_run+0x94>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	4a18      	ldr	r2, [pc, #96]	; (8001dbc <Timer_run+0x94>)
 8001d5c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <Timer_run+0x94>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	dc02      	bgt.n	8001d6c <Timer_run+0x44>
			timer2_flag = 1;
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <Timer_run+0x98>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter >0){
 8001d6c:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <Timer_run+0x9c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	dd0b      	ble.n	8001d8c <Timer_run+0x64>
		timer3_counter --;
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <Timer_run+0x9c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <Timer_run+0x9c>)
 8001d7c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <Timer_run+0x9c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	dc02      	bgt.n	8001d8c <Timer_run+0x64>
			timer3_flag = 1;
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <Timer_run+0xa0>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter >0){
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <Timer_run+0xa4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	dd0b      	ble.n	8001dac <Timer_run+0x84>
		timer4_counter --;
 8001d94:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <Timer_run+0xa4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <Timer_run+0xa4>)
 8001d9c:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <Timer_run+0xa4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	dc02      	bgt.n	8001dac <Timer_run+0x84>
			timer4_flag = 1;
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <Timer_run+0xa8>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
		}
	}

}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	2000011c 	.word	0x2000011c
 8001db8:	20000118 	.word	0x20000118
 8001dbc:	20000124 	.word	0x20000124
 8001dc0:	20000120 	.word	0x20000120
 8001dc4:	2000012c 	.word	0x2000012c
 8001dc8:	20000128 	.word	0x20000128
 8001dcc:	20000134 	.word	0x20000134
 8001dd0:	20000130 	.word	0x20000130

08001dd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <HAL_MspInit+0x5c>)
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <HAL_MspInit+0x5c>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6193      	str	r3, [r2, #24]
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_MspInit+0x5c>)
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <HAL_MspInit+0x5c>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <HAL_MspInit+0x5c>)
 8001df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	61d3      	str	r3, [r2, #28]
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <HAL_MspInit+0x5c>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_MspInit+0x60>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_MspInit+0x60>)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40010000 	.word	0x40010000

08001e38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e48:	d114      	bne.n	8001e74 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e4a:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <HAL_TIM_Base_MspInit+0x78>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <HAL_TIM_Base_MspInit+0x78>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	61d3      	str	r3, [r2, #28]
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <HAL_TIM_Base_MspInit+0x78>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2100      	movs	r1, #0
 8001e66:	201c      	movs	r0, #28
 8001e68:	f000 fa75 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e6c:	201c      	movs	r0, #28
 8001e6e:	f000 fa8e 	bl	800238e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e72:	e018      	b.n	8001ea6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0e      	ldr	r2, [pc, #56]	; (8001eb4 <HAL_TIM_Base_MspInit+0x7c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d113      	bne.n	8001ea6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <HAL_TIM_Base_MspInit+0x78>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	4a0b      	ldr	r2, [pc, #44]	; (8001eb0 <HAL_TIM_Base_MspInit+0x78>)
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	61d3      	str	r3, [r2, #28]
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_TIM_Base_MspInit+0x78>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	201d      	movs	r0, #29
 8001e9c:	f000 fa5b 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ea0:	201d      	movs	r0, #29
 8001ea2:	f000 fa74 	bl	800238e <HAL_NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40000400 	.word	0x40000400

08001eb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0310 	add.w	r3, r7, #16
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <HAL_TIM_MspPostInit+0x58>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d117      	bne.n	8001f08 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <HAL_TIM_MspPostInit+0x5c>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	4a0d      	ldr	r2, [pc, #52]	; (8001f14 <HAL_TIM_MspPostInit+0x5c>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6193      	str	r3, [r2, #24]
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_TIM_MspPostInit+0x5c>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	4619      	mov	r1, r3
 8001f02:	4805      	ldr	r0, [pc, #20]	; (8001f18 <HAL_TIM_MspPostInit+0x60>)
 8001f04:	f000 fa5e 	bl	80023c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f08:	bf00      	nop
 8001f0a:	3720      	adds	r7, #32
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40000400 	.word	0x40000400
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40010800 	.word	0x40010800

08001f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0310 	add.w	r3, r7, #16
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a15      	ldr	r2, [pc, #84]	; (8001f8c <HAL_UART_MspInit+0x70>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d123      	bne.n	8001f84 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f3c:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <HAL_UART_MspInit+0x74>)
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	4a13      	ldr	r2, [pc, #76]	; (8001f90 <HAL_UART_MspInit+0x74>)
 8001f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f46:	61d3      	str	r3, [r2, #28]
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <HAL_UART_MspInit+0x74>)
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f54:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <HAL_UART_MspInit+0x74>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a0d      	ldr	r2, [pc, #52]	; (8001f90 <HAL_UART_MspInit+0x74>)
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_UART_MspInit+0x74>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f6c:	230c      	movs	r3, #12
 8001f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2302      	movs	r3, #2
 8001f76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4805      	ldr	r0, [pc, #20]	; (8001f94 <HAL_UART_MspInit+0x78>)
 8001f80:	f000 fa20 	bl	80023c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f84:	bf00      	nop
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40004400 	.word	0x40004400
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40010800 	.word	0x40010800

08001f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <NMI_Handler+0x4>

08001f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa2:	e7fe      	b.n	8001fa2 <HardFault_Handler+0x4>

08001fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <MemManage_Handler+0x4>

08001faa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fae:	e7fe      	b.n	8001fae <BusFault_Handler+0x4>

08001fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <UsageFault_Handler+0x4>

08001fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr

08001fda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fde:	f000 f8c7 	bl	8002170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <TIM2_IRQHandler+0x10>)
 8001fee:	f001 f8d3 	bl	8003198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000204 	.word	0x20000204

08001ffc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <TIM3_IRQHandler+0x10>)
 8002002:	f001 f8c9 	bl	8003198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000144 	.word	0x20000144

08002010 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002014:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002018:	f000 fb88 	bl	800272c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}

08002020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002028:	4a14      	ldr	r2, [pc, #80]	; (800207c <_sbrk+0x5c>)
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <_sbrk+0x60>)
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002034:	4b13      	ldr	r3, [pc, #76]	; (8002084 <_sbrk+0x64>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d102      	bne.n	8002042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800203c:	4b11      	ldr	r3, [pc, #68]	; (8002084 <_sbrk+0x64>)
 800203e:	4a12      	ldr	r2, [pc, #72]	; (8002088 <_sbrk+0x68>)
 8002040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <_sbrk+0x64>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	429a      	cmp	r2, r3
 800204e:	d207      	bcs.n	8002060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002050:	f001 fff8 	bl	8004044 <__errno>
 8002054:	4603      	mov	r3, r0
 8002056:	220c      	movs	r2, #12
 8002058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800205a:	f04f 33ff 	mov.w	r3, #4294967295
 800205e:	e009      	b.n	8002074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <_sbrk+0x64>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002066:	4b07      	ldr	r3, [pc, #28]	; (8002084 <_sbrk+0x64>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	4a05      	ldr	r2, [pc, #20]	; (8002084 <_sbrk+0x64>)
 8002070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002072:	68fb      	ldr	r3, [r7, #12]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20005000 	.word	0x20005000
 8002080:	00000400 	.word	0x00000400
 8002084:	20000138 	.word	0x20000138
 8002088:	20000260 	.word	0x20000260

0800208c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002098:	480c      	ldr	r0, [pc, #48]	; (80020cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800209a:	490d      	ldr	r1, [pc, #52]	; (80020d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800209c:	4a0d      	ldr	r2, [pc, #52]	; (80020d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a0:	e002      	b.n	80020a8 <LoopCopyDataInit>

080020a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020a6:	3304      	adds	r3, #4

080020a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ac:	d3f9      	bcc.n	80020a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020b0:	4c0a      	ldr	r4, [pc, #40]	; (80020dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b4:	e001      	b.n	80020ba <LoopFillZerobss>

080020b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b8:	3204      	adds	r2, #4

080020ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020bc:	d3fb      	bcc.n	80020b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020be:	f7ff ffe5 	bl	800208c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020c2:	f001 ffc5 	bl	8004050 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020c6:	f7ff fbd3 	bl	8001870 <main>
  bx lr
 80020ca:	4770      	bx	lr
  ldr r0, =_sdata
 80020cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d0:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 80020d4:	080049a4 	.word	0x080049a4
  ldr r2, =_sbss
 80020d8:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 80020dc:	20000260 	.word	0x20000260

080020e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020e0:	e7fe      	b.n	80020e0 <ADC1_2_IRQHandler>
	...

080020e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <HAL_Init+0x28>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a07      	ldr	r2, [pc, #28]	; (800210c <HAL_Init+0x28>)
 80020ee:	f043 0310 	orr.w	r3, r3, #16
 80020f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f4:	2003      	movs	r0, #3
 80020f6:	f000 f923 	bl	8002340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020fa:	2000      	movs	r0, #0
 80020fc:	f000 f808 	bl	8002110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002100:	f7ff fe68 	bl	8001dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40022000 	.word	0x40022000

08002110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_InitTick+0x54>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_InitTick+0x58>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	4619      	mov	r1, r3
 8002122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002126:	fbb3 f3f1 	udiv	r3, r3, r1
 800212a:	fbb2 f3f3 	udiv	r3, r2, r3
 800212e:	4618      	mov	r0, r3
 8002130:	f000 f93b 	bl	80023aa <HAL_SYSTICK_Config>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e00e      	b.n	800215c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b0f      	cmp	r3, #15
 8002142:	d80a      	bhi.n	800215a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002144:	2200      	movs	r2, #0
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f000 f903 	bl	8002356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002150:	4a06      	ldr	r2, [pc, #24]	; (800216c <HAL_InitTick+0x5c>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	e000      	b.n	800215c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000050 	.word	0x20000050
 8002168:	20000058 	.word	0x20000058
 800216c:	20000054 	.word	0x20000054

08002170 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_IncTick+0x1c>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	4b05      	ldr	r3, [pc, #20]	; (8002190 <HAL_IncTick+0x20>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4413      	add	r3, r2
 8002180:	4a03      	ldr	r2, [pc, #12]	; (8002190 <HAL_IncTick+0x20>)
 8002182:	6013      	str	r3, [r2, #0]
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	20000058 	.word	0x20000058
 8002190:	2000024c 	.word	0x2000024c

08002194 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return uwTick;
 8002198:	4b02      	ldr	r3, [pc, #8]	; (80021a4 <HAL_GetTick+0x10>)
 800219a:	681b      	ldr	r3, [r3, #0]
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	2000024c 	.word	0x2000024c

080021a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c4:	4013      	ands	r3, r2
 80021c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021da:	4a04      	ldr	r2, [pc, #16]	; (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	60d3      	str	r3, [r2, #12]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <__NVIC_GetPriorityGrouping+0x18>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	f003 0307 	and.w	r3, r3, #7
}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	2b00      	cmp	r3, #0
 800221c:	db0b      	blt.n	8002236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	f003 021f 	and.w	r2, r3, #31
 8002224:	4906      	ldr	r1, [pc, #24]	; (8002240 <__NVIC_EnableIRQ+0x34>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	095b      	lsrs	r3, r3, #5
 800222c:	2001      	movs	r0, #1
 800222e:	fa00 f202 	lsl.w	r2, r0, r2
 8002232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	e000e100 	.word	0xe000e100

08002244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	6039      	str	r1, [r7, #0]
 800224e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002254:	2b00      	cmp	r3, #0
 8002256:	db0a      	blt.n	800226e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	b2da      	uxtb	r2, r3
 800225c:	490c      	ldr	r1, [pc, #48]	; (8002290 <__NVIC_SetPriority+0x4c>)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	0112      	lsls	r2, r2, #4
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	440b      	add	r3, r1
 8002268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800226c:	e00a      	b.n	8002284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4908      	ldr	r1, [pc, #32]	; (8002294 <__NVIC_SetPriority+0x50>)
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	3b04      	subs	r3, #4
 800227c:	0112      	lsls	r2, r2, #4
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	440b      	add	r3, r1
 8002282:	761a      	strb	r2, [r3, #24]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	e000e100 	.word	0xe000e100
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002298:	b480      	push	{r7}
 800229a:	b089      	sub	sp, #36	; 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f1c3 0307 	rsb	r3, r3, #7
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	bf28      	it	cs
 80022b6:	2304      	movcs	r3, #4
 80022b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3304      	adds	r3, #4
 80022be:	2b06      	cmp	r3, #6
 80022c0:	d902      	bls.n	80022c8 <NVIC_EncodePriority+0x30>
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3b03      	subs	r3, #3
 80022c6:	e000      	b.n	80022ca <NVIC_EncodePriority+0x32>
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	f04f 32ff 	mov.w	r2, #4294967295
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43da      	mvns	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	401a      	ands	r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e0:	f04f 31ff 	mov.w	r1, #4294967295
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ea:	43d9      	mvns	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	4313      	orrs	r3, r2
         );
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3724      	adds	r7, #36	; 0x24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800230c:	d301      	bcc.n	8002312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230e:	2301      	movs	r3, #1
 8002310:	e00f      	b.n	8002332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <SysTick_Config+0x40>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231a:	210f      	movs	r1, #15
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f7ff ff90 	bl	8002244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <SysTick_Config+0x40>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232a:	4b04      	ldr	r3, [pc, #16]	; (800233c <SysTick_Config+0x40>)
 800232c:	2207      	movs	r2, #7
 800232e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	e000e010 	.word	0xe000e010

08002340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff2d 	bl	80021a8 <__NVIC_SetPriorityGrouping>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002368:	f7ff ff42 	bl	80021f0 <__NVIC_GetPriorityGrouping>
 800236c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	6978      	ldr	r0, [r7, #20]
 8002374:	f7ff ff90 	bl	8002298 <NVIC_EncodePriority>
 8002378:	4602      	mov	r2, r0
 800237a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff5f 	bl	8002244 <__NVIC_SetPriority>
}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff35 	bl	800220c <__NVIC_EnableIRQ>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ffa2 	bl	80022fc <SysTick_Config>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b08b      	sub	sp, #44	; 0x2c
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ce:	2300      	movs	r3, #0
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023d2:	2300      	movs	r3, #0
 80023d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023d6:	e169      	b.n	80026ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023d8:	2201      	movs	r2, #1
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	f040 8158 	bne.w	80026a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4a9a      	ldr	r2, [pc, #616]	; (8002664 <HAL_GPIO_Init+0x2a0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d05e      	beq.n	80024be <HAL_GPIO_Init+0xfa>
 8002400:	4a98      	ldr	r2, [pc, #608]	; (8002664 <HAL_GPIO_Init+0x2a0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d875      	bhi.n	80024f2 <HAL_GPIO_Init+0x12e>
 8002406:	4a98      	ldr	r2, [pc, #608]	; (8002668 <HAL_GPIO_Init+0x2a4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d058      	beq.n	80024be <HAL_GPIO_Init+0xfa>
 800240c:	4a96      	ldr	r2, [pc, #600]	; (8002668 <HAL_GPIO_Init+0x2a4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d86f      	bhi.n	80024f2 <HAL_GPIO_Init+0x12e>
 8002412:	4a96      	ldr	r2, [pc, #600]	; (800266c <HAL_GPIO_Init+0x2a8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d052      	beq.n	80024be <HAL_GPIO_Init+0xfa>
 8002418:	4a94      	ldr	r2, [pc, #592]	; (800266c <HAL_GPIO_Init+0x2a8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d869      	bhi.n	80024f2 <HAL_GPIO_Init+0x12e>
 800241e:	4a94      	ldr	r2, [pc, #592]	; (8002670 <HAL_GPIO_Init+0x2ac>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d04c      	beq.n	80024be <HAL_GPIO_Init+0xfa>
 8002424:	4a92      	ldr	r2, [pc, #584]	; (8002670 <HAL_GPIO_Init+0x2ac>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d863      	bhi.n	80024f2 <HAL_GPIO_Init+0x12e>
 800242a:	4a92      	ldr	r2, [pc, #584]	; (8002674 <HAL_GPIO_Init+0x2b0>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d046      	beq.n	80024be <HAL_GPIO_Init+0xfa>
 8002430:	4a90      	ldr	r2, [pc, #576]	; (8002674 <HAL_GPIO_Init+0x2b0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d85d      	bhi.n	80024f2 <HAL_GPIO_Init+0x12e>
 8002436:	2b12      	cmp	r3, #18
 8002438:	d82a      	bhi.n	8002490 <HAL_GPIO_Init+0xcc>
 800243a:	2b12      	cmp	r3, #18
 800243c:	d859      	bhi.n	80024f2 <HAL_GPIO_Init+0x12e>
 800243e:	a201      	add	r2, pc, #4	; (adr r2, 8002444 <HAL_GPIO_Init+0x80>)
 8002440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002444:	080024bf 	.word	0x080024bf
 8002448:	08002499 	.word	0x08002499
 800244c:	080024ab 	.word	0x080024ab
 8002450:	080024ed 	.word	0x080024ed
 8002454:	080024f3 	.word	0x080024f3
 8002458:	080024f3 	.word	0x080024f3
 800245c:	080024f3 	.word	0x080024f3
 8002460:	080024f3 	.word	0x080024f3
 8002464:	080024f3 	.word	0x080024f3
 8002468:	080024f3 	.word	0x080024f3
 800246c:	080024f3 	.word	0x080024f3
 8002470:	080024f3 	.word	0x080024f3
 8002474:	080024f3 	.word	0x080024f3
 8002478:	080024f3 	.word	0x080024f3
 800247c:	080024f3 	.word	0x080024f3
 8002480:	080024f3 	.word	0x080024f3
 8002484:	080024f3 	.word	0x080024f3
 8002488:	080024a1 	.word	0x080024a1
 800248c:	080024b5 	.word	0x080024b5
 8002490:	4a79      	ldr	r2, [pc, #484]	; (8002678 <HAL_GPIO_Init+0x2b4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d013      	beq.n	80024be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002496:	e02c      	b.n	80024f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	623b      	str	r3, [r7, #32]
          break;
 800249e:	e029      	b.n	80024f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	3304      	adds	r3, #4
 80024a6:	623b      	str	r3, [r7, #32]
          break;
 80024a8:	e024      	b.n	80024f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	3308      	adds	r3, #8
 80024b0:	623b      	str	r3, [r7, #32]
          break;
 80024b2:	e01f      	b.n	80024f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	330c      	adds	r3, #12
 80024ba:	623b      	str	r3, [r7, #32]
          break;
 80024bc:	e01a      	b.n	80024f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d102      	bne.n	80024cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024c6:	2304      	movs	r3, #4
 80024c8:	623b      	str	r3, [r7, #32]
          break;
 80024ca:	e013      	b.n	80024f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d105      	bne.n	80024e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024d4:	2308      	movs	r3, #8
 80024d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	611a      	str	r2, [r3, #16]
          break;
 80024de:	e009      	b.n	80024f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024e0:	2308      	movs	r3, #8
 80024e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	615a      	str	r2, [r3, #20]
          break;
 80024ea:	e003      	b.n	80024f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024ec:	2300      	movs	r3, #0
 80024ee:	623b      	str	r3, [r7, #32]
          break;
 80024f0:	e000      	b.n	80024f4 <HAL_GPIO_Init+0x130>
          break;
 80024f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	2bff      	cmp	r3, #255	; 0xff
 80024f8:	d801      	bhi.n	80024fe <HAL_GPIO_Init+0x13a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	e001      	b.n	8002502 <HAL_GPIO_Init+0x13e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3304      	adds	r3, #4
 8002502:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	2bff      	cmp	r3, #255	; 0xff
 8002508:	d802      	bhi.n	8002510 <HAL_GPIO_Init+0x14c>
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	e002      	b.n	8002516 <HAL_GPIO_Init+0x152>
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	3b08      	subs	r3, #8
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	210f      	movs	r1, #15
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	401a      	ands	r2, r3
 8002528:	6a39      	ldr	r1, [r7, #32]
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	fa01 f303 	lsl.w	r3, r1, r3
 8002530:	431a      	orrs	r2, r3
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 80b1 	beq.w	80026a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002544:	4b4d      	ldr	r3, [pc, #308]	; (800267c <HAL_GPIO_Init+0x2b8>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	4a4c      	ldr	r2, [pc, #304]	; (800267c <HAL_GPIO_Init+0x2b8>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6193      	str	r3, [r2, #24]
 8002550:	4b4a      	ldr	r3, [pc, #296]	; (800267c <HAL_GPIO_Init+0x2b8>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800255c:	4a48      	ldr	r2, [pc, #288]	; (8002680 <HAL_GPIO_Init+0x2bc>)
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	089b      	lsrs	r3, r3, #2
 8002562:	3302      	adds	r3, #2
 8002564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002568:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	220f      	movs	r2, #15
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4013      	ands	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a40      	ldr	r2, [pc, #256]	; (8002684 <HAL_GPIO_Init+0x2c0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d013      	beq.n	80025b0 <HAL_GPIO_Init+0x1ec>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a3f      	ldr	r2, [pc, #252]	; (8002688 <HAL_GPIO_Init+0x2c4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d00d      	beq.n	80025ac <HAL_GPIO_Init+0x1e8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a3e      	ldr	r2, [pc, #248]	; (800268c <HAL_GPIO_Init+0x2c8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d007      	beq.n	80025a8 <HAL_GPIO_Init+0x1e4>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a3d      	ldr	r2, [pc, #244]	; (8002690 <HAL_GPIO_Init+0x2cc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d101      	bne.n	80025a4 <HAL_GPIO_Init+0x1e0>
 80025a0:	2303      	movs	r3, #3
 80025a2:	e006      	b.n	80025b2 <HAL_GPIO_Init+0x1ee>
 80025a4:	2304      	movs	r3, #4
 80025a6:	e004      	b.n	80025b2 <HAL_GPIO_Init+0x1ee>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e002      	b.n	80025b2 <HAL_GPIO_Init+0x1ee>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_GPIO_Init+0x1ee>
 80025b0:	2300      	movs	r3, #0
 80025b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b4:	f002 0203 	and.w	r2, r2, #3
 80025b8:	0092      	lsls	r2, r2, #2
 80025ba:	4093      	lsls	r3, r2
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	4313      	orrs	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025c2:	492f      	ldr	r1, [pc, #188]	; (8002680 <HAL_GPIO_Init+0x2bc>)
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	3302      	adds	r3, #2
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d006      	beq.n	80025ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025dc:	4b2d      	ldr	r3, [pc, #180]	; (8002694 <HAL_GPIO_Init+0x2d0>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	492c      	ldr	r1, [pc, #176]	; (8002694 <HAL_GPIO_Init+0x2d0>)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	600b      	str	r3, [r1, #0]
 80025e8:	e006      	b.n	80025f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025ea:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <HAL_GPIO_Init+0x2d0>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	4928      	ldr	r1, [pc, #160]	; (8002694 <HAL_GPIO_Init+0x2d0>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d006      	beq.n	8002612 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002604:	4b23      	ldr	r3, [pc, #140]	; (8002694 <HAL_GPIO_Init+0x2d0>)
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	4922      	ldr	r1, [pc, #136]	; (8002694 <HAL_GPIO_Init+0x2d0>)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	604b      	str	r3, [r1, #4]
 8002610:	e006      	b.n	8002620 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002612:	4b20      	ldr	r3, [pc, #128]	; (8002694 <HAL_GPIO_Init+0x2d0>)
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	43db      	mvns	r3, r3
 800261a:	491e      	ldr	r1, [pc, #120]	; (8002694 <HAL_GPIO_Init+0x2d0>)
 800261c:	4013      	ands	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d006      	beq.n	800263a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800262c:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_GPIO_Init+0x2d0>)
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	4918      	ldr	r1, [pc, #96]	; (8002694 <HAL_GPIO_Init+0x2d0>)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	4313      	orrs	r3, r2
 8002636:	608b      	str	r3, [r1, #8]
 8002638:	e006      	b.n	8002648 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800263a:	4b16      	ldr	r3, [pc, #88]	; (8002694 <HAL_GPIO_Init+0x2d0>)
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	43db      	mvns	r3, r3
 8002642:	4914      	ldr	r1, [pc, #80]	; (8002694 <HAL_GPIO_Init+0x2d0>)
 8002644:	4013      	ands	r3, r2
 8002646:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d021      	beq.n	8002698 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002654:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <HAL_GPIO_Init+0x2d0>)
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	490e      	ldr	r1, [pc, #56]	; (8002694 <HAL_GPIO_Init+0x2d0>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	60cb      	str	r3, [r1, #12]
 8002660:	e021      	b.n	80026a6 <HAL_GPIO_Init+0x2e2>
 8002662:	bf00      	nop
 8002664:	10320000 	.word	0x10320000
 8002668:	10310000 	.word	0x10310000
 800266c:	10220000 	.word	0x10220000
 8002670:	10210000 	.word	0x10210000
 8002674:	10120000 	.word	0x10120000
 8002678:	10110000 	.word	0x10110000
 800267c:	40021000 	.word	0x40021000
 8002680:	40010000 	.word	0x40010000
 8002684:	40010800 	.word	0x40010800
 8002688:	40010c00 	.word	0x40010c00
 800268c:	40011000 	.word	0x40011000
 8002690:	40011400 	.word	0x40011400
 8002694:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_GPIO_Init+0x304>)
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	43db      	mvns	r3, r3
 80026a0:	4909      	ldr	r1, [pc, #36]	; (80026c8 <HAL_GPIO_Init+0x304>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	3301      	adds	r3, #1
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	fa22 f303 	lsr.w	r3, r2, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f47f ae8e 	bne.w	80023d8 <HAL_GPIO_Init+0x14>
  }
}
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	372c      	adds	r7, #44	; 0x2c
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	40010400 	.word	0x40010400

080026cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	887b      	ldrh	r3, [r7, #2]
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
 80026e8:	e001      	b.n	80026ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr

080026fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	460b      	mov	r3, r1
 8002704:	807b      	strh	r3, [r7, #2]
 8002706:	4613      	mov	r3, r2
 8002708:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800270a:	787b      	ldrb	r3, [r7, #1]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002710:	887a      	ldrh	r2, [r7, #2]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002716:	e003      	b.n	8002720 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002718:	887b      	ldrh	r3, [r7, #2]
 800271a:	041a      	lsls	r2, r3, #16
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	611a      	str	r2, [r3, #16]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
	...

0800272c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d006      	beq.n	8002750 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002742:	4a05      	ldr	r2, [pc, #20]	; (8002758 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002744:	88fb      	ldrh	r3, [r7, #6]
 8002746:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f806 	bl	800275c <HAL_GPIO_EXTI_Callback>
  }
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40010400 	.word	0x40010400

0800275c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e26c      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 8087 	beq.w	800289e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002790:	4b92      	ldr	r3, [pc, #584]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b04      	cmp	r3, #4
 800279a:	d00c      	beq.n	80027b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800279c:	4b8f      	ldr	r3, [pc, #572]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 030c 	and.w	r3, r3, #12
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d112      	bne.n	80027ce <HAL_RCC_OscConfig+0x5e>
 80027a8:	4b8c      	ldr	r3, [pc, #560]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b4:	d10b      	bne.n	80027ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b6:	4b89      	ldr	r3, [pc, #548]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d06c      	beq.n	800289c <HAL_RCC_OscConfig+0x12c>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d168      	bne.n	800289c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e246      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_OscConfig+0x76>
 80027d8:	4b80      	ldr	r3, [pc, #512]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a7f      	ldr	r2, [pc, #508]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80027de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	e02e      	b.n	8002844 <HAL_RCC_OscConfig+0xd4>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x98>
 80027ee:	4b7b      	ldr	r3, [pc, #492]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a7a      	ldr	r2, [pc, #488]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80027f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4b78      	ldr	r3, [pc, #480]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a77      	ldr	r2, [pc, #476]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e01d      	b.n	8002844 <HAL_RCC_OscConfig+0xd4>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0xbc>
 8002812:	4b72      	ldr	r3, [pc, #456]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a71      	ldr	r2, [pc, #452]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	4b6f      	ldr	r3, [pc, #444]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a6e      	ldr	r2, [pc, #440]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e00b      	b.n	8002844 <HAL_RCC_OscConfig+0xd4>
 800282c:	4b6b      	ldr	r3, [pc, #428]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a6a      	ldr	r2, [pc, #424]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	4b68      	ldr	r3, [pc, #416]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a67      	ldr	r2, [pc, #412]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 800283e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002842:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7ff fca2 	bl	8002194 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002854:	f7ff fc9e 	bl	8002194 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e1fa      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	4b5d      	ldr	r3, [pc, #372]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0xe4>
 8002872:	e014      	b.n	800289e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7ff fc8e 	bl	8002194 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287c:	f7ff fc8a 	bl	8002194 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e1e6      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	4b53      	ldr	r3, [pc, #332]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x10c>
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d063      	beq.n	8002972 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028aa:	4b4c      	ldr	r3, [pc, #304]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028b6:	4b49      	ldr	r3, [pc, #292]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d11c      	bne.n	80028fc <HAL_RCC_OscConfig+0x18c>
 80028c2:	4b46      	ldr	r3, [pc, #280]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d116      	bne.n	80028fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ce:	4b43      	ldr	r3, [pc, #268]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_RCC_OscConfig+0x176>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d001      	beq.n	80028e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e1ba      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e6:	4b3d      	ldr	r3, [pc, #244]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4939      	ldr	r1, [pc, #228]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fa:	e03a      	b.n	8002972 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d020      	beq.n	8002946 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002904:	4b36      	ldr	r3, [pc, #216]	; (80029e0 <HAL_RCC_OscConfig+0x270>)
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7ff fc43 	bl	8002194 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002912:	f7ff fc3f 	bl	8002194 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e19b      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	4b2d      	ldr	r3, [pc, #180]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002930:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4927      	ldr	r1, [pc, #156]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002940:	4313      	orrs	r3, r2
 8002942:	600b      	str	r3, [r1, #0]
 8002944:	e015      	b.n	8002972 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002946:	4b26      	ldr	r3, [pc, #152]	; (80029e0 <HAL_RCC_OscConfig+0x270>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7ff fc22 	bl	8002194 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002954:	f7ff fc1e 	bl	8002194 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e17a      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d03a      	beq.n	80029f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d019      	beq.n	80029ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002986:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298c:	f7ff fc02 	bl	8002194 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002994:	f7ff fbfe 	bl	8002194 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e15a      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029b2:	2001      	movs	r0, #1
 80029b4:	f000 fad8 	bl	8002f68 <RCC_Delay>
 80029b8:	e01c      	b.n	80029f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ba:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c0:	f7ff fbe8 	bl	8002194 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c6:	e00f      	b.n	80029e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c8:	f7ff fbe4 	bl	8002194 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d908      	bls.n	80029e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e140      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000
 80029e0:	42420000 	.word	0x42420000
 80029e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e8:	4b9e      	ldr	r3, [pc, #632]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1e9      	bne.n	80029c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80a6 	beq.w	8002b4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a02:	2300      	movs	r3, #0
 8002a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a06:	4b97      	ldr	r3, [pc, #604]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10d      	bne.n	8002a2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a12:	4b94      	ldr	r3, [pc, #592]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	4a93      	ldr	r2, [pc, #588]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	61d3      	str	r3, [r2, #28]
 8002a1e:	4b91      	ldr	r3, [pc, #580]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a26:	60bb      	str	r3, [r7, #8]
 8002a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2e:	4b8e      	ldr	r3, [pc, #568]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d118      	bne.n	8002a6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a3a:	4b8b      	ldr	r3, [pc, #556]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a8a      	ldr	r2, [pc, #552]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a46:	f7ff fba5 	bl	8002194 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4e:	f7ff fba1 	bl	8002194 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b64      	cmp	r3, #100	; 0x64
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e0fd      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a60:	4b81      	ldr	r3, [pc, #516]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0f0      	beq.n	8002a4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d106      	bne.n	8002a82 <HAL_RCC_OscConfig+0x312>
 8002a74:	4b7b      	ldr	r3, [pc, #492]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	4a7a      	ldr	r2, [pc, #488]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	6213      	str	r3, [r2, #32]
 8002a80:	e02d      	b.n	8002ade <HAL_RCC_OscConfig+0x36e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x334>
 8002a8a:	4b76      	ldr	r3, [pc, #472]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	4a75      	ldr	r2, [pc, #468]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	6213      	str	r3, [r2, #32]
 8002a96:	4b73      	ldr	r3, [pc, #460]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	4a72      	ldr	r2, [pc, #456]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002a9c:	f023 0304 	bic.w	r3, r3, #4
 8002aa0:	6213      	str	r3, [r2, #32]
 8002aa2:	e01c      	b.n	8002ade <HAL_RCC_OscConfig+0x36e>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	2b05      	cmp	r3, #5
 8002aaa:	d10c      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x356>
 8002aac:	4b6d      	ldr	r3, [pc, #436]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	4a6c      	ldr	r2, [pc, #432]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002ab2:	f043 0304 	orr.w	r3, r3, #4
 8002ab6:	6213      	str	r3, [r2, #32]
 8002ab8:	4b6a      	ldr	r3, [pc, #424]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	4a69      	ldr	r2, [pc, #420]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6213      	str	r3, [r2, #32]
 8002ac4:	e00b      	b.n	8002ade <HAL_RCC_OscConfig+0x36e>
 8002ac6:	4b67      	ldr	r3, [pc, #412]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	4a66      	ldr	r2, [pc, #408]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	6213      	str	r3, [r2, #32]
 8002ad2:	4b64      	ldr	r3, [pc, #400]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	4a63      	ldr	r2, [pc, #396]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002ad8:	f023 0304 	bic.w	r3, r3, #4
 8002adc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d015      	beq.n	8002b12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae6:	f7ff fb55 	bl	8002194 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aec:	e00a      	b.n	8002b04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aee:	f7ff fb51 	bl	8002194 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e0ab      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b04:	4b57      	ldr	r3, [pc, #348]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0ee      	beq.n	8002aee <HAL_RCC_OscConfig+0x37e>
 8002b10:	e014      	b.n	8002b3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b12:	f7ff fb3f 	bl	8002194 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b18:	e00a      	b.n	8002b30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1a:	f7ff fb3b 	bl	8002194 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e095      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b30:	4b4c      	ldr	r3, [pc, #304]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1ee      	bne.n	8002b1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b3c:	7dfb      	ldrb	r3, [r7, #23]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d105      	bne.n	8002b4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b42:	4b48      	ldr	r3, [pc, #288]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	4a47      	ldr	r2, [pc, #284]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8081 	beq.w	8002c5a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b58:	4b42      	ldr	r3, [pc, #264]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d061      	beq.n	8002c28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d146      	bne.n	8002bfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6c:	4b3f      	ldr	r3, [pc, #252]	; (8002c6c <HAL_RCC_OscConfig+0x4fc>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b72:	f7ff fb0f 	bl	8002194 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7a:	f7ff fb0b 	bl	8002194 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e067      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8c:	4b35      	ldr	r3, [pc, #212]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f0      	bne.n	8002b7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba0:	d108      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ba2:	4b30      	ldr	r3, [pc, #192]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	492d      	ldr	r1, [pc, #180]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bb4:	4b2b      	ldr	r3, [pc, #172]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a19      	ldr	r1, [r3, #32]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	430b      	orrs	r3, r1
 8002bc6:	4927      	ldr	r1, [pc, #156]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bcc:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <HAL_RCC_OscConfig+0x4fc>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd2:	f7ff fadf 	bl	8002194 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bda:	f7ff fadb 	bl	8002194 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e037      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bec:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x46a>
 8002bf8:	e02f      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfa:	4b1c      	ldr	r3, [pc, #112]	; (8002c6c <HAL_RCC_OscConfig+0x4fc>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7ff fac8 	bl	8002194 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c08:	f7ff fac4 	bl	8002194 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e020      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x498>
 8002c26:	e018      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e013      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d106      	bne.n	8002c56 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d001      	beq.n	8002c5a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40007000 	.word	0x40007000
 8002c6c:	42420060 	.word	0x42420060

08002c70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0d0      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c84:	4b6a      	ldr	r3, [pc, #424]	; (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d910      	bls.n	8002cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b67      	ldr	r3, [pc, #412]	; (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 0207 	bic.w	r2, r3, #7
 8002c9a:	4965      	ldr	r1, [pc, #404]	; (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca2:	4b63      	ldr	r3, [pc, #396]	; (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0b8      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d020      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ccc:	4b59      	ldr	r3, [pc, #356]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4a58      	ldr	r2, [pc, #352]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce4:	4b53      	ldr	r3, [pc, #332]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4a52      	ldr	r2, [pc, #328]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf0:	4b50      	ldr	r3, [pc, #320]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	494d      	ldr	r1, [pc, #308]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d040      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d107      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	4b47      	ldr	r3, [pc, #284]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d115      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e07f      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d107      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2e:	4b41      	ldr	r3, [pc, #260]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d109      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e073      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3e:	4b3d      	ldr	r3, [pc, #244]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e06b      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d4e:	4b39      	ldr	r3, [pc, #228]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f023 0203 	bic.w	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4936      	ldr	r1, [pc, #216]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d60:	f7ff fa18 	bl	8002194 <HAL_GetTick>
 8002d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d66:	e00a      	b.n	8002d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d68:	f7ff fa14 	bl	8002194 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e053      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7e:	4b2d      	ldr	r3, [pc, #180]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 020c 	and.w	r2, r3, #12
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d1eb      	bne.n	8002d68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d90:	4b27      	ldr	r3, [pc, #156]	; (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d210      	bcs.n	8002dc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 0207 	bic.w	r2, r3, #7
 8002da6:	4922      	ldr	r1, [pc, #136]	; (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e032      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dcc:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	4916      	ldr	r1, [pc, #88]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d009      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dea:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	490e      	ldr	r1, [pc, #56]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dfe:	f000 f821 	bl	8002e44 <HAL_RCC_GetSysClockFreq>
 8002e02:	4602      	mov	r2, r0
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	490a      	ldr	r1, [pc, #40]	; (8002e38 <HAL_RCC_ClockConfig+0x1c8>)
 8002e10:	5ccb      	ldrb	r3, [r1, r3]
 8002e12:	fa22 f303 	lsr.w	r3, r2, r3
 8002e16:	4a09      	ldr	r2, [pc, #36]	; (8002e3c <HAL_RCC_ClockConfig+0x1cc>)
 8002e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e1a:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <HAL_RCC_ClockConfig+0x1d0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff f976 	bl	8002110 <HAL_InitTick>

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40022000 	.word	0x40022000
 8002e34:	40021000 	.word	0x40021000
 8002e38:	08004950 	.word	0x08004950
 8002e3c:	20000050 	.word	0x20000050
 8002e40:	20000054 	.word	0x20000054

08002e44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e44:	b490      	push	{r4, r7}
 8002e46:	b08a      	sub	sp, #40	; 0x28
 8002e48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e4a:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e4c:	1d3c      	adds	r4, r7, #4
 8002e4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e54:	f240 2301 	movw	r3, #513	; 0x201
 8002e58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	2300      	movs	r3, #0
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e6e:	4b22      	ldr	r3, [pc, #136]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d002      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0x40>
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d003      	beq.n	8002e8a <HAL_RCC_GetSysClockFreq+0x46>
 8002e82:	e02d      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e84:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e86:	623b      	str	r3, [r7, #32]
      break;
 8002e88:	e02d      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	0c9b      	lsrs	r3, r3, #18
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e96:	4413      	add	r3, r2
 8002e98:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e9c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d013      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ea8:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	0c5b      	lsrs	r3, r3, #17
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ebc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	4a0e      	ldr	r2, [pc, #56]	; (8002efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ec2:	fb02 f203 	mul.w	r2, r2, r3
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ece:	e004      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	4a0b      	ldr	r2, [pc, #44]	; (8002f00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ed4:	fb02 f303 	mul.w	r3, r2, r3
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	623b      	str	r3, [r7, #32]
      break;
 8002ede:	e002      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ee2:	623b      	str	r3, [r7, #32]
      break;
 8002ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3728      	adds	r7, #40	; 0x28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc90      	pop	{r4, r7}
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	08004940 	.word	0x08004940
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	007a1200 	.word	0x007a1200
 8002f00:	003d0900 	.word	0x003d0900

08002f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f08:	4b02      	ldr	r3, [pc, #8]	; (8002f14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	20000050 	.word	0x20000050

08002f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f1c:	f7ff fff2 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	0a1b      	lsrs	r3, r3, #8
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	4903      	ldr	r1, [pc, #12]	; (8002f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	08004960 	.word	0x08004960

08002f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f44:	f7ff ffde 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	0adb      	lsrs	r3, r3, #11
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	4903      	ldr	r1, [pc, #12]	; (8002f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f56:	5ccb      	ldrb	r3, [r1, r3]
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40021000 	.word	0x40021000
 8002f64:	08004960 	.word	0x08004960

08002f68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f70:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <RCC_Delay+0x34>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <RCC_Delay+0x38>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	0a5b      	lsrs	r3, r3, #9
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f84:	bf00      	nop
  }
  while (Delay --);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1e5a      	subs	r2, r3, #1
 8002f8a:	60fa      	str	r2, [r7, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f9      	bne.n	8002f84 <RCC_Delay+0x1c>
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	20000050 	.word	0x20000050
 8002fa0:	10624dd3 	.word	0x10624dd3

08002fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e041      	b.n	800303a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fe ff34 	bl	8001e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	f000 fb86 	bl	80036f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	d001      	beq.n	800305c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e03a      	b.n	80030d2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a18      	ldr	r2, [pc, #96]	; (80030dc <HAL_TIM_Base_Start_IT+0x98>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00e      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x58>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003086:	d009      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x58>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a14      	ldr	r2, [pc, #80]	; (80030e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d004      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x58>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a13      	ldr	r2, [pc, #76]	; (80030e4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d111      	bne.n	80030c0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b06      	cmp	r3, #6
 80030ac:	d010      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0201 	orr.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030be:	e007      	b.n	80030d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	40012c00 	.word	0x40012c00
 80030e0:	40000400 	.word	0x40000400
 80030e4:	40000800 	.word	0x40000800

080030e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e041      	b.n	800317e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f839 	bl	8003186 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3304      	adds	r3, #4
 8003124:	4619      	mov	r1, r3
 8003126:	4610      	mov	r0, r2
 8003128:	f000 fae4 	bl	80036f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d122      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d11b      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0202 	mvn.w	r2, #2
 80031c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fa6f 	bl	80036be <HAL_TIM_IC_CaptureCallback>
 80031e0:	e005      	b.n	80031ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fa62 	bl	80036ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fa71 	bl	80036d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d122      	bne.n	8003248 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b04      	cmp	r3, #4
 800320e:	d11b      	bne.n	8003248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0204 	mvn.w	r2, #4
 8003218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2202      	movs	r2, #2
 800321e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fa45 	bl	80036be <HAL_TIM_IC_CaptureCallback>
 8003234:	e005      	b.n	8003242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 fa38 	bl	80036ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fa47 	bl	80036d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b08      	cmp	r3, #8
 8003254:	d122      	bne.n	800329c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b08      	cmp	r3, #8
 8003262:	d11b      	bne.n	800329c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f06f 0208 	mvn.w	r2, #8
 800326c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2204      	movs	r2, #4
 8003272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fa1b 	bl	80036be <HAL_TIM_IC_CaptureCallback>
 8003288:	e005      	b.n	8003296 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fa0e 	bl	80036ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 fa1d 	bl	80036d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b10      	cmp	r3, #16
 80032a8:	d122      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	d11b      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0210 	mvn.w	r2, #16
 80032c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2208      	movs	r2, #8
 80032c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f9f1 	bl	80036be <HAL_TIM_IC_CaptureCallback>
 80032dc:	e005      	b.n	80032ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f9e4 	bl	80036ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f9f3 	bl	80036d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d10e      	bne.n	800331c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d107      	bne.n	800331c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0201 	mvn.w	r2, #1
 8003314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7fe fc96 	bl	8001c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003326:	2b80      	cmp	r3, #128	; 0x80
 8003328:	d10e      	bne.n	8003348 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003334:	2b80      	cmp	r3, #128	; 0x80
 8003336:	d107      	bne.n	8003348 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fcbd 	bl	8003cc2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003352:	2b40      	cmp	r3, #64	; 0x40
 8003354:	d10e      	bne.n	8003374 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003360:	2b40      	cmp	r3, #64	; 0x40
 8003362:	d107      	bne.n	8003374 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800336c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f9b7 	bl	80036e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	2b20      	cmp	r3, #32
 8003380:	d10e      	bne.n	80033a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b20      	cmp	r3, #32
 800338e:	d107      	bne.n	80033a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0220 	mvn.w	r2, #32
 8003398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fc88 	bl	8003cb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80033be:	2302      	movs	r3, #2
 80033c0:	e0ac      	b.n	800351c <HAL_TIM_PWM_ConfigChannel+0x174>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b0c      	cmp	r3, #12
 80033ce:	f200 809f 	bhi.w	8003510 <HAL_TIM_PWM_ConfigChannel+0x168>
 80033d2:	a201      	add	r2, pc, #4	; (adr r2, 80033d8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80033d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d8:	0800340d 	.word	0x0800340d
 80033dc:	08003511 	.word	0x08003511
 80033e0:	08003511 	.word	0x08003511
 80033e4:	08003511 	.word	0x08003511
 80033e8:	0800344d 	.word	0x0800344d
 80033ec:	08003511 	.word	0x08003511
 80033f0:	08003511 	.word	0x08003511
 80033f4:	08003511 	.word	0x08003511
 80033f8:	0800348f 	.word	0x0800348f
 80033fc:	08003511 	.word	0x08003511
 8003400:	08003511 	.word	0x08003511
 8003404:	08003511 	.word	0x08003511
 8003408:	080034cf 	.word	0x080034cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 f9d0 	bl	80037b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0208 	orr.w	r2, r2, #8
 8003426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0204 	bic.w	r2, r2, #4
 8003436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6999      	ldr	r1, [r3, #24]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	619a      	str	r2, [r3, #24]
      break;
 800344a:	e062      	b.n	8003512 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fa16 	bl	8003884 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699a      	ldr	r2, [r3, #24]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6999      	ldr	r1, [r3, #24]
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	021a      	lsls	r2, r3, #8
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	619a      	str	r2, [r3, #24]
      break;
 800348c:	e041      	b.n	8003512 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fa5f 	bl	8003958 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69da      	ldr	r2, [r3, #28]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0208 	orr.w	r2, r2, #8
 80034a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69da      	ldr	r2, [r3, #28]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0204 	bic.w	r2, r2, #4
 80034b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69d9      	ldr	r1, [r3, #28]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	61da      	str	r2, [r3, #28]
      break;
 80034cc:	e021      	b.n	8003512 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68b9      	ldr	r1, [r7, #8]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 faa9 	bl	8003a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69da      	ldr	r2, [r3, #28]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69da      	ldr	r2, [r3, #28]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69d9      	ldr	r1, [r3, #28]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	021a      	lsls	r2, r3, #8
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	61da      	str	r2, [r3, #28]
      break;
 800350e:	e000      	b.n	8003512 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003510:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_TIM_ConfigClockSource+0x18>
 8003538:	2302      	movs	r3, #2
 800353a:	e0b3      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x180>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800355a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003562:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003574:	d03e      	beq.n	80035f4 <HAL_TIM_ConfigClockSource+0xd0>
 8003576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800357a:	f200 8087 	bhi.w	800368c <HAL_TIM_ConfigClockSource+0x168>
 800357e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003582:	f000 8085 	beq.w	8003690 <HAL_TIM_ConfigClockSource+0x16c>
 8003586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358a:	d87f      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x168>
 800358c:	2b70      	cmp	r3, #112	; 0x70
 800358e:	d01a      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0xa2>
 8003590:	2b70      	cmp	r3, #112	; 0x70
 8003592:	d87b      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x168>
 8003594:	2b60      	cmp	r3, #96	; 0x60
 8003596:	d050      	beq.n	800363a <HAL_TIM_ConfigClockSource+0x116>
 8003598:	2b60      	cmp	r3, #96	; 0x60
 800359a:	d877      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x168>
 800359c:	2b50      	cmp	r3, #80	; 0x50
 800359e:	d03c      	beq.n	800361a <HAL_TIM_ConfigClockSource+0xf6>
 80035a0:	2b50      	cmp	r3, #80	; 0x50
 80035a2:	d873      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x168>
 80035a4:	2b40      	cmp	r3, #64	; 0x40
 80035a6:	d058      	beq.n	800365a <HAL_TIM_ConfigClockSource+0x136>
 80035a8:	2b40      	cmp	r3, #64	; 0x40
 80035aa:	d86f      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x168>
 80035ac:	2b30      	cmp	r3, #48	; 0x30
 80035ae:	d064      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x156>
 80035b0:	2b30      	cmp	r3, #48	; 0x30
 80035b2:	d86b      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x168>
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d060      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x156>
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d867      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x168>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d05c      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x156>
 80035c0:	2b10      	cmp	r3, #16
 80035c2:	d05a      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80035c4:	e062      	b.n	800368c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6899      	ldr	r1, [r3, #8]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f000 faee 	bl	8003bb6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	609a      	str	r2, [r3, #8]
      break;
 80035f2:	e04e      	b.n	8003692 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	6899      	ldr	r1, [r3, #8]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f000 fad7 	bl	8003bb6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003616:	609a      	str	r2, [r3, #8]
      break;
 8003618:	e03b      	b.n	8003692 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	6859      	ldr	r1, [r3, #4]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	461a      	mov	r2, r3
 8003628:	f000 fa4e 	bl	8003ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2150      	movs	r1, #80	; 0x50
 8003632:	4618      	mov	r0, r3
 8003634:	f000 faa5 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 8003638:	e02b      	b.n	8003692 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	6859      	ldr	r1, [r3, #4]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	461a      	mov	r2, r3
 8003648:	f000 fa6c 	bl	8003b24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2160      	movs	r1, #96	; 0x60
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fa95 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 8003658:	e01b      	b.n	8003692 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6859      	ldr	r1, [r3, #4]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	461a      	mov	r2, r3
 8003668:	f000 fa2e 	bl	8003ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2140      	movs	r1, #64	; 0x40
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fa85 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 8003678:	e00b      	b.n	8003692 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f000 fa7c 	bl	8003b82 <TIM_ITRx_SetConfig>
        break;
 800368a:	e002      	b.n	8003692 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800368c:	bf00      	nop
 800368e:	e000      	b.n	8003692 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003690:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr

080036be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr

080036f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a29      	ldr	r2, [pc, #164]	; (80037ac <TIM_Base_SetConfig+0xb8>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00b      	beq.n	8003724 <TIM_Base_SetConfig+0x30>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003712:	d007      	beq.n	8003724 <TIM_Base_SetConfig+0x30>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a26      	ldr	r2, [pc, #152]	; (80037b0 <TIM_Base_SetConfig+0xbc>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d003      	beq.n	8003724 <TIM_Base_SetConfig+0x30>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a25      	ldr	r2, [pc, #148]	; (80037b4 <TIM_Base_SetConfig+0xc0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d108      	bne.n	8003736 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a1c      	ldr	r2, [pc, #112]	; (80037ac <TIM_Base_SetConfig+0xb8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00b      	beq.n	8003756 <TIM_Base_SetConfig+0x62>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003744:	d007      	beq.n	8003756 <TIM_Base_SetConfig+0x62>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a19      	ldr	r2, [pc, #100]	; (80037b0 <TIM_Base_SetConfig+0xbc>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d003      	beq.n	8003756 <TIM_Base_SetConfig+0x62>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a18      	ldr	r2, [pc, #96]	; (80037b4 <TIM_Base_SetConfig+0xc0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d108      	bne.n	8003768 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a07      	ldr	r2, [pc, #28]	; (80037ac <TIM_Base_SetConfig+0xb8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d103      	bne.n	800379c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	615a      	str	r2, [r3, #20]
}
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr
 80037ac:	40012c00 	.word	0x40012c00
 80037b0:	40000400 	.word	0x40000400
 80037b4:	40000800 	.word	0x40000800

080037b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	f023 0201 	bic.w	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0303 	bic.w	r3, r3, #3
 80037ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f023 0302 	bic.w	r3, r3, #2
 8003800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a1c      	ldr	r2, [pc, #112]	; (8003880 <TIM_OC1_SetConfig+0xc8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d10c      	bne.n	800382e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f023 0308 	bic.w	r3, r3, #8
 800381a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f023 0304 	bic.w	r3, r3, #4
 800382c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a13      	ldr	r2, [pc, #76]	; (8003880 <TIM_OC1_SetConfig+0xc8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d111      	bne.n	800385a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800383c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	621a      	str	r2, [r3, #32]
}
 8003874:	bf00      	nop
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40012c00 	.word	0x40012c00

08003884 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	f023 0210 	bic.w	r2, r3, #16
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f023 0320 	bic.w	r3, r3, #32
 80038ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <TIM_OC2_SetConfig+0xd0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d10d      	bne.n	8003900 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a14      	ldr	r2, [pc, #80]	; (8003954 <TIM_OC2_SetConfig+0xd0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d113      	bne.n	8003930 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800390e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003916:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	621a      	str	r2, [r3, #32]
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr
 8003954:	40012c00 	.word	0x40012c00

08003958 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0303 	bic.w	r3, r3, #3
 800398e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	021b      	lsls	r3, r3, #8
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <TIM_OC3_SetConfig+0xd0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d10d      	bne.n	80039d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a14      	ldr	r2, [pc, #80]	; (8003a28 <TIM_OC3_SetConfig+0xd0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d113      	bne.n	8003a02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	621a      	str	r2, [r3, #32]
}
 8003a1c:	bf00      	nop
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40012c00 	.word	0x40012c00

08003a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	031b      	lsls	r3, r3, #12
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a0f      	ldr	r2, [pc, #60]	; (8003ac4 <TIM_OC4_SetConfig+0x98>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d109      	bne.n	8003aa0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	019b      	lsls	r3, r3, #6
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	621a      	str	r2, [r3, #32]
}
 8003aba:	bf00      	nop
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr
 8003ac4:	40012c00 	.word	0x40012c00

08003ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f023 0201 	bic.w	r2, r3, #1
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f023 030a 	bic.w	r3, r3, #10
 8003b04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	621a      	str	r2, [r3, #32]
}
 8003b1a:	bf00      	nop
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f023 0210 	bic.w	r2, r3, #16
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	031b      	lsls	r3, r3, #12
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	621a      	str	r2, [r3, #32]
}
 8003b78:	bf00      	nop
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr

08003b82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f043 0307 	orr.w	r3, r3, #7
 8003ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	609a      	str	r2, [r3, #8]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b087      	sub	sp, #28
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	021a      	lsls	r2, r3, #8
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	609a      	str	r2, [r3, #8]
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e046      	b.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a16      	ldr	r2, [pc, #88]	; (8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00e      	beq.n	8003c6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c58:	d009      	beq.n	8003c6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a12      	ldr	r2, [pc, #72]	; (8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d004      	beq.n	8003c6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a10      	ldr	r2, [pc, #64]	; (8003cac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d10c      	bne.n	8003c88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr
 8003ca4:	40012c00 	.word	0x40012c00
 8003ca8:	40000400 	.word	0x40000400
 8003cac:	40000800 	.word	0x40000800

08003cb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bc80      	pop	{r7}
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e03f      	b.n	8003d66 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fe f90e 	bl	8001f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2224      	movs	r2, #36	; 0x24
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f905 	bl	8003f28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b08a      	sub	sp, #40	; 0x28
 8003d72:	af02      	add	r7, sp, #8
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	603b      	str	r3, [r7, #0]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b20      	cmp	r3, #32
 8003d8c:	d17c      	bne.n	8003e88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_UART_Transmit+0x2c>
 8003d94:	88fb      	ldrh	r3, [r7, #6]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e075      	b.n	8003e8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_UART_Transmit+0x3e>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e06e      	b.n	8003e8a <HAL_UART_Transmit+0x11c>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2221      	movs	r2, #33	; 0x21
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dc2:	f7fe f9e7 	bl	8002194 <HAL_GetTick>
 8003dc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	88fa      	ldrh	r2, [r7, #6]
 8003dcc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	88fa      	ldrh	r2, [r7, #6]
 8003dd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ddc:	d108      	bne.n	8003df0 <HAL_UART_Transmit+0x82>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d104      	bne.n	8003df0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	61bb      	str	r3, [r7, #24]
 8003dee:	e003      	b.n	8003df8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e00:	e02a      	b.n	8003e58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2180      	movs	r1, #128	; 0x80
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f840 	bl	8003e92 <UART_WaitOnFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e036      	b.n	8003e8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10b      	bne.n	8003e3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	3302      	adds	r3, #2
 8003e36:	61bb      	str	r3, [r7, #24]
 8003e38:	e007      	b.n	8003e4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	781a      	ldrb	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	3301      	adds	r3, #1
 8003e48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1cf      	bne.n	8003e02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2140      	movs	r1, #64	; 0x40
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f810 	bl	8003e92 <UART_WaitOnFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e006      	b.n	8003e8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	e000      	b.n	8003e8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e88:	2302      	movs	r3, #2
  }
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	603b      	str	r3, [r7, #0]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea2:	e02c      	b.n	8003efe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eaa:	d028      	beq.n	8003efe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d007      	beq.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003eb2:	f7fe f96f 	bl	8002194 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d21d      	bcs.n	8003efe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ed0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0201 	bic.w	r2, r2, #1
 8003ee0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e00f      	b.n	8003f1e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4013      	ands	r3, r2
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	bf0c      	ite	eq
 8003f0e:	2301      	moveq	r3, #1
 8003f10:	2300      	movne	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	461a      	mov	r2, r3
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d0c3      	beq.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f62:	f023 030c 	bic.w	r3, r3, #12
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699a      	ldr	r2, [r3, #24]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a2c      	ldr	r2, [pc, #176]	; (800403c <UART_SetConfig+0x114>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d103      	bne.n	8003f98 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f90:	f7fe ffd6 	bl	8002f40 <HAL_RCC_GetPCLK2Freq>
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	e002      	b.n	8003f9e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f98:	f7fe ffbe 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 8003f9c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009a      	lsls	r2, r3, #2
 8003fa8:	441a      	add	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb4:	4a22      	ldr	r2, [pc, #136]	; (8004040 <UART_SetConfig+0x118>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	0119      	lsls	r1, r3, #4
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009a      	lsls	r2, r3, #2
 8003fc8:	441a      	add	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fd4:	4b1a      	ldr	r3, [pc, #104]	; (8004040 <UART_SetConfig+0x118>)
 8003fd6:	fba3 0302 	umull	r0, r3, r3, r2
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	2064      	movs	r0, #100	; 0x64
 8003fde:	fb00 f303 	mul.w	r3, r0, r3
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	3332      	adds	r3, #50	; 0x32
 8003fe8:	4a15      	ldr	r2, [pc, #84]	; (8004040 <UART_SetConfig+0x118>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff4:	4419      	add	r1, r3
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009a      	lsls	r2, r3, #2
 8004000:	441a      	add	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	fbb2 f2f3 	udiv	r2, r2, r3
 800400c:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <UART_SetConfig+0x118>)
 800400e:	fba3 0302 	umull	r0, r3, r3, r2
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	2064      	movs	r0, #100	; 0x64
 8004016:	fb00 f303 	mul.w	r3, r0, r3
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	3332      	adds	r3, #50	; 0x32
 8004020:	4a07      	ldr	r2, [pc, #28]	; (8004040 <UART_SetConfig+0x118>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	f003 020f 	and.w	r2, r3, #15
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	440a      	add	r2, r1
 8004032:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004034:	bf00      	nop
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40013800 	.word	0x40013800
 8004040:	51eb851f 	.word	0x51eb851f

08004044 <__errno>:
 8004044:	4b01      	ldr	r3, [pc, #4]	; (800404c <__errno+0x8>)
 8004046:	6818      	ldr	r0, [r3, #0]
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	2000005c 	.word	0x2000005c

08004050 <__libc_init_array>:
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	2600      	movs	r6, #0
 8004054:	4d0c      	ldr	r5, [pc, #48]	; (8004088 <__libc_init_array+0x38>)
 8004056:	4c0d      	ldr	r4, [pc, #52]	; (800408c <__libc_init_array+0x3c>)
 8004058:	1b64      	subs	r4, r4, r5
 800405a:	10a4      	asrs	r4, r4, #2
 800405c:	42a6      	cmp	r6, r4
 800405e:	d109      	bne.n	8004074 <__libc_init_array+0x24>
 8004060:	f000 fc5c 	bl	800491c <_init>
 8004064:	2600      	movs	r6, #0
 8004066:	4d0a      	ldr	r5, [pc, #40]	; (8004090 <__libc_init_array+0x40>)
 8004068:	4c0a      	ldr	r4, [pc, #40]	; (8004094 <__libc_init_array+0x44>)
 800406a:	1b64      	subs	r4, r4, r5
 800406c:	10a4      	asrs	r4, r4, #2
 800406e:	42a6      	cmp	r6, r4
 8004070:	d105      	bne.n	800407e <__libc_init_array+0x2e>
 8004072:	bd70      	pop	{r4, r5, r6, pc}
 8004074:	f855 3b04 	ldr.w	r3, [r5], #4
 8004078:	4798      	blx	r3
 800407a:	3601      	adds	r6, #1
 800407c:	e7ee      	b.n	800405c <__libc_init_array+0xc>
 800407e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004082:	4798      	blx	r3
 8004084:	3601      	adds	r6, #1
 8004086:	e7f2      	b.n	800406e <__libc_init_array+0x1e>
 8004088:	0800499c 	.word	0x0800499c
 800408c:	0800499c 	.word	0x0800499c
 8004090:	0800499c 	.word	0x0800499c
 8004094:	080049a0 	.word	0x080049a0

08004098 <memset>:
 8004098:	4603      	mov	r3, r0
 800409a:	4402      	add	r2, r0
 800409c:	4293      	cmp	r3, r2
 800409e:	d100      	bne.n	80040a2 <memset+0xa>
 80040a0:	4770      	bx	lr
 80040a2:	f803 1b01 	strb.w	r1, [r3], #1
 80040a6:	e7f9      	b.n	800409c <memset+0x4>

080040a8 <siprintf>:
 80040a8:	b40e      	push	{r1, r2, r3}
 80040aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040ae:	b500      	push	{lr}
 80040b0:	b09c      	sub	sp, #112	; 0x70
 80040b2:	ab1d      	add	r3, sp, #116	; 0x74
 80040b4:	9002      	str	r0, [sp, #8]
 80040b6:	9006      	str	r0, [sp, #24]
 80040b8:	9107      	str	r1, [sp, #28]
 80040ba:	9104      	str	r1, [sp, #16]
 80040bc:	4808      	ldr	r0, [pc, #32]	; (80040e0 <siprintf+0x38>)
 80040be:	4909      	ldr	r1, [pc, #36]	; (80040e4 <siprintf+0x3c>)
 80040c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80040c4:	9105      	str	r1, [sp, #20]
 80040c6:	6800      	ldr	r0, [r0, #0]
 80040c8:	a902      	add	r1, sp, #8
 80040ca:	9301      	str	r3, [sp, #4]
 80040cc:	f000 f868 	bl	80041a0 <_svfiprintf_r>
 80040d0:	2200      	movs	r2, #0
 80040d2:	9b02      	ldr	r3, [sp, #8]
 80040d4:	701a      	strb	r2, [r3, #0]
 80040d6:	b01c      	add	sp, #112	; 0x70
 80040d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80040dc:	b003      	add	sp, #12
 80040de:	4770      	bx	lr
 80040e0:	2000005c 	.word	0x2000005c
 80040e4:	ffff0208 	.word	0xffff0208

080040e8 <__ssputs_r>:
 80040e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040ec:	688e      	ldr	r6, [r1, #8]
 80040ee:	4682      	mov	sl, r0
 80040f0:	429e      	cmp	r6, r3
 80040f2:	460c      	mov	r4, r1
 80040f4:	4690      	mov	r8, r2
 80040f6:	461f      	mov	r7, r3
 80040f8:	d838      	bhi.n	800416c <__ssputs_r+0x84>
 80040fa:	898a      	ldrh	r2, [r1, #12]
 80040fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004100:	d032      	beq.n	8004168 <__ssputs_r+0x80>
 8004102:	6825      	ldr	r5, [r4, #0]
 8004104:	6909      	ldr	r1, [r1, #16]
 8004106:	3301      	adds	r3, #1
 8004108:	eba5 0901 	sub.w	r9, r5, r1
 800410c:	6965      	ldr	r5, [r4, #20]
 800410e:	444b      	add	r3, r9
 8004110:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004114:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004118:	106d      	asrs	r5, r5, #1
 800411a:	429d      	cmp	r5, r3
 800411c:	bf38      	it	cc
 800411e:	461d      	movcc	r5, r3
 8004120:	0553      	lsls	r3, r2, #21
 8004122:	d531      	bpl.n	8004188 <__ssputs_r+0xa0>
 8004124:	4629      	mov	r1, r5
 8004126:	f000 fb53 	bl	80047d0 <_malloc_r>
 800412a:	4606      	mov	r6, r0
 800412c:	b950      	cbnz	r0, 8004144 <__ssputs_r+0x5c>
 800412e:	230c      	movs	r3, #12
 8004130:	f04f 30ff 	mov.w	r0, #4294967295
 8004134:	f8ca 3000 	str.w	r3, [sl]
 8004138:	89a3      	ldrh	r3, [r4, #12]
 800413a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800413e:	81a3      	strh	r3, [r4, #12]
 8004140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004144:	464a      	mov	r2, r9
 8004146:	6921      	ldr	r1, [r4, #16]
 8004148:	f000 face 	bl	80046e8 <memcpy>
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004156:	81a3      	strh	r3, [r4, #12]
 8004158:	6126      	str	r6, [r4, #16]
 800415a:	444e      	add	r6, r9
 800415c:	6026      	str	r6, [r4, #0]
 800415e:	463e      	mov	r6, r7
 8004160:	6165      	str	r5, [r4, #20]
 8004162:	eba5 0509 	sub.w	r5, r5, r9
 8004166:	60a5      	str	r5, [r4, #8]
 8004168:	42be      	cmp	r6, r7
 800416a:	d900      	bls.n	800416e <__ssputs_r+0x86>
 800416c:	463e      	mov	r6, r7
 800416e:	4632      	mov	r2, r6
 8004170:	4641      	mov	r1, r8
 8004172:	6820      	ldr	r0, [r4, #0]
 8004174:	f000 fac6 	bl	8004704 <memmove>
 8004178:	68a3      	ldr	r3, [r4, #8]
 800417a:	6822      	ldr	r2, [r4, #0]
 800417c:	1b9b      	subs	r3, r3, r6
 800417e:	4432      	add	r2, r6
 8004180:	2000      	movs	r0, #0
 8004182:	60a3      	str	r3, [r4, #8]
 8004184:	6022      	str	r2, [r4, #0]
 8004186:	e7db      	b.n	8004140 <__ssputs_r+0x58>
 8004188:	462a      	mov	r2, r5
 800418a:	f000 fb7b 	bl	8004884 <_realloc_r>
 800418e:	4606      	mov	r6, r0
 8004190:	2800      	cmp	r0, #0
 8004192:	d1e1      	bne.n	8004158 <__ssputs_r+0x70>
 8004194:	4650      	mov	r0, sl
 8004196:	6921      	ldr	r1, [r4, #16]
 8004198:	f000 face 	bl	8004738 <_free_r>
 800419c:	e7c7      	b.n	800412e <__ssputs_r+0x46>
	...

080041a0 <_svfiprintf_r>:
 80041a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a4:	4698      	mov	r8, r3
 80041a6:	898b      	ldrh	r3, [r1, #12]
 80041a8:	4607      	mov	r7, r0
 80041aa:	061b      	lsls	r3, r3, #24
 80041ac:	460d      	mov	r5, r1
 80041ae:	4614      	mov	r4, r2
 80041b0:	b09d      	sub	sp, #116	; 0x74
 80041b2:	d50e      	bpl.n	80041d2 <_svfiprintf_r+0x32>
 80041b4:	690b      	ldr	r3, [r1, #16]
 80041b6:	b963      	cbnz	r3, 80041d2 <_svfiprintf_r+0x32>
 80041b8:	2140      	movs	r1, #64	; 0x40
 80041ba:	f000 fb09 	bl	80047d0 <_malloc_r>
 80041be:	6028      	str	r0, [r5, #0]
 80041c0:	6128      	str	r0, [r5, #16]
 80041c2:	b920      	cbnz	r0, 80041ce <_svfiprintf_r+0x2e>
 80041c4:	230c      	movs	r3, #12
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	f04f 30ff 	mov.w	r0, #4294967295
 80041cc:	e0d1      	b.n	8004372 <_svfiprintf_r+0x1d2>
 80041ce:	2340      	movs	r3, #64	; 0x40
 80041d0:	616b      	str	r3, [r5, #20]
 80041d2:	2300      	movs	r3, #0
 80041d4:	9309      	str	r3, [sp, #36]	; 0x24
 80041d6:	2320      	movs	r3, #32
 80041d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041dc:	2330      	movs	r3, #48	; 0x30
 80041de:	f04f 0901 	mov.w	r9, #1
 80041e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80041e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800438c <_svfiprintf_r+0x1ec>
 80041ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041ee:	4623      	mov	r3, r4
 80041f0:	469a      	mov	sl, r3
 80041f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041f6:	b10a      	cbz	r2, 80041fc <_svfiprintf_r+0x5c>
 80041f8:	2a25      	cmp	r2, #37	; 0x25
 80041fa:	d1f9      	bne.n	80041f0 <_svfiprintf_r+0x50>
 80041fc:	ebba 0b04 	subs.w	fp, sl, r4
 8004200:	d00b      	beq.n	800421a <_svfiprintf_r+0x7a>
 8004202:	465b      	mov	r3, fp
 8004204:	4622      	mov	r2, r4
 8004206:	4629      	mov	r1, r5
 8004208:	4638      	mov	r0, r7
 800420a:	f7ff ff6d 	bl	80040e8 <__ssputs_r>
 800420e:	3001      	adds	r0, #1
 8004210:	f000 80aa 	beq.w	8004368 <_svfiprintf_r+0x1c8>
 8004214:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004216:	445a      	add	r2, fp
 8004218:	9209      	str	r2, [sp, #36]	; 0x24
 800421a:	f89a 3000 	ldrb.w	r3, [sl]
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 80a2 	beq.w	8004368 <_svfiprintf_r+0x1c8>
 8004224:	2300      	movs	r3, #0
 8004226:	f04f 32ff 	mov.w	r2, #4294967295
 800422a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800422e:	f10a 0a01 	add.w	sl, sl, #1
 8004232:	9304      	str	r3, [sp, #16]
 8004234:	9307      	str	r3, [sp, #28]
 8004236:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800423a:	931a      	str	r3, [sp, #104]	; 0x68
 800423c:	4654      	mov	r4, sl
 800423e:	2205      	movs	r2, #5
 8004240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004244:	4851      	ldr	r0, [pc, #324]	; (800438c <_svfiprintf_r+0x1ec>)
 8004246:	f000 fa41 	bl	80046cc <memchr>
 800424a:	9a04      	ldr	r2, [sp, #16]
 800424c:	b9d8      	cbnz	r0, 8004286 <_svfiprintf_r+0xe6>
 800424e:	06d0      	lsls	r0, r2, #27
 8004250:	bf44      	itt	mi
 8004252:	2320      	movmi	r3, #32
 8004254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004258:	0711      	lsls	r1, r2, #28
 800425a:	bf44      	itt	mi
 800425c:	232b      	movmi	r3, #43	; 0x2b
 800425e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004262:	f89a 3000 	ldrb.w	r3, [sl]
 8004266:	2b2a      	cmp	r3, #42	; 0x2a
 8004268:	d015      	beq.n	8004296 <_svfiprintf_r+0xf6>
 800426a:	4654      	mov	r4, sl
 800426c:	2000      	movs	r0, #0
 800426e:	f04f 0c0a 	mov.w	ip, #10
 8004272:	9a07      	ldr	r2, [sp, #28]
 8004274:	4621      	mov	r1, r4
 8004276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800427a:	3b30      	subs	r3, #48	; 0x30
 800427c:	2b09      	cmp	r3, #9
 800427e:	d94e      	bls.n	800431e <_svfiprintf_r+0x17e>
 8004280:	b1b0      	cbz	r0, 80042b0 <_svfiprintf_r+0x110>
 8004282:	9207      	str	r2, [sp, #28]
 8004284:	e014      	b.n	80042b0 <_svfiprintf_r+0x110>
 8004286:	eba0 0308 	sub.w	r3, r0, r8
 800428a:	fa09 f303 	lsl.w	r3, r9, r3
 800428e:	4313      	orrs	r3, r2
 8004290:	46a2      	mov	sl, r4
 8004292:	9304      	str	r3, [sp, #16]
 8004294:	e7d2      	b.n	800423c <_svfiprintf_r+0x9c>
 8004296:	9b03      	ldr	r3, [sp, #12]
 8004298:	1d19      	adds	r1, r3, #4
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	9103      	str	r1, [sp, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	bfbb      	ittet	lt
 80042a2:	425b      	neglt	r3, r3
 80042a4:	f042 0202 	orrlt.w	r2, r2, #2
 80042a8:	9307      	strge	r3, [sp, #28]
 80042aa:	9307      	strlt	r3, [sp, #28]
 80042ac:	bfb8      	it	lt
 80042ae:	9204      	strlt	r2, [sp, #16]
 80042b0:	7823      	ldrb	r3, [r4, #0]
 80042b2:	2b2e      	cmp	r3, #46	; 0x2e
 80042b4:	d10c      	bne.n	80042d0 <_svfiprintf_r+0x130>
 80042b6:	7863      	ldrb	r3, [r4, #1]
 80042b8:	2b2a      	cmp	r3, #42	; 0x2a
 80042ba:	d135      	bne.n	8004328 <_svfiprintf_r+0x188>
 80042bc:	9b03      	ldr	r3, [sp, #12]
 80042be:	3402      	adds	r4, #2
 80042c0:	1d1a      	adds	r2, r3, #4
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	9203      	str	r2, [sp, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	bfb8      	it	lt
 80042ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80042ce:	9305      	str	r3, [sp, #20]
 80042d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800439c <_svfiprintf_r+0x1fc>
 80042d4:	2203      	movs	r2, #3
 80042d6:	4650      	mov	r0, sl
 80042d8:	7821      	ldrb	r1, [r4, #0]
 80042da:	f000 f9f7 	bl	80046cc <memchr>
 80042de:	b140      	cbz	r0, 80042f2 <_svfiprintf_r+0x152>
 80042e0:	2340      	movs	r3, #64	; 0x40
 80042e2:	eba0 000a 	sub.w	r0, r0, sl
 80042e6:	fa03 f000 	lsl.w	r0, r3, r0
 80042ea:	9b04      	ldr	r3, [sp, #16]
 80042ec:	3401      	adds	r4, #1
 80042ee:	4303      	orrs	r3, r0
 80042f0:	9304      	str	r3, [sp, #16]
 80042f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042f6:	2206      	movs	r2, #6
 80042f8:	4825      	ldr	r0, [pc, #148]	; (8004390 <_svfiprintf_r+0x1f0>)
 80042fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042fe:	f000 f9e5 	bl	80046cc <memchr>
 8004302:	2800      	cmp	r0, #0
 8004304:	d038      	beq.n	8004378 <_svfiprintf_r+0x1d8>
 8004306:	4b23      	ldr	r3, [pc, #140]	; (8004394 <_svfiprintf_r+0x1f4>)
 8004308:	bb1b      	cbnz	r3, 8004352 <_svfiprintf_r+0x1b2>
 800430a:	9b03      	ldr	r3, [sp, #12]
 800430c:	3307      	adds	r3, #7
 800430e:	f023 0307 	bic.w	r3, r3, #7
 8004312:	3308      	adds	r3, #8
 8004314:	9303      	str	r3, [sp, #12]
 8004316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004318:	4433      	add	r3, r6
 800431a:	9309      	str	r3, [sp, #36]	; 0x24
 800431c:	e767      	b.n	80041ee <_svfiprintf_r+0x4e>
 800431e:	460c      	mov	r4, r1
 8004320:	2001      	movs	r0, #1
 8004322:	fb0c 3202 	mla	r2, ip, r2, r3
 8004326:	e7a5      	b.n	8004274 <_svfiprintf_r+0xd4>
 8004328:	2300      	movs	r3, #0
 800432a:	f04f 0c0a 	mov.w	ip, #10
 800432e:	4619      	mov	r1, r3
 8004330:	3401      	adds	r4, #1
 8004332:	9305      	str	r3, [sp, #20]
 8004334:	4620      	mov	r0, r4
 8004336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800433a:	3a30      	subs	r2, #48	; 0x30
 800433c:	2a09      	cmp	r2, #9
 800433e:	d903      	bls.n	8004348 <_svfiprintf_r+0x1a8>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0c5      	beq.n	80042d0 <_svfiprintf_r+0x130>
 8004344:	9105      	str	r1, [sp, #20]
 8004346:	e7c3      	b.n	80042d0 <_svfiprintf_r+0x130>
 8004348:	4604      	mov	r4, r0
 800434a:	2301      	movs	r3, #1
 800434c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004350:	e7f0      	b.n	8004334 <_svfiprintf_r+0x194>
 8004352:	ab03      	add	r3, sp, #12
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	462a      	mov	r2, r5
 8004358:	4638      	mov	r0, r7
 800435a:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <_svfiprintf_r+0x1f8>)
 800435c:	a904      	add	r1, sp, #16
 800435e:	f3af 8000 	nop.w
 8004362:	1c42      	adds	r2, r0, #1
 8004364:	4606      	mov	r6, r0
 8004366:	d1d6      	bne.n	8004316 <_svfiprintf_r+0x176>
 8004368:	89ab      	ldrh	r3, [r5, #12]
 800436a:	065b      	lsls	r3, r3, #25
 800436c:	f53f af2c 	bmi.w	80041c8 <_svfiprintf_r+0x28>
 8004370:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004372:	b01d      	add	sp, #116	; 0x74
 8004374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004378:	ab03      	add	r3, sp, #12
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	462a      	mov	r2, r5
 800437e:	4638      	mov	r0, r7
 8004380:	4b05      	ldr	r3, [pc, #20]	; (8004398 <_svfiprintf_r+0x1f8>)
 8004382:	a904      	add	r1, sp, #16
 8004384:	f000 f87c 	bl	8004480 <_printf_i>
 8004388:	e7eb      	b.n	8004362 <_svfiprintf_r+0x1c2>
 800438a:	bf00      	nop
 800438c:	08004968 	.word	0x08004968
 8004390:	08004972 	.word	0x08004972
 8004394:	00000000 	.word	0x00000000
 8004398:	080040e9 	.word	0x080040e9
 800439c:	0800496e 	.word	0x0800496e

080043a0 <_printf_common>:
 80043a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a4:	4616      	mov	r6, r2
 80043a6:	4699      	mov	r9, r3
 80043a8:	688a      	ldr	r2, [r1, #8]
 80043aa:	690b      	ldr	r3, [r1, #16]
 80043ac:	4607      	mov	r7, r0
 80043ae:	4293      	cmp	r3, r2
 80043b0:	bfb8      	it	lt
 80043b2:	4613      	movlt	r3, r2
 80043b4:	6033      	str	r3, [r6, #0]
 80043b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043ba:	460c      	mov	r4, r1
 80043bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043c0:	b10a      	cbz	r2, 80043c6 <_printf_common+0x26>
 80043c2:	3301      	adds	r3, #1
 80043c4:	6033      	str	r3, [r6, #0]
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	0699      	lsls	r1, r3, #26
 80043ca:	bf42      	ittt	mi
 80043cc:	6833      	ldrmi	r3, [r6, #0]
 80043ce:	3302      	addmi	r3, #2
 80043d0:	6033      	strmi	r3, [r6, #0]
 80043d2:	6825      	ldr	r5, [r4, #0]
 80043d4:	f015 0506 	ands.w	r5, r5, #6
 80043d8:	d106      	bne.n	80043e8 <_printf_common+0x48>
 80043da:	f104 0a19 	add.w	sl, r4, #25
 80043de:	68e3      	ldr	r3, [r4, #12]
 80043e0:	6832      	ldr	r2, [r6, #0]
 80043e2:	1a9b      	subs	r3, r3, r2
 80043e4:	42ab      	cmp	r3, r5
 80043e6:	dc28      	bgt.n	800443a <_printf_common+0x9a>
 80043e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043ec:	1e13      	subs	r3, r2, #0
 80043ee:	6822      	ldr	r2, [r4, #0]
 80043f0:	bf18      	it	ne
 80043f2:	2301      	movne	r3, #1
 80043f4:	0692      	lsls	r2, r2, #26
 80043f6:	d42d      	bmi.n	8004454 <_printf_common+0xb4>
 80043f8:	4649      	mov	r1, r9
 80043fa:	4638      	mov	r0, r7
 80043fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004400:	47c0      	blx	r8
 8004402:	3001      	adds	r0, #1
 8004404:	d020      	beq.n	8004448 <_printf_common+0xa8>
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	68e5      	ldr	r5, [r4, #12]
 800440a:	f003 0306 	and.w	r3, r3, #6
 800440e:	2b04      	cmp	r3, #4
 8004410:	bf18      	it	ne
 8004412:	2500      	movne	r5, #0
 8004414:	6832      	ldr	r2, [r6, #0]
 8004416:	f04f 0600 	mov.w	r6, #0
 800441a:	68a3      	ldr	r3, [r4, #8]
 800441c:	bf08      	it	eq
 800441e:	1aad      	subeq	r5, r5, r2
 8004420:	6922      	ldr	r2, [r4, #16]
 8004422:	bf08      	it	eq
 8004424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004428:	4293      	cmp	r3, r2
 800442a:	bfc4      	itt	gt
 800442c:	1a9b      	subgt	r3, r3, r2
 800442e:	18ed      	addgt	r5, r5, r3
 8004430:	341a      	adds	r4, #26
 8004432:	42b5      	cmp	r5, r6
 8004434:	d11a      	bne.n	800446c <_printf_common+0xcc>
 8004436:	2000      	movs	r0, #0
 8004438:	e008      	b.n	800444c <_printf_common+0xac>
 800443a:	2301      	movs	r3, #1
 800443c:	4652      	mov	r2, sl
 800443e:	4649      	mov	r1, r9
 8004440:	4638      	mov	r0, r7
 8004442:	47c0      	blx	r8
 8004444:	3001      	adds	r0, #1
 8004446:	d103      	bne.n	8004450 <_printf_common+0xb0>
 8004448:	f04f 30ff 	mov.w	r0, #4294967295
 800444c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004450:	3501      	adds	r5, #1
 8004452:	e7c4      	b.n	80043de <_printf_common+0x3e>
 8004454:	2030      	movs	r0, #48	; 0x30
 8004456:	18e1      	adds	r1, r4, r3
 8004458:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004462:	4422      	add	r2, r4
 8004464:	3302      	adds	r3, #2
 8004466:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800446a:	e7c5      	b.n	80043f8 <_printf_common+0x58>
 800446c:	2301      	movs	r3, #1
 800446e:	4622      	mov	r2, r4
 8004470:	4649      	mov	r1, r9
 8004472:	4638      	mov	r0, r7
 8004474:	47c0      	blx	r8
 8004476:	3001      	adds	r0, #1
 8004478:	d0e6      	beq.n	8004448 <_printf_common+0xa8>
 800447a:	3601      	adds	r6, #1
 800447c:	e7d9      	b.n	8004432 <_printf_common+0x92>
	...

08004480 <_printf_i>:
 8004480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004484:	460c      	mov	r4, r1
 8004486:	7e27      	ldrb	r7, [r4, #24]
 8004488:	4691      	mov	r9, r2
 800448a:	2f78      	cmp	r7, #120	; 0x78
 800448c:	4680      	mov	r8, r0
 800448e:	469a      	mov	sl, r3
 8004490:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004492:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004496:	d807      	bhi.n	80044a8 <_printf_i+0x28>
 8004498:	2f62      	cmp	r7, #98	; 0x62
 800449a:	d80a      	bhi.n	80044b2 <_printf_i+0x32>
 800449c:	2f00      	cmp	r7, #0
 800449e:	f000 80d9 	beq.w	8004654 <_printf_i+0x1d4>
 80044a2:	2f58      	cmp	r7, #88	; 0x58
 80044a4:	f000 80a4 	beq.w	80045f0 <_printf_i+0x170>
 80044a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044b0:	e03a      	b.n	8004528 <_printf_i+0xa8>
 80044b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044b6:	2b15      	cmp	r3, #21
 80044b8:	d8f6      	bhi.n	80044a8 <_printf_i+0x28>
 80044ba:	a001      	add	r0, pc, #4	; (adr r0, 80044c0 <_printf_i+0x40>)
 80044bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80044c0:	08004519 	.word	0x08004519
 80044c4:	0800452d 	.word	0x0800452d
 80044c8:	080044a9 	.word	0x080044a9
 80044cc:	080044a9 	.word	0x080044a9
 80044d0:	080044a9 	.word	0x080044a9
 80044d4:	080044a9 	.word	0x080044a9
 80044d8:	0800452d 	.word	0x0800452d
 80044dc:	080044a9 	.word	0x080044a9
 80044e0:	080044a9 	.word	0x080044a9
 80044e4:	080044a9 	.word	0x080044a9
 80044e8:	080044a9 	.word	0x080044a9
 80044ec:	0800463b 	.word	0x0800463b
 80044f0:	0800455d 	.word	0x0800455d
 80044f4:	0800461d 	.word	0x0800461d
 80044f8:	080044a9 	.word	0x080044a9
 80044fc:	080044a9 	.word	0x080044a9
 8004500:	0800465d 	.word	0x0800465d
 8004504:	080044a9 	.word	0x080044a9
 8004508:	0800455d 	.word	0x0800455d
 800450c:	080044a9 	.word	0x080044a9
 8004510:	080044a9 	.word	0x080044a9
 8004514:	08004625 	.word	0x08004625
 8004518:	680b      	ldr	r3, [r1, #0]
 800451a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800451e:	1d1a      	adds	r2, r3, #4
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	600a      	str	r2, [r1, #0]
 8004524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004528:	2301      	movs	r3, #1
 800452a:	e0a4      	b.n	8004676 <_printf_i+0x1f6>
 800452c:	6825      	ldr	r5, [r4, #0]
 800452e:	6808      	ldr	r0, [r1, #0]
 8004530:	062e      	lsls	r6, r5, #24
 8004532:	f100 0304 	add.w	r3, r0, #4
 8004536:	d50a      	bpl.n	800454e <_printf_i+0xce>
 8004538:	6805      	ldr	r5, [r0, #0]
 800453a:	600b      	str	r3, [r1, #0]
 800453c:	2d00      	cmp	r5, #0
 800453e:	da03      	bge.n	8004548 <_printf_i+0xc8>
 8004540:	232d      	movs	r3, #45	; 0x2d
 8004542:	426d      	negs	r5, r5
 8004544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004548:	230a      	movs	r3, #10
 800454a:	485e      	ldr	r0, [pc, #376]	; (80046c4 <_printf_i+0x244>)
 800454c:	e019      	b.n	8004582 <_printf_i+0x102>
 800454e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004552:	6805      	ldr	r5, [r0, #0]
 8004554:	600b      	str	r3, [r1, #0]
 8004556:	bf18      	it	ne
 8004558:	b22d      	sxthne	r5, r5
 800455a:	e7ef      	b.n	800453c <_printf_i+0xbc>
 800455c:	680b      	ldr	r3, [r1, #0]
 800455e:	6825      	ldr	r5, [r4, #0]
 8004560:	1d18      	adds	r0, r3, #4
 8004562:	6008      	str	r0, [r1, #0]
 8004564:	0628      	lsls	r0, r5, #24
 8004566:	d501      	bpl.n	800456c <_printf_i+0xec>
 8004568:	681d      	ldr	r5, [r3, #0]
 800456a:	e002      	b.n	8004572 <_printf_i+0xf2>
 800456c:	0669      	lsls	r1, r5, #25
 800456e:	d5fb      	bpl.n	8004568 <_printf_i+0xe8>
 8004570:	881d      	ldrh	r5, [r3, #0]
 8004572:	2f6f      	cmp	r7, #111	; 0x6f
 8004574:	bf0c      	ite	eq
 8004576:	2308      	moveq	r3, #8
 8004578:	230a      	movne	r3, #10
 800457a:	4852      	ldr	r0, [pc, #328]	; (80046c4 <_printf_i+0x244>)
 800457c:	2100      	movs	r1, #0
 800457e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004582:	6866      	ldr	r6, [r4, #4]
 8004584:	2e00      	cmp	r6, #0
 8004586:	bfa8      	it	ge
 8004588:	6821      	ldrge	r1, [r4, #0]
 800458a:	60a6      	str	r6, [r4, #8]
 800458c:	bfa4      	itt	ge
 800458e:	f021 0104 	bicge.w	r1, r1, #4
 8004592:	6021      	strge	r1, [r4, #0]
 8004594:	b90d      	cbnz	r5, 800459a <_printf_i+0x11a>
 8004596:	2e00      	cmp	r6, #0
 8004598:	d04d      	beq.n	8004636 <_printf_i+0x1b6>
 800459a:	4616      	mov	r6, r2
 800459c:	fbb5 f1f3 	udiv	r1, r5, r3
 80045a0:	fb03 5711 	mls	r7, r3, r1, r5
 80045a4:	5dc7      	ldrb	r7, [r0, r7]
 80045a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045aa:	462f      	mov	r7, r5
 80045ac:	42bb      	cmp	r3, r7
 80045ae:	460d      	mov	r5, r1
 80045b0:	d9f4      	bls.n	800459c <_printf_i+0x11c>
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d10b      	bne.n	80045ce <_printf_i+0x14e>
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	07df      	lsls	r7, r3, #31
 80045ba:	d508      	bpl.n	80045ce <_printf_i+0x14e>
 80045bc:	6923      	ldr	r3, [r4, #16]
 80045be:	6861      	ldr	r1, [r4, #4]
 80045c0:	4299      	cmp	r1, r3
 80045c2:	bfde      	ittt	le
 80045c4:	2330      	movle	r3, #48	; 0x30
 80045c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045ce:	1b92      	subs	r2, r2, r6
 80045d0:	6122      	str	r2, [r4, #16]
 80045d2:	464b      	mov	r3, r9
 80045d4:	4621      	mov	r1, r4
 80045d6:	4640      	mov	r0, r8
 80045d8:	f8cd a000 	str.w	sl, [sp]
 80045dc:	aa03      	add	r2, sp, #12
 80045de:	f7ff fedf 	bl	80043a0 <_printf_common>
 80045e2:	3001      	adds	r0, #1
 80045e4:	d14c      	bne.n	8004680 <_printf_i+0x200>
 80045e6:	f04f 30ff 	mov.w	r0, #4294967295
 80045ea:	b004      	add	sp, #16
 80045ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045f0:	4834      	ldr	r0, [pc, #208]	; (80046c4 <_printf_i+0x244>)
 80045f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045f6:	680e      	ldr	r6, [r1, #0]
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80045fe:	061f      	lsls	r7, r3, #24
 8004600:	600e      	str	r6, [r1, #0]
 8004602:	d514      	bpl.n	800462e <_printf_i+0x1ae>
 8004604:	07d9      	lsls	r1, r3, #31
 8004606:	bf44      	itt	mi
 8004608:	f043 0320 	orrmi.w	r3, r3, #32
 800460c:	6023      	strmi	r3, [r4, #0]
 800460e:	b91d      	cbnz	r5, 8004618 <_printf_i+0x198>
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	f023 0320 	bic.w	r3, r3, #32
 8004616:	6023      	str	r3, [r4, #0]
 8004618:	2310      	movs	r3, #16
 800461a:	e7af      	b.n	800457c <_printf_i+0xfc>
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	f043 0320 	orr.w	r3, r3, #32
 8004622:	6023      	str	r3, [r4, #0]
 8004624:	2378      	movs	r3, #120	; 0x78
 8004626:	4828      	ldr	r0, [pc, #160]	; (80046c8 <_printf_i+0x248>)
 8004628:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800462c:	e7e3      	b.n	80045f6 <_printf_i+0x176>
 800462e:	065e      	lsls	r6, r3, #25
 8004630:	bf48      	it	mi
 8004632:	b2ad      	uxthmi	r5, r5
 8004634:	e7e6      	b.n	8004604 <_printf_i+0x184>
 8004636:	4616      	mov	r6, r2
 8004638:	e7bb      	b.n	80045b2 <_printf_i+0x132>
 800463a:	680b      	ldr	r3, [r1, #0]
 800463c:	6826      	ldr	r6, [r4, #0]
 800463e:	1d1d      	adds	r5, r3, #4
 8004640:	6960      	ldr	r0, [r4, #20]
 8004642:	600d      	str	r5, [r1, #0]
 8004644:	0635      	lsls	r5, r6, #24
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	d501      	bpl.n	800464e <_printf_i+0x1ce>
 800464a:	6018      	str	r0, [r3, #0]
 800464c:	e002      	b.n	8004654 <_printf_i+0x1d4>
 800464e:	0671      	lsls	r1, r6, #25
 8004650:	d5fb      	bpl.n	800464a <_printf_i+0x1ca>
 8004652:	8018      	strh	r0, [r3, #0]
 8004654:	2300      	movs	r3, #0
 8004656:	4616      	mov	r6, r2
 8004658:	6123      	str	r3, [r4, #16]
 800465a:	e7ba      	b.n	80045d2 <_printf_i+0x152>
 800465c:	680b      	ldr	r3, [r1, #0]
 800465e:	1d1a      	adds	r2, r3, #4
 8004660:	600a      	str	r2, [r1, #0]
 8004662:	681e      	ldr	r6, [r3, #0]
 8004664:	2100      	movs	r1, #0
 8004666:	4630      	mov	r0, r6
 8004668:	6862      	ldr	r2, [r4, #4]
 800466a:	f000 f82f 	bl	80046cc <memchr>
 800466e:	b108      	cbz	r0, 8004674 <_printf_i+0x1f4>
 8004670:	1b80      	subs	r0, r0, r6
 8004672:	6060      	str	r0, [r4, #4]
 8004674:	6863      	ldr	r3, [r4, #4]
 8004676:	6123      	str	r3, [r4, #16]
 8004678:	2300      	movs	r3, #0
 800467a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800467e:	e7a8      	b.n	80045d2 <_printf_i+0x152>
 8004680:	4632      	mov	r2, r6
 8004682:	4649      	mov	r1, r9
 8004684:	4640      	mov	r0, r8
 8004686:	6923      	ldr	r3, [r4, #16]
 8004688:	47d0      	blx	sl
 800468a:	3001      	adds	r0, #1
 800468c:	d0ab      	beq.n	80045e6 <_printf_i+0x166>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	079b      	lsls	r3, r3, #30
 8004692:	d413      	bmi.n	80046bc <_printf_i+0x23c>
 8004694:	68e0      	ldr	r0, [r4, #12]
 8004696:	9b03      	ldr	r3, [sp, #12]
 8004698:	4298      	cmp	r0, r3
 800469a:	bfb8      	it	lt
 800469c:	4618      	movlt	r0, r3
 800469e:	e7a4      	b.n	80045ea <_printf_i+0x16a>
 80046a0:	2301      	movs	r3, #1
 80046a2:	4632      	mov	r2, r6
 80046a4:	4649      	mov	r1, r9
 80046a6:	4640      	mov	r0, r8
 80046a8:	47d0      	blx	sl
 80046aa:	3001      	adds	r0, #1
 80046ac:	d09b      	beq.n	80045e6 <_printf_i+0x166>
 80046ae:	3501      	adds	r5, #1
 80046b0:	68e3      	ldr	r3, [r4, #12]
 80046b2:	9903      	ldr	r1, [sp, #12]
 80046b4:	1a5b      	subs	r3, r3, r1
 80046b6:	42ab      	cmp	r3, r5
 80046b8:	dcf2      	bgt.n	80046a0 <_printf_i+0x220>
 80046ba:	e7eb      	b.n	8004694 <_printf_i+0x214>
 80046bc:	2500      	movs	r5, #0
 80046be:	f104 0619 	add.w	r6, r4, #25
 80046c2:	e7f5      	b.n	80046b0 <_printf_i+0x230>
 80046c4:	08004979 	.word	0x08004979
 80046c8:	0800498a 	.word	0x0800498a

080046cc <memchr>:
 80046cc:	4603      	mov	r3, r0
 80046ce:	b510      	push	{r4, lr}
 80046d0:	b2c9      	uxtb	r1, r1
 80046d2:	4402      	add	r2, r0
 80046d4:	4293      	cmp	r3, r2
 80046d6:	4618      	mov	r0, r3
 80046d8:	d101      	bne.n	80046de <memchr+0x12>
 80046da:	2000      	movs	r0, #0
 80046dc:	e003      	b.n	80046e6 <memchr+0x1a>
 80046de:	7804      	ldrb	r4, [r0, #0]
 80046e0:	3301      	adds	r3, #1
 80046e2:	428c      	cmp	r4, r1
 80046e4:	d1f6      	bne.n	80046d4 <memchr+0x8>
 80046e6:	bd10      	pop	{r4, pc}

080046e8 <memcpy>:
 80046e8:	440a      	add	r2, r1
 80046ea:	4291      	cmp	r1, r2
 80046ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80046f0:	d100      	bne.n	80046f4 <memcpy+0xc>
 80046f2:	4770      	bx	lr
 80046f4:	b510      	push	{r4, lr}
 80046f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046fa:	4291      	cmp	r1, r2
 80046fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004700:	d1f9      	bne.n	80046f6 <memcpy+0xe>
 8004702:	bd10      	pop	{r4, pc}

08004704 <memmove>:
 8004704:	4288      	cmp	r0, r1
 8004706:	b510      	push	{r4, lr}
 8004708:	eb01 0402 	add.w	r4, r1, r2
 800470c:	d902      	bls.n	8004714 <memmove+0x10>
 800470e:	4284      	cmp	r4, r0
 8004710:	4623      	mov	r3, r4
 8004712:	d807      	bhi.n	8004724 <memmove+0x20>
 8004714:	1e43      	subs	r3, r0, #1
 8004716:	42a1      	cmp	r1, r4
 8004718:	d008      	beq.n	800472c <memmove+0x28>
 800471a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800471e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004722:	e7f8      	b.n	8004716 <memmove+0x12>
 8004724:	4601      	mov	r1, r0
 8004726:	4402      	add	r2, r0
 8004728:	428a      	cmp	r2, r1
 800472a:	d100      	bne.n	800472e <memmove+0x2a>
 800472c:	bd10      	pop	{r4, pc}
 800472e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004736:	e7f7      	b.n	8004728 <memmove+0x24>

08004738 <_free_r>:
 8004738:	b538      	push	{r3, r4, r5, lr}
 800473a:	4605      	mov	r5, r0
 800473c:	2900      	cmp	r1, #0
 800473e:	d043      	beq.n	80047c8 <_free_r+0x90>
 8004740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004744:	1f0c      	subs	r4, r1, #4
 8004746:	2b00      	cmp	r3, #0
 8004748:	bfb8      	it	lt
 800474a:	18e4      	addlt	r4, r4, r3
 800474c:	f000 f8d0 	bl	80048f0 <__malloc_lock>
 8004750:	4a1e      	ldr	r2, [pc, #120]	; (80047cc <_free_r+0x94>)
 8004752:	6813      	ldr	r3, [r2, #0]
 8004754:	4610      	mov	r0, r2
 8004756:	b933      	cbnz	r3, 8004766 <_free_r+0x2e>
 8004758:	6063      	str	r3, [r4, #4]
 800475a:	6014      	str	r4, [r2, #0]
 800475c:	4628      	mov	r0, r5
 800475e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004762:	f000 b8cb 	b.w	80048fc <__malloc_unlock>
 8004766:	42a3      	cmp	r3, r4
 8004768:	d90a      	bls.n	8004780 <_free_r+0x48>
 800476a:	6821      	ldr	r1, [r4, #0]
 800476c:	1862      	adds	r2, r4, r1
 800476e:	4293      	cmp	r3, r2
 8004770:	bf01      	itttt	eq
 8004772:	681a      	ldreq	r2, [r3, #0]
 8004774:	685b      	ldreq	r3, [r3, #4]
 8004776:	1852      	addeq	r2, r2, r1
 8004778:	6022      	streq	r2, [r4, #0]
 800477a:	6063      	str	r3, [r4, #4]
 800477c:	6004      	str	r4, [r0, #0]
 800477e:	e7ed      	b.n	800475c <_free_r+0x24>
 8004780:	461a      	mov	r2, r3
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	b10b      	cbz	r3, 800478a <_free_r+0x52>
 8004786:	42a3      	cmp	r3, r4
 8004788:	d9fa      	bls.n	8004780 <_free_r+0x48>
 800478a:	6811      	ldr	r1, [r2, #0]
 800478c:	1850      	adds	r0, r2, r1
 800478e:	42a0      	cmp	r0, r4
 8004790:	d10b      	bne.n	80047aa <_free_r+0x72>
 8004792:	6820      	ldr	r0, [r4, #0]
 8004794:	4401      	add	r1, r0
 8004796:	1850      	adds	r0, r2, r1
 8004798:	4283      	cmp	r3, r0
 800479a:	6011      	str	r1, [r2, #0]
 800479c:	d1de      	bne.n	800475c <_free_r+0x24>
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	4401      	add	r1, r0
 80047a4:	6011      	str	r1, [r2, #0]
 80047a6:	6053      	str	r3, [r2, #4]
 80047a8:	e7d8      	b.n	800475c <_free_r+0x24>
 80047aa:	d902      	bls.n	80047b2 <_free_r+0x7a>
 80047ac:	230c      	movs	r3, #12
 80047ae:	602b      	str	r3, [r5, #0]
 80047b0:	e7d4      	b.n	800475c <_free_r+0x24>
 80047b2:	6820      	ldr	r0, [r4, #0]
 80047b4:	1821      	adds	r1, r4, r0
 80047b6:	428b      	cmp	r3, r1
 80047b8:	bf01      	itttt	eq
 80047ba:	6819      	ldreq	r1, [r3, #0]
 80047bc:	685b      	ldreq	r3, [r3, #4]
 80047be:	1809      	addeq	r1, r1, r0
 80047c0:	6021      	streq	r1, [r4, #0]
 80047c2:	6063      	str	r3, [r4, #4]
 80047c4:	6054      	str	r4, [r2, #4]
 80047c6:	e7c9      	b.n	800475c <_free_r+0x24>
 80047c8:	bd38      	pop	{r3, r4, r5, pc}
 80047ca:	bf00      	nop
 80047cc:	2000013c 	.word	0x2000013c

080047d0 <_malloc_r>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	1ccd      	adds	r5, r1, #3
 80047d4:	f025 0503 	bic.w	r5, r5, #3
 80047d8:	3508      	adds	r5, #8
 80047da:	2d0c      	cmp	r5, #12
 80047dc:	bf38      	it	cc
 80047de:	250c      	movcc	r5, #12
 80047e0:	2d00      	cmp	r5, #0
 80047e2:	4606      	mov	r6, r0
 80047e4:	db01      	blt.n	80047ea <_malloc_r+0x1a>
 80047e6:	42a9      	cmp	r1, r5
 80047e8:	d903      	bls.n	80047f2 <_malloc_r+0x22>
 80047ea:	230c      	movs	r3, #12
 80047ec:	6033      	str	r3, [r6, #0]
 80047ee:	2000      	movs	r0, #0
 80047f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047f2:	f000 f87d 	bl	80048f0 <__malloc_lock>
 80047f6:	4921      	ldr	r1, [pc, #132]	; (800487c <_malloc_r+0xac>)
 80047f8:	680a      	ldr	r2, [r1, #0]
 80047fa:	4614      	mov	r4, r2
 80047fc:	b99c      	cbnz	r4, 8004826 <_malloc_r+0x56>
 80047fe:	4f20      	ldr	r7, [pc, #128]	; (8004880 <_malloc_r+0xb0>)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	b923      	cbnz	r3, 800480e <_malloc_r+0x3e>
 8004804:	4621      	mov	r1, r4
 8004806:	4630      	mov	r0, r6
 8004808:	f000 f862 	bl	80048d0 <_sbrk_r>
 800480c:	6038      	str	r0, [r7, #0]
 800480e:	4629      	mov	r1, r5
 8004810:	4630      	mov	r0, r6
 8004812:	f000 f85d 	bl	80048d0 <_sbrk_r>
 8004816:	1c43      	adds	r3, r0, #1
 8004818:	d123      	bne.n	8004862 <_malloc_r+0x92>
 800481a:	230c      	movs	r3, #12
 800481c:	4630      	mov	r0, r6
 800481e:	6033      	str	r3, [r6, #0]
 8004820:	f000 f86c 	bl	80048fc <__malloc_unlock>
 8004824:	e7e3      	b.n	80047ee <_malloc_r+0x1e>
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	1b5b      	subs	r3, r3, r5
 800482a:	d417      	bmi.n	800485c <_malloc_r+0x8c>
 800482c:	2b0b      	cmp	r3, #11
 800482e:	d903      	bls.n	8004838 <_malloc_r+0x68>
 8004830:	6023      	str	r3, [r4, #0]
 8004832:	441c      	add	r4, r3
 8004834:	6025      	str	r5, [r4, #0]
 8004836:	e004      	b.n	8004842 <_malloc_r+0x72>
 8004838:	6863      	ldr	r3, [r4, #4]
 800483a:	42a2      	cmp	r2, r4
 800483c:	bf0c      	ite	eq
 800483e:	600b      	streq	r3, [r1, #0]
 8004840:	6053      	strne	r3, [r2, #4]
 8004842:	4630      	mov	r0, r6
 8004844:	f000 f85a 	bl	80048fc <__malloc_unlock>
 8004848:	f104 000b 	add.w	r0, r4, #11
 800484c:	1d23      	adds	r3, r4, #4
 800484e:	f020 0007 	bic.w	r0, r0, #7
 8004852:	1ac2      	subs	r2, r0, r3
 8004854:	d0cc      	beq.n	80047f0 <_malloc_r+0x20>
 8004856:	1a1b      	subs	r3, r3, r0
 8004858:	50a3      	str	r3, [r4, r2]
 800485a:	e7c9      	b.n	80047f0 <_malloc_r+0x20>
 800485c:	4622      	mov	r2, r4
 800485e:	6864      	ldr	r4, [r4, #4]
 8004860:	e7cc      	b.n	80047fc <_malloc_r+0x2c>
 8004862:	1cc4      	adds	r4, r0, #3
 8004864:	f024 0403 	bic.w	r4, r4, #3
 8004868:	42a0      	cmp	r0, r4
 800486a:	d0e3      	beq.n	8004834 <_malloc_r+0x64>
 800486c:	1a21      	subs	r1, r4, r0
 800486e:	4630      	mov	r0, r6
 8004870:	f000 f82e 	bl	80048d0 <_sbrk_r>
 8004874:	3001      	adds	r0, #1
 8004876:	d1dd      	bne.n	8004834 <_malloc_r+0x64>
 8004878:	e7cf      	b.n	800481a <_malloc_r+0x4a>
 800487a:	bf00      	nop
 800487c:	2000013c 	.word	0x2000013c
 8004880:	20000140 	.word	0x20000140

08004884 <_realloc_r>:
 8004884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004886:	4607      	mov	r7, r0
 8004888:	4614      	mov	r4, r2
 800488a:	460e      	mov	r6, r1
 800488c:	b921      	cbnz	r1, 8004898 <_realloc_r+0x14>
 800488e:	4611      	mov	r1, r2
 8004890:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004894:	f7ff bf9c 	b.w	80047d0 <_malloc_r>
 8004898:	b922      	cbnz	r2, 80048a4 <_realloc_r+0x20>
 800489a:	f7ff ff4d 	bl	8004738 <_free_r>
 800489e:	4625      	mov	r5, r4
 80048a0:	4628      	mov	r0, r5
 80048a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048a4:	f000 f830 	bl	8004908 <_malloc_usable_size_r>
 80048a8:	42a0      	cmp	r0, r4
 80048aa:	d20f      	bcs.n	80048cc <_realloc_r+0x48>
 80048ac:	4621      	mov	r1, r4
 80048ae:	4638      	mov	r0, r7
 80048b0:	f7ff ff8e 	bl	80047d0 <_malloc_r>
 80048b4:	4605      	mov	r5, r0
 80048b6:	2800      	cmp	r0, #0
 80048b8:	d0f2      	beq.n	80048a0 <_realloc_r+0x1c>
 80048ba:	4631      	mov	r1, r6
 80048bc:	4622      	mov	r2, r4
 80048be:	f7ff ff13 	bl	80046e8 <memcpy>
 80048c2:	4631      	mov	r1, r6
 80048c4:	4638      	mov	r0, r7
 80048c6:	f7ff ff37 	bl	8004738 <_free_r>
 80048ca:	e7e9      	b.n	80048a0 <_realloc_r+0x1c>
 80048cc:	4635      	mov	r5, r6
 80048ce:	e7e7      	b.n	80048a0 <_realloc_r+0x1c>

080048d0 <_sbrk_r>:
 80048d0:	b538      	push	{r3, r4, r5, lr}
 80048d2:	2300      	movs	r3, #0
 80048d4:	4d05      	ldr	r5, [pc, #20]	; (80048ec <_sbrk_r+0x1c>)
 80048d6:	4604      	mov	r4, r0
 80048d8:	4608      	mov	r0, r1
 80048da:	602b      	str	r3, [r5, #0]
 80048dc:	f7fd fba0 	bl	8002020 <_sbrk>
 80048e0:	1c43      	adds	r3, r0, #1
 80048e2:	d102      	bne.n	80048ea <_sbrk_r+0x1a>
 80048e4:	682b      	ldr	r3, [r5, #0]
 80048e6:	b103      	cbz	r3, 80048ea <_sbrk_r+0x1a>
 80048e8:	6023      	str	r3, [r4, #0]
 80048ea:	bd38      	pop	{r3, r4, r5, pc}
 80048ec:	20000250 	.word	0x20000250

080048f0 <__malloc_lock>:
 80048f0:	4801      	ldr	r0, [pc, #4]	; (80048f8 <__malloc_lock+0x8>)
 80048f2:	f000 b811 	b.w	8004918 <__retarget_lock_acquire_recursive>
 80048f6:	bf00      	nop
 80048f8:	20000258 	.word	0x20000258

080048fc <__malloc_unlock>:
 80048fc:	4801      	ldr	r0, [pc, #4]	; (8004904 <__malloc_unlock+0x8>)
 80048fe:	f000 b80c 	b.w	800491a <__retarget_lock_release_recursive>
 8004902:	bf00      	nop
 8004904:	20000258 	.word	0x20000258

08004908 <_malloc_usable_size_r>:
 8004908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800490c:	1f18      	subs	r0, r3, #4
 800490e:	2b00      	cmp	r3, #0
 8004910:	bfbc      	itt	lt
 8004912:	580b      	ldrlt	r3, [r1, r0]
 8004914:	18c0      	addlt	r0, r0, r3
 8004916:	4770      	bx	lr

08004918 <__retarget_lock_acquire_recursive>:
 8004918:	4770      	bx	lr

0800491a <__retarget_lock_release_recursive>:
 800491a:	4770      	bx	lr

0800491c <_init>:
 800491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491e:	bf00      	nop
 8004920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004922:	bc08      	pop	{r3}
 8004924:	469e      	mov	lr, r3
 8004926:	4770      	bx	lr

08004928 <_fini>:
 8004928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492a:	bf00      	nop
 800492c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492e:	bc08      	pop	{r3}
 8004930:	469e      	mov	lr, r3
 8004932:	4770      	bx	lr
